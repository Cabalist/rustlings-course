{
  "summary" : "Small exercises to get you used to reading and writing Rust code!",
  "title" : "Rustlings",
  "programming_language" : "Rust",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "Getting started",
      "task_list" : [
        {
          "name" : "Installation",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"installation\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Getting Started\n\nLet’s start your Rust journey! There’s a lot to learn, but every journey starts somewhere. In this lesson, we’ll discuss:\n\n* Verification of Rust installation\n* Writing a program that prints Hello, world!\n\n### Command Line Notation\n\nIn this lesson and throughout the course, we’ll show some commands used in the terminal. Lines that you should enter in a terminal all start with `$`. You don’t need to type in the `$` character; it indicates the start of each command. Lines that don’t start with `$` typically show the output of the previous command. Additionally, PowerShell-specific examples will use `>` rather than `$`.\n     \n### Verification of Rust installation\n\nSince you joined this course, we can assume that `rustup` has been installed already but let's double-check this.\n\nIf you’re using Linux or macOS, open a terminal by going to **View | Tool Windows | Terminal** or pressing **⌥ F12** or **Alt F12** and enter the following command:\n\n```text\n$ rustc --version\n```\nYou should see the version number, commit hash, and commit date for the latest stable version that has been released in the following format:\n```text\n\nrustc x.y.z (abcabcabc yyyy-mm-dd)\n```\n\nIf you see this information, you have installed Rust successfully! If you don’t see this information and you’re on Windows, check that Rust is in your `%PATH%` system variable.\n\n### Linker\n\nAdditionally, you’ll need a linker of some kind. It’s likely one is already installed, but when you try to compile a Rust program and get errors indicating that a linker could not execute, that means a linker isn’t installed on your system and you’ll need to install one manually. C compilers usually come with the correct linker. Check your platform’s documentation for how to install a C compiler. Also, some common Rust packages depend on C code and will need a C compiler. Therefore, it might be worth installing one now.\n\nFor Windows you’ll also need the C++ build tools for Visual Studio 2013 or later. The easiest way to acquire the build tools is to install [Build Tools for Visual Studio 2017](https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017). The tools are in the Other Tools and Frameworks section.\n\n### Updating and Uninstalling\n\nAfter you’ve installed Rust via `rustup`, updating to the latest version is easy. From your shell, run the following update script:\n\n```text\n$ rustup update\n```\n\nTo uninstall Rust and 'rustup', run the following uninstall script from your shell:\n\n```text\n$ rustup self uninstall\n```\n\n### Local Documentation\n\nThe installer also includes a copy of the documentation locally, so you can read it offline. Run `rustup doc` to open the local documentation in your browser.\n\nAny time a type or function is provided by the standard library and you’re not sure what it does or how to use it, use the application programming interface (API) documentation to find out!\n\n_You can refer to the following chapter in the Rust Programming Language book: [Installation](https://doc.rust-lang.org/stable/book/ch01-01-installation.html)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Hello World",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## Hello, World!\n\nNow that you’ve installed Rust, let’s write your first Rust program. It’s traditional when learning a new language to write a little program that prints the text `Hello, world!` to the screen, so we’ll do the same here!\n\nYou can see the **Editor** window in the left. This is your sandbox and you can test your code here.\nThe `main.rs` file has the following lines:\n\n```rust\nfn main() {\n    // put you code here to launch it\n}\n\n``` \nNow let's replace these lines with the code in Listing 1-1:\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n##### Listing 1-1: A program that prints Hello, world!\n\nTo run this code click on **Run** button in the **Task Description** window.\n\nIf `Hello, world!` did print, congratulations! You’ve officially written a Rust program. That makes you a Rust programmer—welcome!\n\n### Anatomy of a Rust Program\n\nLet’s review in detail what just happened in your Hello, world! program. Here’s the first piece of the puzzle:\n\n```rust\n\nfn main() {\n\n}\n```\n\nThese lines define a function in Rust. The `main` function is special: it is always the first code that runs in every executable Rust program. The first line declares a function named `main` that has no parameters and returns nothing. If there were parameters, they would go inside the parentheses, `()`.\n\nAlso, note that the function body is wrapped in curly brackets, `{}`. Rust requires these around all function bodies. It’s good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.\n\nAt the time of this writing, an automatic formatter tool called `rustfmt` is under development. If you want to stick to a standard style across Rust projects, `rustfmt` will format your code in a particular style. The Rust team plans to eventually include this tool with the standard Rust distribution, like `rustc`. So depending on when you read this book, it might already be installed on your computer! Check the online documentation for more details.\n\nInside the `main` function is the following code:\n\n```rust\n    println!(\"Hello, world!\");\n```\n\nThis line does all the work in this little program: it prints text to the screen. There are four important details to notice here. First, Rust style is to indent with four spaces, not a tab.\n\nSecond, println! calls a Rust macro. If it called a function instead, it would be entered as `println` (without the `!`). We’ll discuss Rust macros in more detail a bit later. For now, you just need to know that using a `!` means that you’re calling a macro instead of a normal function.\n\nThird, you see the `\"Hello, world!\"` string. We pass this string as an argument to `println!`, and the string is printed to the screen.\n\nFourth, we end the line with a semicolon (`;`), which indicates that this expression is over and the next one is ready to begin. Most lines of Rust code end with a semicolon.\n\n_You can refer to the following chapter in the Rust Programming Language book: [Hello, World!](https://doc.rust-lang.org/stable/book/ch01-02-hello-world.html)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Programming a Guessing Game",
      "task_list" : [
        {
          "name" : "Programming a Guesssing Game",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 31,
                  "possible_answer" : "_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________",
                  "placeholder_text" : "Put your code here to launch it"
                }
              ],
              "is_visible" : true,
              "text" : "Put your code here to launch it"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"processing_a_guess\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "Let’s jump into Rust by working through a hands-on project together! This chapter introduces you to a few common Rust concepts by showing you how to use them in a real program. You’ll learn about `let`, `match`, methods, associated functions, using external crates, and more! The following lessons will explore these ideas in more detail. In this lesson, you’ll practice the fundamentals.\n\nWe’ll implement a classic beginner programming problem: a guessing game. Here’s how it works: the program will generate a random integer between 1 and 100. It will then prompt the player to enter a guess. After a guess is entered, the program will indicate whether the guess is too low or too high. If the guess is correct, the game will print a congratulatory message and exit.\n\n### Processing a Guess\n\nThe first part of the guessing game program will ask for user input, process that input, and check that the input is in the expected form. To start, we’ll allow the player to input a guess. Enter the code in Listing 2-1 into _src/main.rs_.\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin().read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\n##### Listing 2-1: Code that gets a guess from the user and prints it\n\nThis code contains a lot of information, so let’s go over it line by line. To obtain user input and then print the result as output, we need to bring the `io` (input/output) library into scope. The `io` library comes from the standard library (which is known as `std`):\n\n```rust\nuse std::io;\n```\n\nBy default, Rust brings only a few types into the scope of every program in _[the prelude](https://doc.rust-lang.org/stable/std/prelude/index.html)_. If a type you want to use isn’t in the prelude, you have to bring that type into scope explicitly with a `use` statement. Using the `std::io` library provides you with a number of useful features, including the ability to accept user input.\n\nAs you saw in Lesson 1, the main function is the entry point into the program:\n\n```rust\nfn main() {\n```\n\nThe `fn` syntax declares a new function, the parentheses, `()`, indicate there are no parameters, and the curly bracket, `{`, starts the body of the function.\n\nAs you also learned in Lesson 1, `println!` is a macro that prints a string to the screen:\n\n```rust\nprintln!(\"Guess the number!\");\n\nprintln!(\"Please input your guess.\");\n```\n\nThis code is printing a prompt stating what the game is and requesting input from the user.\n\nYou can refer to the following chapter in the Rust Programming Language Book: [Processing a Guess](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#processing-a-guess)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Generating a Secret Number",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 31,
                  "dependency" : {
                    "lesson" : "Programming a Guessing Game",
                    "task" : "Storing Values with Variables",
                    "file" : "src/main.rs",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________",
                  "placeholder_text" : "Put your code here to launch it"
                }
              ],
              "is_visible" : true,
              "text" : "Put your code here to launch it"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"processing_a_guess\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[dependencies]\n\nrand = \"0.3.14\""
            }
          },
          "description_text" : "Next, we need to generate a secret number that the user will try to guess. The secret number should be different every time so the game is fun to play more than once. Let’s use a random number between 1 and 100 so the game isn’t too difficult. Rust doesn’t yet include random number functionality in its standard library. However, the Rust team does provide a 'rand' [crate](https://crates.io/crates/rand).\n\n### Using a Crate to Get More Functionality\n\nRemember that a crate is a collection of Rust source code files. The project we’ve been building is a _binary crate_, which is an executable. The `rand` crate is a library crate, which contains code intended to be used in other programs.\n\nCargo’s use of external crates is where it really shines. Before we can write code that uses `rand`, we need to modify the _Cargo.toml_ file to include the `rand` crate as a dependency. Open that file now and add the following line to the bottom beneath the `[dependencies]` section header that Cargo created for you:\n\n```toml\n[dependencies]\n\nrand = \"0.3.14\"\n```\n\nIn the _Cargo.toml_ file, everything that follows a header is part of a section that continues until another section starts. The `[dependencies]` section is where you tell Cargo which external crates your project depends on and which versions of those crates you require. In this case, we’ll specify the `rand` crate with the semantic version specifier `0.3.14`. Cargo understands [Semantic Versioning](http://semver.org/) (sometimes called _SemVer_), which is a standard for writing version numbers. The number 0.3.14 is actually shorthand for `^0.3.14`, which means “any version that has a public API compatible with version 0.3.14.”\n\nNow, without changing any of the code, let’s build the project, as shown in Listing 2-2.\n\n```text\n$ cargo build\n    Updating registry `https://github.com/rust-lang/crates.io-index`\n Downloading rand v0.3.14\n Downloading libc v0.2.14\n   Compiling libc v0.2.14\n   Compiling rand v0.3.14\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n```\n\n##### Listing 2-2: The output from running cargo build after adding the rand crate as a dependency\n\nYou may see different version numbers (but they will all be compatible with the code, thanks to SemVer!), and the lines may be in a different order.\n\nNow that we have an external dependency, Cargo fetches the latest versions of everything from the _registry_, which is a copy of data from [Crates.io](https://crates.io/). Crates.io is where people in the Rust ecosystem post their open source Rust projects for others to use.\n\nAfter updating the registry, Cargo checks the `[dependencies]` section and downloads any crates you don’t have yet. In this case, although we only listed `rand` as a dependency, Cargo also grabbed a copy of `libc`, because rand depends on `libc` to work. After downloading the crates, Rust compiles them and then compiles the project with the dependencies available.\n\nIf you immediately run `cargo build` again without making any changes, you won’t get any output aside from the `Finished` line. Cargo knows it has already downloaded and compiled the dependencies, and you haven’t changed anything about them in your _Cargo.toml_ file. Cargo also knows that you haven’t changed anything about your code, so it doesn’t recompile that either. With nothing to do, it simply exits.\n\nIf you open up the _src/main.rs_ file, make a trivial change, and then save it and build again, you’ll only see two lines of output:\n\n```text\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n```\n\nThese lines show Cargo only updates the build with your tiny change to the _src/main.rs_ file. Your dependencies haven’t changed, so Cargo knows it can reuse what it has already downloaded and compiled for those. It just rebuilds your part of the code.\n\n### Ensuring Reproducible Builds with the Cargo.lock File\n\nCargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, what happens if next week version 0.3.15 of the `rand` crate comes out and contains an important bug fix but also contains a regression that will break your code?\n\nThe answer to this problem is the Cargo.lock file, which was created the first time you ran `cargo build` and is now in your guessing_game directory. When you build a project for the first time, Cargo figures out all the versions of the dependencies that fit the criteria and then writes them to the _Cargo.lock_ file. When you build your project in the future, Cargo will see that the _Cargo.lock_ file exists and use the versions specified there rather than doing all the work of figuring out versions again. This lets you have a reproducible build automatically. In other words, your project will remain at `0.3.14` until you explicitly upgrade, thanks to the _Cargo.lock_ file.\n\n### Updating a Crate to Get a New Version\n\nWhen you _do_ want to update a crate, Cargo provides another command, `update`, which will ignore the _Cargo.lock_ file and figure out all the latest versions that fit your specifications in _Cargo.toml_. If that works, Cargo will write those versions to the _Cargo.lock_ file.\n\nBut by default, Cargo will only look for versions greater than `0.3.0` and less than `0.4.0`. If the `rand` crate has released two new versions, `0.3.15` and `0.4.0`, you would see the following if you ran `cargo update`:\n\n$ cargo update\n    Updating registry `https://github.com/rust-lang/crates.io-index`\n    Updating rand v0.3.14 -> v0.3.15\n\nAt this point, you would also notice a change in your Cargo.lock file noting that the version of the rand crate you are now using is `0.3.15`.\n\nIf you wanted to use rand version `0.4.0` or any version in the `0.4.x` series, you’d have to update the _Cargo.toml_ file to look like this instead:\n\n```toml\n[dependencies]\n\nrand = \"0.4.0\"\n```\n\nThe next time you run `cargo build`, Cargo will update the registry of crates available and reevaluate your `rand` requirements according to the new version you have specified.\n\nThere’s a lot more to say about [Cargo](http://doc.crates.io/) and [its ecosystem](http://doc.crates.io/crates-io.html), but for now, that’s all you need to know. Cargo makes it very easy to reuse libraries, so Rustaceans are able to write smaller projects that are assembled from a number of packages.\n\n### Generating a Random Number\n\nNow that you’ve added the `rand` crate to _Cargo.toml_, let’s start using `rand`. The next step is to update src/main.rs, as shown in Listing 2-3.\n\n```rust\n\nuse std::io;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n    println!(\"The secret number is: {}\", secret_number);\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin().read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\n##### Listing 2-3: Adding code to generate a random number\n\nFirst, we add a `use` line: `use rand::Rng`. The `Rng` trait defines methods that random number generators implement, and this trait must be in scope for us to use those methods.\n\nNext, we’re adding two lines in the middle. The `rand::thread_rng` function will give us the particular random number generator that we’re going to use: one that is local to the current thread of execution and seeded by the operating system. Then we call the `gen_range` method on the random number generator. This method is defined by the `Rng` trait that we brought into scope with the `use rand::Rng` statement. The gen_range method takes two numbers as arguments and generates a random number between them. It’s inclusive on the lower bound but exclusive on the upper bound, so we need to specify `1` and `101` to request a number between 1 and 100.\n\n  > Note: You won’t just know which traits to use and which methods and functions to call from a crate. Instructions for using a crate are in each crate’s documentation. Another neat feature of Cargo is that you can run the cargo doc --open command, which will build documentation provided by all of your dependencies locally and open it in your browser. If you’re interested in other functionality in the rand crate, for example, run cargo doc --open and click rand in the sidebar on the left.\n\nThe second line that we added to the middle of the code prints the secret number. This is useful while we’re developing the program to be able to test it, but we’ll delete it from the final version. It’s not much of a game if the program prints the answer as soon as it starts!\n\nTry running the program a few times:\n\n```text\nFinished dev [unoptimized + debuginfo] target(s) in 0.08s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nThe secret number is: 3\nPlease input your guess.\n2\nYou guessed: 2\n\nFinished dev [unoptimized + debuginfo] target(s) in 0.08s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nThe secret number is: 11\nPlease input your guess.\n7\nYou guessed: 7\n```\n\nYou should get different random numbers, and they should all be numbers between 1 and 100. Great job!\n\nYou can refer to the following chapter in the Rust Programming Language Book:[Generating a Secret Number](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#generating-a-secret-number)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Comparing the Guess to the Secret Number",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 31,
                  "dependency" : {
                    "lesson" : "Programming a Guessing Game",
                    "task" : "Generating a Secret Number",
                    "file" : "src/main.rs",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer
                  "placeholder_text" : "Put your code here to launch it"
                }
              ],
              "is_visible" : true,
              "text" : "Put your code here to launch it"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"processing_a_guess\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[dependencies]\n\nrand = \"0.3.14\""
            }
          },
          "description_text" : "Now that we have user input and a random number, we can compare them. That step is shown in Listing 2-4. Note that this code won’t compile quite yet, as we will explain.\n\n```rust\nuse std::io;\nuse std::cmp::Ordering;\nuse rand::Rng;\n\nfn main() {\n\n    // ---snip---\n\n    println!(\"You guessed: {}\", guess);\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\n##### Listing 2-4: Handling the possible return values of comparing two numbers\n\nThe first new bit here is another `use` statement, bringing a type called `std::cmp::Ordering` into scope from the standard library. Like `Result`, `Ordering` is another enum, but the variants for `Ordering` are `Less`, `Greater`, and `Equal`. These are the three outcomes that are possible when you compare two values.\n\nThen we add five new lines at the bottom that use the `Ordering` type. The `cmp` method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it’s comparing the `guess` to the `secret_number`. Then it returns a variant of the `Ordering` enum we brought into scope with the `use` statement. We use a `match` expression to decide what to do next based on which variant of `Ordering` was returned from the call to `cmp` with the values in `guess` and `secret_number`.\n\nA `match` expression is made up of _arms_. An arm consists of a _pattern_ and the code that should be run if the value given to the beginning of the `match` expression fits that arm’s pattern. Rust takes the value given to `match` and looks through each arm’s pattern in turn. The `match` construct and patterns are powerful features in Rust that let you express a variety of situations your code might encounter and make sure that you handle them all. \n\nLet’s walk through an example of what would happen with the `match` expression used here. Say that the user has guessed 50 and the randomly generated secret number this time is 38. When the code compares 50 to 38, the `cmp` method will return `Ordering::Greater`, because 50 is greater than 38. The `match` expression gets the `Ordering::Greater` value and starts checking each arm’s pattern. It looks at the first arm’s pattern, `Ordering::Less`, and sees that the value `Ordering::Greater` does not match `Ordering::Less`, so it ignores the code in that arm and moves to the next arm. The next arm’s pattern, `Ordering::Greater`, does match `Ordering::Greater`! The associated code in that arm will execute and print `Too big!` to the screen. The match expression ends because it has no need to look at the last arm in this scenario.\n\nHowever, the code in Listing 2-4 won’t compile yet. Let’s try it:\n\n```text\nerror[E0308]: mismatched types\n  --> src/main.rs:21:21\n   |\n21 |     match guess.cmp(&secret_number) {\n   |                     ^^^^^^^^^^^^^^ expected struct `std::string::String`, found integer\n   |\n   = note: expected type `&std::string::String`\n              found type `&{integer}`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: Could not compile `processing_a_guess`\n```\n\nThe core of the error states that there are _mismatched types_. Rust has a strong, static type system. However, it also has type inference. When we wrote `let mut guess = String::new()`, Rust was able to infer that `guess` should be a `String` and didn’t make us write the type. The `secret_number`, on the other hand, is a number type. A few number types can have a value between 1 and 100: `i32`, a 32-bit number; `u32`, an unsigned 32-bit number; `i64`, a 64-bit number; as well as others. Rust defaults to an `i32`, which is the type of `secret_number` unless you add type information elsewhere that would cause Rust to infer a different numerical type. The reason for the error is that Rust cannot compare a string and a number type.\n\nUltimately, we want to convert the `String` the program reads as input into a real number type so we can compare it numerically to the secret number. We can do that by adding the following two lines to the `main` function body:\n\n```rust\n// --snip--\n\n    let mut guess = String::new();\n\n    io::stdin().read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    let guess: u32 = guess.trim().parse()\n        .expect(\"Please type a number!\");\n\n    println!(\"You guessed: {}\", guess);\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\nThe two new lines are:\n\n```rust\nlet guess: u32 = guess.trim().parse()\n    .expect(\"Please type a number!\");\n```\n\nWe create a variable named `guess`. But wait, doesn’t the program already have a variable named `guess`? It does, but Rust allows us to _shadow_ the previous value of guess with a new one. This feature is often used in situations in which you want to convert a value from one type to another type. Shadowing lets us reuse the `guess` variable name rather than forcing us to create two unique variables, such as `guess_str` and `guess` for example. (Section 3 covers shadowing in more detail.)\n\nWe bind `guess` to the expression `guess.trim().parse()`. The `guess` in the expression refers to the original `guess` that was a String with the input in it. The `trim` method on a String instance will eliminate any whitespace at the beginning and end. Although `u32` can contain only numerical characters, the user must press enter to satisfy `read_line`. When the user presses enter, a newline character is added to the string. For example, if the user types 5 and presses enter, `guess` looks like this: `5\\n`. The `\\n` represents “newline,” the result of pressing enter. The `trim` method eliminates `\\n`, resulting in just `5`.\n\nThe `parse` [method on strings](https://doc.rust-lang.org/stable/std/primitive.str.html#method.parse) parses a string into some kind of number. Because this method can parse a variety of number types, we need to tell Rust the exact number type we want by using `let guess: u32`. The colon `(:)` after `guess` tells Rust we’ll annotate the variable’s type. Rust has a few built-in number types; the `u32` seen here is an unsigned, 32-bit integer. It’s a good default choice for a small positive number. You’ll learn about other number types in Section 3. Additionally, the `u32` annotation in this example program and the comparison with `secret_number` means that Rust will infer that `secret_number` should be a `u32` as well. So now the comparison will be between two values of the same type!\n\nThe call to `parse` could easily cause an error. If, for example, the string contained `A★%`, there would be no way to convert that to a number. Because it might fail, the `parse` method returns a `Result` type, much as the `read_line` method does (discussed earlier in [“Handling Potential Failure with the Result Type”](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-the-result-type)). We’ll treat this `Result` the same way by using the `expect` method again. If `parse` returns an `Err` `Result` variant because it couldn’t create a number from the string, the `expect` call will crash the game and print the message we give it. If `parse` can successfully convert the string to a number, it will return the `Ok` variant of `Result`, and `expect` will return the number that we want from the `Ok` value.\n\nLet’s run the program now!\n\n```text\n    Finished dev [unoptimized + debuginfo] target(s) in 0.08s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nThe secret number is: 93\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\n```\n\nNice! Even though spaces were added before the guess, the program still figured out that the user guessed 76. Run the program a few times to verify the different behavior with different kinds of input: guess the number correctly, guess a number that is too high, and guess a number that is too low.\n\nWe have most of the game working now, but the user can make only one guess. Let’s change that by adding a loop!\n\nYou can refer to the following chapter in the Rust Programming Language Book:\n[Generating a Secret Number](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#generating-a-secret-number)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Allowing Multiple Guesses with Looping",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 31,
                  "dependency" : {
                    "lesson" : "Programming a Guessing Game",
                    "task" : "Comparing the Guess to the Secret Number",
                    "file" : "src/main.rs",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer
                  "placeholder_text" : "Put your code here to launch it"
                }
              ],
              "is_visible" : true,
              "text" : "Put your code here to launch it"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"processing_a_guess\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[dependencies]\n\nrand = \"0.3.14\""
            }
          },
          "description_text" : "The 'loop' keyword creates an infinite loop. We’ll add that now to give users more chances at guessing the number:\n\n```rust\n// --snip--\n\n    println!(\"The secret number is: {}\", secret_number);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => println!(\"You win!\"),\n        }\n    }\n}\n```\n\nAs you can see, we’ve moved everything into a loop from the guess input prompt onward. Be sure to indent the lines inside the loop another four spaces each and run the program again. Notice that there is a new problem because the program is doing exactly what we told it to do: ask for another guess forever! It doesn’t seem like the user can quit!\n\nThe user could always interrupt the program by using the keyboard shortcut ⌘F2 or Ctrl F2. But there’s another way to escape this insatiable monster, as mentioned in the `parse` discussion in [“Comparing the Guess to the Secret Number”](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number): if the user enters a non-number answer, the program will crash. The user can take advantage of that in order to quit, as shown here:\n\n```text\n    Finished dev [unoptimized + debuginfo] target(s) in 0.10s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n11\nYou guessed: 11\nToo small!\nPlease input your guess.\n92\nYou guessed: 92\nToo big!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/libcore/result.rs:997:5\nProcess finished with exit code 101\n```\n\nTyping `quit` actually quits the game, but so will any other non-number input. However, this is suboptimal to say the least. We want the game to automatically stop when the correct number is guessed.\n\n### Quitting After a Correct Guess\n\nLet’s program the game to quit when the user wins by adding a `break` statement:\n\n```rust\n// --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nAdding the `break` line after `You win!` makes the program exit the loop when the user guesses the secret number correctly. Exiting the loop also means exiting the program, because the loop is the last part of `main`.\n\n### Handling Invalid Input\n\nTo further refine the game’s behavior, rather than crashing the program when the user inputs a non-number, let’s make the game ignore a non-number so the user can continue guessing. We can do that by altering the line where `guess` is converted from a `String` to a `u32`, as shown in Listing 2-5.\n\n```rust\n// --snip--\n\nio::stdin().read_line(&mut guess)\n    .expect(\"Failed to read line\");\n\nlet guess: u32 = match guess.trim().parse() {\n    Ok(num) => num,\n    Err(_) => continue,\n};\n\nprintln!(\"You guessed: {}\", guess);\n\n// --snip--\n```\n\n##### Listing 2-5: Ignoring a non-number guess and asking for another guess instead of crashing the program\n\nSwitching from an `expect` call to a `match` expression is how you generally move from crashing on an error to handling the error. Remember that `parse` returns a `Result` type and `Result` is an enum that has the variants `Ok` or `Err`. We’re using a `match` expression here, as we did with the `Ordering` result of the `cmp` method.\n\nIf `parse` is able to successfully turn the string into a number, it will return an `Ok` value that contains the resulting number. That `Ok` value will match the first arm’s pattern, and the `match` expression will just return the `num` value that `parse` produced and put inside the `Ok` value. That number will end up right where we want it in the new `guess` variable we’re creating.\n\nIf `parse` is not able to turn the string into a number, it will return an `Err` value that contains more information about the error. The `Err` value does not match the `Ok(num)` pattern in the first match arm, but it does match the `Err(_)` pattern in the second arm. The underscore,`_`, is a catchall value; in this example, we’re saying we want to match all `Err` values, no matter what information they have inside them. So the program will execute the second arm’s code, `continue`, which tells the program to go to the next iteration of the `loop` and ask for another guess. So, effectively, the program ignores all errors that `parse` might encounter!\n\nNow everything in the program should work as expected. Let’s try it:\n\n```text\n    Finished dev [unoptimized + debuginfo] target(s) in 0.41s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nThe secret number is: 42\nPlease input your guess.\n33\nYou guessed: 33\nToo small!\nPlease input your guess.\n51\nYou guessed: 51\nToo big!\nPlease input your guess.\n42\nYou guessed: 42\nYou win!\n\nProcess finished with exit code 0\n```\n\nAwesome! With one tiny final tweak, we will finish the guessing game. Recall that the program is still printing the secret number. That worked well for testing, but it ruins the game. Let’s delete the println! that outputs the secret number. Listing 2-6 shows the final code.\n\n```rust\nuse std::io;\nuse std::cmp::Ordering;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin().read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {}\", guess);\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\n##### Listing 2-6: Complete guessing game code\n\n### Summary\n\nAt this point, you’ve successfully built the guessing game. Congratulations!\n\nThis project was a hands-on way to introduce you to many new Rust concepts: `let`, `match`, methods, associated functions, the use of external crates, and more. In the next few chapters, you’ll learn about these concepts in more detail. Section 3 covers concepts that most programming languages have, such as variables, data types, and functions, and shows how to use them in Rust. Section 4 explores ownership, a feature that makes Rust different from other languages. Section 5 discusses structs and method syntax, and Section 6 explains how enums work.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Storing Values with Variables",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Programming a Guessing Game",
                    "task" : "Programming a Guesssing Game",
                    "file" : "src/main.rs",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "TODO"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"processing_a_guess\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "Next, we’ll create a place to store the user input, like this:\n\n```rust\nlet mut guess = String::new();\n```\n\nNow the program is getting interesting! There’s a lot going on in this little line. Notice that this is a `let` statement, which is used to create a _variable_. Here’s another example:\n\n```rust\nlet foo = bar;\n```\n\nThis line creates a new variable named `foo` and binds it to the value of the `bar` variable. In Rust, variables are immutable by default. We’ll be discussing this concept in detail in the [“Variables and Mutability”](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html#variables-and-mutability) lesson. The following example shows how to use `mut` before the variable name to make a variable mutable:\n\n```rust\nlet foo = 5; // immutable\nlet mut bar = 5; // mutable\n```\n\n>Note: The // syntax starts a comment that continues until the end of the line. Rust ignores everything in comments, which are discussed in more detail in Section 3.\n\nLet’s return to the guessing game program. You now know that `let mut guess` will introduce a mutable variable named `guess`. On the other side of the equal sign `(=)` is the value that `guess` is bound to, which is the result of calling `String::new`, a function that returns a new instance of a `String`. `String` is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text.\n\nThe `::` syntax in the `::new` line indicates that `new` is an _associated function_ of the `String` type. An associated function is implemented on a type, in this case `String`, rather than on a particular instance of a String. Some languages call this a _static method_.\n\nThis `new` function creates a new, empty string. You’ll find a `new` function on many types, because it’s a common name for a function that makes a new value of some kind.\n\nTo summarize, the `let mut guess = String::new();` line has created a mutable variable that is currently bound to a new, empty instance of a `String`. Whew!\n\nRecall that we included the input/output functionality from the standard library with `use std::io;` on the first line of the program. Now we’ll call the `stdin` function from the io module:\n\n```rust\nio::stdin().read_line(&mut guess)\n    .expect(\"Failed to read line\");\n```\n\nIf we hadn’t listed the use `std::io` line at the beginning of the program, we could have written this function call as `std::io::stdin`. The `stdin` function returns an instance of `std::io::Stdin`, which is a type that represents a handle to the standard input for your terminal.\n\nThe next part of the code, `.read_line(&mut guess)`, calls the `read_line` method on the standard input handle to get input from the user. We’re also passing one argument to `read_line`: `&mut guess`.\n\nThe job of `read_line` is to take whatever the user types into standard input and place that into a string, so it takes that string as an argument. The string argument needs to be mutable so the method can change the string’s content by adding the user input.\n\nThe & indicates that this argument is a reference, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times. References are a complex feature, and one of Rust’s major advantages is how safe and easy it is to use references. You don’t need to know a lot of those details to finish this program. For now, all you need to know is that like variables, references are immutable by default. Hence, you need to write `&mut guess` rather than `&guess` to make it mutable.\n\n### Handling Potential Failure with the Result Type\n\nWe’re not quite done with this line of code. Although what we’ve discussed so far is a single line of text, it’s only the first part of the single logical line of code. The second part is this method:\n\n```rust\n.expect(\"Failed to read line\");\n```\n\nWhen you call a method with the `.foo()` syntax, it’s often wise to introduce a newline and other whitespace to help break up long lines. We could have written this code as:\n\n```rust\nio::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n```\n\nHowever, one long line is difficult to read, so it’s best to divide it: two lines for two method calls. Now let’s discuss what this line does.\n\nAs mentioned earlier, `read_line` puts what the user types into the string we’re passing it, but it also returns a value—in this case, an `io::Result`. Rust has a number of types named `Result` in its standard library: a generic `Result` as well as specific versions for submodules, such as `io::Result`.\n\nThe `Result` types are _[enumerations](https://doc.rust-lang.org/stable/book/ch06-00-enums.html)_, often referred to as _enums_. An enumeration is a type that can have a fixed set of values, and those values are called the enum’s _variants_.\n\nFor `Result`, the variants are `Ok` or `Err`. The `Ok` variant indicates the operation was successful, and inside `Ok` is the successfully generated value. The `Err` variant means the operation failed, and `Err` contains information about how or why the operation failed.\n\nThe purpose of these `Result` types is to encode error-handling information. Values of the `Result` type, like values of any type, have methods defined on them. An instance of `io::Result` has an `expect` [method](https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.expect) that you can call. If this instance of `io::Result` is an `Err` value, `expect` will cause the program to crash and display the message that you passed as an argument to `expect`. If the `read_line` method returns an `Err`, it would likely be the result of an error coming from the underlying operating system. If this instance of `io::Result` is an `Ok` value, `expect` will take the return value that `Ok` is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in what the user entered into standard input.\n\nIf you don’t call `expect`, the program will compile, but you’ll get a warning:\n\n```text\nCompiling processing_a_guess v0.1.0 (/private/var/folders/jz/nfzs7rnd5zl_7r7x3t_8yvdh0000gp/T/rustlings-course/Programming a Guessing Game/task)\nwarning: unused `std::result::Result` that must be used\n  --> src/main.rs:10:5\n   |\n10 |     io::stdin().read_line(&mut guess);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: #[warn(unused_must_use)] on by default\n   = note: this `Result` may be an `Err` variant, which should be handled\n```\n\nRust warns that you haven’t used the `Result` value returned from `read_line`, indicating that the program hasn’t handled a possible error.\n\nThe right way to suppress the warning is to actually write error handling, but because you just want to crash this program when a problem occurs, you can use `expect`.\n\n### Printing Values with println! Placeholders\n\nAside from the closing curly brackets, there’s only one more line to discuss in the code added so far, which is the following:\n\n```rust\nprintln!(\"You guessed: {}\", guess);\n```\n\nThis line prints the string we saved the user’s input in. The set of curly brackets, `{}`, is a placeholder: think of `{}` as little crab pincers that hold a value in place. You can print more than one value using curly brackets: the first set of curly brackets holds the first value listed after the format string, the second set holds the second value, and so on. Printing multiple values in one call to `println!` would look like this:\n\n```rust\nlet x = 5;\nlet y = 10;\n\nprintln!(\"x = {} and y = {}\", x, y);\n```\n\nThis code would print `x = 5 and y = 10`.\n\n### Testing the First Part\n\nLet’s test the first part of the guessing game. Check the code by clicking **Check** button in Task Description window and run it by clicking the green play button in the left gutter:\n\n```text\n   Compiling processing_a_guess v0.1.0 (/private/var/folders/jz/nfzs7rnd5zl_7r7x3t_8yvdh0000gp/T/rustlings-course/Programming a Guessing Game/task)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n```\n\nAt this point, the first part of the game is done: we’re getting input from the keyboard and then printing it.\n\nYou can refer to the following chapters in the Rust Programming Language Book:_[Storing Values with Variables](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#storing-values-with-variables) and [Handling Potential Failure with the Result Type](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-the-result-type)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "framework"
    },
    {
      "title" : "Variables",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "## Common Programming Concepts\n \nIn this section, we’ll discuss common programming concepts such as:\n\n* Variables and Mutability\n* Data Types\n* Functions\n* Comments\n* Control Flow\n\nThis section covers concepts that appear in almost every programming language and how they work in Rust. Many programming languages have much in common at their core. None of the concepts presented in this chapter are unique to Rust, but we’ll discuss them in the context of Rust and explain the conventions around using these concepts.\n\nSpecifically, you’ll learn about variables, basic types, functions, comments, and control flow. These foundations will be in every Rust program, and learning them early will give you a strong core to start from.\n\n### Keywords\n\nThe Rust language has a set of keywords that are reserved for use by the language only, much as in other languages. Keep in mind that you cannot use these words as names of variables or functions. Most of the keywords have special meanings, and you’ll be using them to do various tasks in your Rust programs; a few have no current functionality associated with them but have been reserved for functionality that might be added to Rust in the future. You can find a list of the keywords in [Appendix A](https://doc.rust-lang.org/stable/book/appendix-01-keywords.html).",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Variables and Mutability",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"variables_and_mutability\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Variables and Mutability\n\nLet's talk about simple variables.\n\nIn Rust, by default variables are immutable. This is one of many nudges Rust gives you to write your code in a way that takes advantage of the safety and easy concurrency that Rust offers. However, you still have the option to make your variables mutable. Let’s explore how and why Rust encourages you to favor immutability and why sometimes you might want to opt out.\n\nWhen a variable is immutable, once a value is bound to a name, you can’t change that value. To illustrate this, let’s modify the main.rs file by replacing its code with the following code that won’t compile just yet:\n\n```rust\nfn main() {\n       let x = 5;\n       println!(\"The value of x is: {}\", x);\n       x = 6;\n       println!(\"The value of x is: {}\", x);\n   }\n```\n\nRun the program by clicking **Run** button.\n\nYou should receive an error message, as shown in this output:\n\n```text\nerror[E0384]: cannot assign twice to immutable variable `x`\n --> src/main.rs:4:5\n  |\n2 |     let x = 5;\n  |         - first assignment to `x`\n3 |     println!(\"The value of x is: {}\", x);\n4 |     x = 6;\n  |     ^^^^^ cannot assign twice to immutable variable\n```\n\nThis example shows how the compiler helps you find errors in your programs. Even though compiler errors can be frustrating, they only mean your program isn’t safely doing what you want it to do yet; they do not mean that you’re not a good programmer! Experienced Rustaceans still get compiler errors.\n\nThe error message indicates that the cause of the error is that you `cannot assign twice to immutable variable x`, because you tried to assign a second value to the immutable x variable.\n\nIt’s important that we get compile-time errors when we attempt to change a value that we previously designated as immutable because this very situation can lead to bugs. If one part of our code operates on the assumption that a value will never change and another part of our code changes that value, it’s possible that the first part of the code won’t do what it was designed to do. The cause of this kind of bug can be difficult to track down after the fact, especially when the second piece of code changes the value only sometimes.\n\nIn Rust, the compiler guarantees that when you state that a value won’t change, it really won’t change. That means that when you’re reading and writing code, you don’t have to keep track of how and where a value might change. Your code is thus easier to reason through.\n\nBut mutability can be very useful. Variables are immutable only by default; you can make them mutable by adding `mut` in front of the variable name. In addition to allowing this value to change, `mut` conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable value.\n\nFor example, let’s change _src/main.rs_ to the following:\n\n```rust\n\nfn main() {\n    let mut x = 5;\n    println!(\"The value of x is: {}\", x);\n    x = 6;\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nWhen we run the program now, we get this:\n\n```text\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30 secs\n     Running `target/debug/variables`\nThe value of x is: 5\nThe value of x is: 6\n```\n\nWe’re allowed to change the value that `x` binds to from `5` to `6` when mut is used. In some cases, you’ll want to make a variable mutable because it makes the code more convenient to write than if it had only immutable variables.\n\nThere are multiple trade-offs to consider in addition to the prevention of bugs. For example, in cases where you’re using large data structures, mutating an instance in place may be faster than copying and returning newly allocated instances. With smaller data structures, creating new instances and writing in a more functional programming style may be easier to think through, so lower performance might be a worthwhile penalty for gaining that clarity.\n\n_You can refer to the following chapter in the Rust Programming Language book: [Variables and Mutability](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html)_\n\nNow let's go ahead to the practice task.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Variables 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"variables1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 16,
                  "length" : 4,
                  "possible_answer" : "___",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    TODO x = 5;\n    println!(\"x has the value {}\", x);\n}"
            }
          },
          "description_text" : "## Task 1\nThe declaration on line 2 is missing a keyword that is needed in Rust to create a new variable binding.\n\n<div class=\"hint\">\nJust replace the <b>TODO</b> placeholder with the needed keyword.\n</div>",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Differences Between Variables and Constants",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"differences_between_variables_and_constants\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Differences Between Variables and Constants\n\nBeing unable to change the value of a variable might have reminded you of another programming concept that most other languages have: constants. Like immutable variables, constants are values that are bound to a name and are not allowed to change, but there are a few differences between constants and variables.\n\nFirst, you aren’t allowed to use `mut` with constants. Constants aren’t just immutable by default—they’re always immutable.\n\nYou declare constants using the `const` keyword instead of the `let` keyword, and the type of the value must be annotated. We’re about to cover types and type annotations in the next section, [Data Types](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#data-types), so don’t worry about the details right now. Just know that you must always annotate the type.\n\nConstants can be declared in any scope, including the global scope, which makes them useful for values that many parts of code need to know about.\n\nThe last difference is that constants may be set only to a constant expression, not the result of a function call or any other value that could only be computed at runtime.\n\nHere’s an example of a constant declaration where the constant’s name is MAX_POINTS and its value is set to 100,000. (Rust’s naming convention for constants is to use all uppercase with underscores between words, and underscores can be inserted in numeric literals to improve readability):\n\n```\nconst MAX_POINTS: u32 = 100_000;\n```\n\nConstants are valid for the entire time a program runs, within the scope they were declared in, making them a useful choice for values in your application domain that multiple parts of the program might need to know about, such as the maximum number of points any player of a game is allowed to earn or the speed of light.\n\nNaming hardcoded values used throughout your program as constants is useful in conveying the meaning of that value to future maintainers of the code. It also helps to have only one place in your code you would need to change if the hardcoded value needed to be updated in the future.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Differences Between Variables and Constants](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Shadowing",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"shadowing\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Shadowing\n\nIn Rust, you can declare a new variable with the same name as a previous variable, and the new variable shadows the previous variable. Rustaceans say that the first variable is _shadowed_ by the second, which means that the second variable’s value is what appears when the variable is used. We can shadow a variable by using the same variable’s name and repeating the use of the `let` keyword as follows:\n\n```rust\nfn main() {\n    let x = 5;\n\n    let x = x + 1;\n\n    let x = x * 2;\n\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nThis program first binds `x` to a value of `5`. Then it shadows `x` by repeating `let x =`, taking the original value and adding `1` so the value of `x` is then `6`. The third `let` statement also shadows `x`, multiplying the previous value by `2` to give `x` a final value of `12`. When we run this program, it will output the following:\n\n```text\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/variables`\nThe value of x is: 12\n```\n\nShadowing is different from marking a variable as `mut`, because we’ll get a compile-time error if we accidentally try to reassign to this variable without using the `let` keyword. By using `let`, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.\n\nThe other difference between `mut` and shadowing is that because we’re effectively creating a new variable when we use the `let` keyword again, we can change the type of the value but reuse the same name. For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, but we really want to store that input as a number:\n\n\nlet spaces = \"   \";\nlet spaces = spaces.len();\n\nThis construct is allowed because the first `spaces` variable is a string type and the second `spaces` variable, which is a brand-new variable that happens to have the same name as the first one, is a number type. Shadowing thus spares us from having to come up with different names, such as `spaces_str` and `spaces_num`; instead, we can reuse the simpler spaces name. However, if we try to use mut for this, as shown here, we’ll get a compile-time error:\n\n```rust\nlet mut spaces = \"   \";\nspaces = spaces.len();\n```\n\nThe error says we’re not allowed to mutate a variable’s type:\n\n```text\nerror[E0308]: mismatched types\n --> src/main.rs:3:14\n  |\n3 |     spaces = spaces.len();\n  |              ^^^^^^^^^^^^ expected &str, found usize\n  |\n  = note: expected type `&str`\n             found type `usize`\n```\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Shadowing](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html#shadowing)_\n\nNow that we’ve explored how variables work, let's apply our knowledge in practice.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Variables 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"variables2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let x;\n    if x == 10 {\n        println!(\"Ten!\");\n    } else {\n        println!(\"Not ten!\");\n    }\n}"
            }
          },
          "description_text" : "## Task 2\n\n  The compiler message is saying that Rust cannot infer the type that the variable binding `x` has with what is given here.\n\n  What happens if you annotate line 2 with a type annotation?\n\n  What if you give `x` a value?\n\n  What if you do both?\n\n  What type should `x` be, anyway?\n\n  What if `x` is the same type as 10? What if it's a different type?",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Variables 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"variables3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 20,
                  "length" : 4,
                  "possible_answer" : "___",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let TODO x = 3;\n    println!(\"Number {}\", x);\n    x = 5;\n    println!(\"Number {}\", x);\n}\n"
            }
          },
          "description_text" : "## Task 3\n\nAs we remember, in Rust variable bindings are immutable by default.\n But here we're trying to reassign a different value to `x`!\n There's a keyword we can use to make a variable binding mutable instead.\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Variables 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"variables4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 21,
                  "length" : 4,
                  "possible_answer" : "_____",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let xTODO;\n    println!(\"Number {}\", x);\n}"
            }
          },
          "description_text" : "## Task 4\n\nOops! In this exercise, we have a variable binding that we've created on line 2, and we're trying to use it on line 3, but we haven't given it a value.\n  We can't print out something that isn't there; try giving x a value!\n  This is an error that can cause bugs that's very easy to make in any programming language -- thankfully the Rust compiler has caught this for us!\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Data Types",
      "task_list" : [
        {
          "name" : "Scalar Types",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"scalar_types\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## Data Types\n\nEvery value in Rust is of a certain _data type_, which tells Rust what kind of data is being specified so it knows how to work with that data. We’ll look at two data type subsets: scalar and compound.\n\nKeep in mind that Rust is a _statically typed language_, which means that it must know the types of all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it. In cases when many types are possible, such as when we converted a `String` to a numeric type using `parse` in the [“Comparing the Guess to the Secret Number”](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number) task in lesson 2, we must add a type annotation, like this:\n\n```rust\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n```\n\nIf we don’t add the type annotation here, Rust will display the following error, which means the compiler needs more information from us to know which type we want to use:\n\n```text\nerror[E0282]: type annotations needed\n --> src/main.rs:2:9\n  |\n2 |     let guess = \"42\".parse().expect(\"Not a number!\");\n  |         ^^^^^\n  |         |\n  |         cannot infer type for `_`\n  |         consider giving `guess` a type\n```\n\nYou’ll see different type annotations for other data types.\n\n### Scalar Types\n\nA _scalar_ type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters. You may recognize these from other programming languages. Let’s jump into how they work in Rust.\n\n#### Integer Types\n\nAn _integer_ is a number without a fractional component. We used one integer type in Lesson 2, the `u32` type. This type declaration indicates that the value it’s associated with should be an unsigned integer (signed integer types start with `i`, instead of `u`) that takes up 32 bits of space. Table 3-1 shows the built-in integer types in Rust. Each variant in the Signed and Unsigned columns (for example, i16) can be used to declare the type of an integer value.\n\n| Length  | Signed | Unsigned |\n|---------|--------|----------|\n| 8-bit   | i8     | u8       |\n| 16-bit  | i16    | u16      |\n| 32-bit  | i32    | u32      |\n| 64-bit  | i64    | u64      |\n| 128-bit | i128   | u128     |\n| arch    | isize  | usize    |\n\n##### Table 3-1: Integer Types in Rust\n\nEach variant can be either signed or unsigned and has an explicit size. _Signed_ and _unsigned_ refer to whether it’s possible for the number to be negative or positive—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned). It’s like writing numbers on paper: when the sign matters, a number is shown with a plus sign or a minus sign; however, when it’s safe to assume the number is positive, it’s shown with no sign. Signed numbers are stored using [two’s complement](https://en.wikipedia.org/wiki/Two%27s_complement) representation.\n\nEach signed variant can store numbers from -($2^{n-1}$) to $2^{n - 1}$-1 inclusive, where _n_ is the number of bits that variant uses. So an `i8` can store numbers from -($2^7$) to $2^7$-1, which equals -128 to 127. Unsigned variants can store numbers from 0 to $2^n$-1, so a `u8` can store numbers from 0 to $2^8$-1, which equals 0 to 255.\n\nAdditionally, the `isize` and `usize` types depend on the kind of computer your program is running on: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.\n\nYou can write integer literals in any of the forms shown in Table 3-2. Note that all number literals except the byte literal allow a type suffix, such as `57u8`, and `_` as a visual separator, such as `1_000`.\n\n|Number literals|\tExample  |\n|---------------|------------|\n|Decimal        |  98_222    |\n|Hex \t        |   0xff     |\n|Octal \t        |   0o77     |\n|Binary \t    | 0b1111_0000|\n|Byte (u8 only) |\tb'A'     |\n\n##### Table 3-2: Integer Literals in Rust\n\nSo how do you know which type of integer to use? If you’re unsure, Rust’s defaults are generally good choices, and integer types default to `i32`: this type is generally the fastest, even on 64-bit systems. The primary situation in which you’d use `isize` or `usize` is when indexing some sort of collection.\n\n#### Integer Overflow\n\n  Let’s say you have a variable of type `u8` that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, _integer overflow_ will occur. Rust has some interesting rules involving this behavior. When you’re compiling in debug mode, Rust includes checks for integer overflow that cause your program to _panic_ at runtime if this behavior occurs. Rust uses the term panicking when a program exits with an error; we’ll discuss panics in more depth in the [“Unrecoverable Errors with panic!”](https://doc.rust-lang.org/stable/book/ch09-01-unrecoverable-errors-with-panic.html) section in Chapter 9 of the Rust Programming Language Book.\n\n When you’re compiling in release mode with the `--release` flag, Rust does _not_ include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs _two’s complement wrapping_. In short, values greater than the maximum value the type can hold “wrap around” to the minimum of the values the type can hold. In the case of a `u8`, 256 becomes 0, 257 becomes 1, and so on. The program won’t panic, but the variable will have a value that probably isn’t what you were expecting it to have. Relying on integer overflow’s wrapping behavior is considered an error. If you want to wrap explicitly, you can use the standard library type `Wrapping`.\n\n#### Floating-Point Types\n\nRust also has two primitive types for `floating-point numbers`, which are numbers with decimal points. Rust’s floating-point types are `f32` and `f64`, which are 32 bits and 64 bits in size, respectively. The default type is `f64` because on modern CPUs it’s roughly the same speed as `f32` but is capable of more precision.\n\nHere’s an example that shows floating-point numbers in action:\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\nFloating-point numbers are represented according to the IEEE-754 standard. The `f32` type is a single-precision float, and `f64` has double precision.\n\n#### Numeric Operations\n\nRust supports the basic mathematical operations you’d expect for all of the number types: addition, subtraction, multiplication, division, and remainder. The following code shows how you’d use each one in a `let` statement:\n\n```rust\nfn main() {\n    // addition\n    let sum = 5 + 10;\n\n    // subtraction\n    let difference = 95.5 - 4.3;\n\n    // multiplication\n    let product = 4 * 30;\n\n    // division\n    let quotient = 56.7 / 32.2;\n\n    // remainder\n    let remainder = 43 % 5;\n}\n```\n\nEach expression in these statements uses a mathematical operator and evaluates to a single value, which is then bound to a variable. Appendix B contains a list of all operators that Rust provides.\n\n#### The Boolean Type\n\nAs in most other programming languages, a Boolean type in Rust has two possible values: `true` and `false`. Booleans are one byte in size. The Boolean type in Rust is specified using `bool`. For example:\n\n```rust\nfn main() {\n    let t = true;\n\n    let f: bool = false; // with explicit type annotation\n}\n```\n\nThe main way to use Boolean values is through conditionals, such as an `if` expression. We’ll cover how `if` expressions work in Rust in the [“Control Flow”](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#control-flow) section.\n\n#### The Character Type\n\nSo far we’ve worked only with numbers, but Rust supports letters too. Rust’s `char` type is the language’s most primitive alphabetic type, and the following code shows one way to use it. (Note that `char` literals are specified with single quotes, as opposed to string literals, which use double quotes.)\n\n```rust\nfn main() {\n    let c = 'z';\n    let z = 'ℤ';\n    let heart_eyed_cat = '\uD83D\uDE3B';\n}\n```\n\nRust’s `char` type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid `char` values in Rust. Unicode Scalar Values range from `U+0000` to `U+D7FF` and `U+E000` to `U+10FFFF` inclusive. However, a “character” isn’t really a concept in Unicode, so your human intuition for what a “character” is may not match up with what a `char` is in Rust. We’ll discuss this topic in detail in [“Storing UTF-8 Encoded Text with Strings”](https://doc.rust-lang.org/stable/book/ch08-02-strings.html#storing-utf-8-encoded-text-with-strings) in Chapter 8.\n\n_You can refer to the following chapter in the Rust Programming Language Book:[Scalar Types](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#scalar-types)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Primitive Types 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // Booleans (`bool`)\n\n    let is_morning = true;\n    if is_morning {\n        println!(\"Good morning!\");\n    }\n\n    let // Finish the rest of this line like the example! Or make it be false!\n    if is_evening {\n        println!(\"Good evening!\");\n    }\n}\n"
            }
          },
          "description_text" : "## Task 1\n\nFill in the rest of the line that has code missing!\n\nNo hints, there's no tricks, just get used to typing these :)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Primitive Types 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // Characters (`char`)\n\n    let my_first_initial = 'C';\n    if my_first_initial.is_alphabetic() {\n        println!(\"Alphabetical!\");\n    } else if my_first_initial.is_numeric() {\n        println!(\"Numerical!\");\n    } else {\n        println!(\"Neither alphabetic nor numeric!\");\n    }\n\n    let // Finish this line like the example! What's your favorite character?\n    // Try a letter, try a number, try a special character, try a character\n    // from a different language than your own, try an emoji!\n    if your_character.is_alphabetic() {\n        println!(\"Alphabetical!\");\n    } else if your_character.is_numeric() {\n        println!(\"Numerical!\");\n    } else {\n        println!(\"Neither alphabetic nor numeric!\");\n    }\n}\n"
            }
          },
          "description_text" : "## Task 2\n\nFill in the rest of the line that has code missing!\n\nNo hints, there's no tricks, just get used to typing these :)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Compound Types",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"compound_types\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Compound Types\n\n_Compound types_ can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.\n\n#### The Tuple Type\n\nA tuple is a general way of grouping together some number of other values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.\n\nWe create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same. We’ve added optional type annotations in this example:\n\n```rust\nfn main() {\n    let tup: (i32, f64, u8) = (500, 6.4, 1);\n}\n```\n\nThe variable `tup` binds to the entire tuple, because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:\n\n```rust\nfn main() {\n    let tup = (500, 6.4, 1);\n\n    let (x, y, z) = tup;\n\n    println!(\"The value of y is: {}\", y);\n}\n```\n\nThis program first creates a tuple and binds it to the variable `tup`. It then uses a pattern with `let` to take `tup` and turn it into three separate variables, `x`, `y`, and `z`. This is called _destructuring_, because it breaks the single tuple into three parts. Finally, the program prints the value of `y`, which is `6.4`.\n\nIn addition to destructuring through pattern matching, we can access a tuple element directly by using a period `(.)` followed by the index of the value we want to access. For example:\n\n```rust\nfn main() {\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n\n    let five_hundred = x.0;\n\n    let six_point_four = x.1;\n\n    let one = x.2;\n}\n```\n\nThis program creates a tuple, `x`, and then makes new variables for each element by using their index. As with most programming languages, the first index in a tuple is 0.\n\n#### The Array Type\n\nAnother way to have a collection of multiple values is with an _array_. Unlike a tuple, every element of an array must have the same type. Arrays in Rust are different from arrays in some other languages because arrays in Rust have a fixed length, like tuples.\n\nIn Rust, the values going into an array are written as a comma-separated list inside square brackets:\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n}\n```\n\nArrays are useful when you want your data allocated on the stack rather than the heap (we will discuss the stack and the heap more in Chapter 4) or when you want to ensure you always have a fixed number of elements. An array isn’t as flexible as the vector type, though. A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size. If you’re unsure whether to use an array or a vector, you should probably use a vector. Chapter 8 discusses vectors in more detail.\n\nAn example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It’s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 items:\n\n```rust\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\n```\n\nYou would write an array’s type by using square brackets, and within the brackets include the type of each element, a semicolon, and then the number of elements in the array, like so:\n\n```rust\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\n```\n\nHere, `i32` is the type of each element. After the semicolon, the number `5` indicates the element contains five items.\n\nWriting an array’s type this way looks similar to an alternative syntax for initializing an array: if you want to create an array that contains the same value for each element, you can specify the initial value, followed by a semicolon, and then the length of the array in square brackets, as shown here:\n\n```rust\nlet a = [3; 5];\n```\n\nThe array named `a` will contain `5` elements that will all be set to the value `3` initially. This is the same as writing `let a = [3, 3, 3, 3, 3];` but in a more concise way.\n\n#### Accessing Array Elements\n\nAn array is a single chunk of memory allocated on the stack. You can access elements of an array using indexing, like this:\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    let first = a[0];\n    let second = a[1];\n}\n```\n\nIn this example, the variable named `first` will get the value `1`, because that is the value at index `[0]` in the array. The variable named `second` will get the value `2` from index `[1]` in the array.\n\n#### Invalid Array Element Access\n\nWhat happens if you try to access an element of an array that is past the end of the array? Say you change the example to the following code, which will compile but exit with an error when it runs:\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n    let index = 10;\n\n    let element = a[index];\n\n    println!(\"The value of element is: {}\", element);\n}\n```\n\nRunning this code using cargo run produces the following result:\n\n```text\n   Finished dev [unoptimized + debuginfo] target(s) in 0.05s\n   Running `target/debug/Test_Rust_Project`\nthread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10', src/main.rs:5:19\n```\n\nThe compilation didn’t produce any errors, but the program resulted in a _runtime_ error and didn’t exit successfully. When you attempt to access an element using indexing, Rust will check that the index you’ve specified is less than the array length. If the index is greater than or equal to the array length, Rust will panic.\n\nThis is the first example of Rust’s safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing. Chapter 9 discusses more of Rust’s error handling.\n\n_You can refer to the following chapter in the Rust Programming Language Book:[Compound Types](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#compound-types)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Primitive Types 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 24,
                  "length" : 9,
                  "possible_answer" : "_________",
                  "placeholder_text" : "type here"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let a = type here;\n\n    if a.len() >= 100 {\n        println!(\"Wow, that's a big array!\");\n    } else {\n        println!(\"Meh, I eat arrays like that for breakfast.\");\n    }\n}\n"
            }
          },
          "description_text" : "## Task 3\n\nCreate an array with at least 100 elements.\n\n<div class=\"hint\">\n  There's a shorthand to initialize Arrays with a certain size that does not require you to type in 100 items (but you certainly can if you want!).\n\n  For example, you can do:\n  ```rust\n  let array = [\"Are we there yet?\"; 10];\n  ```\n</div>\n\nBonus: what are some other things you could have that would return true for `a.len() >= 100`?\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Primitive Types 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 63,
                  "length" : 4,
                  "possible_answer" : "________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    let nice_slice = TODO;\n\n    if nice_slice == [2, 3, 4] {\n        println!(\"Nice slice!\");\n    } else {\n        println!(\"Not quite what I was expecting... I see: {:?}\", nice_slice);\n    }\n}\n"
            }
          },
          "description_text" : "## Task 4\n\nGet a slice out of Array so that the `if` statement returns `true`.\n\n<div class=\"hint\">\n  Take a look at the Understanding Ownership -> Slices -> Other Slices section of the book:\n  https://doc.rust-lang.org/book/ch04-03-slices.html\n  and use the starting and ending indices of the items in the Array that you want to end up in the slice.\n\n  If you're curious why the right hand of the `==` comparison does not have an ampersand for a reference since the left hand side is a reference, take a look at the Deref coercions section of the book:\n  https://doc.rust-lang.org/book/ch15-02-deref.html\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Primitive Types 5",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types5\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 59,
                  "length" : 4,
                  "possible_answer" : "___________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let cat = (\"Furry McFurson\", 3.5);\n    let TODO = cat;\n\n    println!(\"{} is {} years old.\", name, age);\n}"
            }
          },
          "description_text" : "## Task 5\n\nDestructure the `cat` tuple so that the println will work.\n\n<div class=\"hint\">\n  Take a look at the Data Types -> The Tuple Type section of the book:\n  https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#the-tuple-type\n\n  Particularly the part about destructuring (second to last example in the section).\n\n  You'll need to make a pattern to bind `name` and `age` to the appropriate parts of the tuple. You can do it!!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Primitive Types 6",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types6\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 81,
                  "length" : 4,
                  "possible_answer" : "_________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let numbers = (1, 2, 3);\n    println!(\"The second number is {}\", TODO);\n}"
            }
          },
          "description_text" : "## Task 6\n\nUse a tuple index to access the second element of `numbers`.\n\nYou can put this right into the `println!`.\n\n<div class=\"hint\">\n  While you could use a destructuring `let` for the tuple here, try indexing into it instead, as explained in the last example of the Data Types -> The Tuple Type section of the book:\n  https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#the-tuple-type\n\n  Now you have another tool in your toolbox!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Functions",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    call_me();\n}\n"
            }
          },
          "description_text" : "### Functions\n\nFunctions are pervasive in Rust code. You’ve already seen one of the most important functions in the language: the `main` function, which is the entry point of many programs. You’ve also seen the `fn` keyword, which allows you to declare new functions.\n\nRust code uses _snake case_ as the conventional style for function and variable names. In snake case, all letters are lowercase and underscores separate words. Here’s a program that contains an example function definition:\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n\n    another_function();\n}\n\nfn another_function() {\n    println!(\"Another function.\");\n}\n```\n\nFunction definitions in Rust start with `fn` and have a set of parentheses after the function name. The curly brackets tell the compiler where the function body begins and ends.\n\nWe can call any function we’ve defined by entering its name followed by a set of parentheses. Because `another_function` is defined in the program, it can be called from inside the `main` function. Note that we defined `another_function` _after_ the `main` function in the source code; we could have defined it before as well. Rust doesn’t care where you define your functions, only that they’re defined somewhere.\n\nLet’s run the code from listing above to explore functions further. Place the another_function example in src/main.rs and run it. You should see the following output:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28 secs\n     Running `target/debug/functions`\nHello, world!\nAnother function.\n```\n\nThe lines execute in the order in which they appear in the `main` function. First, the “Hello, world!” message prints, and then `another_function` is called and its message is printed.\n\n### Function Parameters\n   \n   Functions can also be defined to have _parameters_, which are special variables that are part of a function’s signature. When a function has parameters, you can provide it with concrete values for those parameters. Technically, the concrete values are called _arguments_, but in casual conversation, people tend to use the words _parameter_ and _argument_ interchangeably for either the variables in a function’s definition or the concrete values passed in when you call a function.\n   \n   The following rewritten version of `another_function` shows what parameters look like in Rust:\n   \n```rust\n   fn main() {\n       another_function(5);\n   }\n   \n   fn another_function(x: i32) {\n       println!(\"The value of x is: {}\", x);\n   }\n```   \n\n   Try running this program; you should get the following output:\n   \n```text\n   $ cargo run\n      Compiling functions v0.1.0 (file:///projects/functions)\n       Finished dev [unoptimized + debuginfo] target(s) in 1.21 secs\n        Running `target/debug/functions`\n   The value of x is: 5\n```\n   \n   The declaration of `another_function` has one parameter named `x`. The type of `x` is specified as `i32`. When `5` is passed to `another_function`, the `println!` macro puts `5` where the pair of curly brackets were in the format string.\n   \n   In function signatures, you _must_ declare the type of each parameter. This is a deliberate decision in Rust’s design: requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what you mean.\n   \n   When you want a function to have multiple parameters, separate the parameter declarations with commas, like this:\n   \n```rust\n   fn main() {\n       another_function(5, 6);\n   }\n   \n   fn another_function(x: i32, y: i32) {\n       println!(\"The value of x is: {}\", x);\n       println!(\"The value of y is: {}\", y);\n   }\n```   \n   This example creates a function with two parameters, both of which are `i32` types. The function then prints the values in both of its parameters. Note that function parameters don’t all need to be the same type, they just happen to be in this example.\n   \n   Let’s try running this code. Replace the program currently in your functions project’s src/main.rs file with the preceding example and run it:\n   \n```text\n   $ cargo run\n      Compiling functions v0.1.0 (file:///projects/functions)\n       Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n        Running `target/debug/functions`\n   The value of x is: 5\n   The value of y is: 6\n```\n\n   Because we called the function with `5` as the value for `x` and `6` is passed as the value for `y`, the two strings are printed with these values.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [How Functions Work](https://doc.rust-lang.org/stable/book/ch03-03-how-functions-work.html)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Statements and Expressions",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"statements_and_expressions\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Function Bodies Contain Statements and Expressions\n\nFunction bodies are made up of a series of statements optionally ending in an expression. So far, we’ve only covered functions without an ending expression, but you have seen an expression as part of a statement. Because Rust is an expression-based language, this is an important distinction to understand. Other languages don’t have the same distinctions, so let’s look at what statements and expressions are and how their differences affect the bodies of functions.\n\nWe’ve actually already used statements and expressions. _Statements_ are instructions that perform some action and do not return a value. _Expressions_ evaluate to a resulting value. Let’s look at some examples.\n\nCreating a variable and assigning a value to it with the `let` keyword is a statement. In listing below, `let y = 6;` is a statement.\n\n```rust\nfn main() {\n    let y = 6;\n}\n```\n##### Listing 3-1: A main function declaration containing one statement\n\nFunction definitions are also statements; the entire preceding example is a statement in itself.\n\nStatements do not return values. Therefore, you can’t assign a `let` statement to another variable, as the following code tries to do; you’ll get an error:\n\n```rust\nfn main() {\n    let x = (let y = 6);\n}\n```\n\nWhen you run this program, the error you’ll get looks like this:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror: expected expression, found statement (`let`)\n --> src/main.rs:2:14\n  |\n2 |     let x = (let y = 6);\n  |              ^^^\n  |\n  = note: variable declaration using `let` is a statement\n```\n\nThe `let y = 6` statement does not return a value, so there isn’t anything for `x` to bind to. This is different from what happens in other languages, such as C and Ruby, where the assignment returns the value of the assignment. In those languages, you can write `x = y = 6` and have both `x` and `y` have the value `6`; that is not the case in Rust.\n\nExpressions evaluate to something and make up most of the rest of the code that you’ll write in Rust. Consider a simple math operation, such as `5 + 6`, which is an expression that evaluates to the value `11`. Expressions can be part of statements: in Listing 3-1, the `6` in the statement `let y = 6`; is an expression that evaluates to the value `6`. Calling a function is an expression. Calling a macro is an expression. The block that we use to create new scopes, `{}`, is an expression, for example:\n\n```rust\nfn main() {\n    let x = 5;\n\n    let y = {\n        let x = 3;\n        x + 1\n    };\n\n    println!(\"The value of y is: {}\", y);\n}\n```\n\nThis expression:\n\n```rust\n{\n    let x = 3;\n    x + 1\n}\n```\n\nis a block that, in this case, evaluates to `4`. That value gets bound to y as part of the let statement. Note the `x + 1` line without a semicolon at the end, which is unlike most of the lines you’ve seen so far. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value. Keep this in mind as you explore function return values and expressions next.\n\n### Functions with Return Values\n\nFunctions can return values to the code that calls them. We don’t name return values, but we do declare their type after an arrow `(->)`. In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return early from a function by using the `return` keyword and specifying a value, but most functions return the last expression implicitly. Here’s an example of a function that returns a value:\n\n```rust\nfn five() -> i32 {\n    5\n}\n\nfn main() {\n    let x = five();\n\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nThere are no function calls, macros, or even `let` statements in the `five` function—just the number 5 by itself. That’s a perfectly valid function in Rust. Note that the function’s return type is specified too, as `-> i32`. Try running this code; the output should look like this:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30 secs\n     Running `target/debug/functions`\nThe value of x is: 5\n```\n\nThe `5` in `five` is the function’s return value, which is why the return type is `i32`. Let’s examine this in more detail. There are two important bits: first, the line `let x = five();` shows that we’re using the return value of a function to initialize a variable. Because the function `five` returns a `5`, that line is the same as the following:\n\n```rust\nlet x = 5;\n```\n\nSecond, the `five` function has no parameters and defines the type of the return value, but the body of the function is a lonely `5` with no semicolon because it’s an expression whose value we want to return.\n\nLet’s look at another example:\n\n```rust\nfn main() {\n    let x = plus_one(5);\n\n    println!(\"The value of x is: {}\", x);\n}\n\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\nRunning this code will print `The value of x is: 6`. But if we place a semicolon at the end of the line containing `x + 1`, changing it from an expression to a statement, we’ll get an error.\n\n```rust\nfn main() {\n    let x = plus_one(5);\n\n    println!(\"The value of x is: {}\", x);\n}\n\nfn plus_one(x: i32) -> i32 {\n    x + 1;\n}\n```\n\nCompiling this code produces an error, as follows:\n\n```text\nerror[E0308]: mismatched types\n --> src/main.rs:7:28\n  |\n7 |   fn plus_one(x: i32) -> i32 {\n  |  ____________________________^\n8 | |     x + 1;\n  | |          - help: consider removing this semicolon\n9 | | }\n  | |_^ expected i32, found ()\n  |\n  = note: expected type `i32`\n             found type `()`\n```\n\nThe main error message, “mismatched types,” reveals the core issue with this code. The definition of the function `plus_one` says that it will return an `i32`, but statements don’t evaluate to a value, which is expressed by `()`, an empty tuple. Therefore, nothing is returned, which contradicts the function definition and results in an error. In this output, Rust provides a message to possibly help rectify this issue: it suggests removing the semicolon, which would fix the error.\n\n_You can refer to the following chapters in the Rust Programming Language Book: [Function Bodies Contain Statements and Expressions](https://doc.rust-lang.org/stable/book/ch03-03-how-functions-work.html#function-bodies-contain-statements-and-expressions) and [Functions with Return Values](https://doc.rust-lang.org/stable/book/ch03-03-how-functions-work.html#functions-with-return-values)_\n\nLet's do some practice now.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Functions 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"functions1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 30,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    call_me();\n}\n\nTODO {\n}"
            }
          },
          "description_text" : "### Task 1\n\n  This main function is calling a function that it expects to exist, but the function doesn't exist.\n  It expects this function to have the name `call_me`.\n  It expects this function to not take any arguments and not return a value.\n  Sounds a lot like `main`, doesn't it?\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Functions 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"functions2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 46,
                  "length" : 4,
                  "possible_answer" : "____",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    call_me(3);\n}\n\nfn call_me(num:TODO) {\n    for i in 0..num {\n        println!(\"Ring! Call number {}\", i + 1);\n    }\n}\n"
            }
          },
          "description_text" : "### Task 2\n\n  Rust requires that all parts of a function's signature have type annotations, but `call_me` is missing the type annotation of `num`.\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Functions 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"functions3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 24,
                  "length" : 4,
                  "possible_answer" : "_",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    call_me(TODO);\n}\n\nfn call_me(num: i32) {\n    for i in 0..num {\n        println!(\"Ring! Call number {}\", i + 1);\n    }\n}"
            }
          },
          "description_text" : "### Task 3\n\n  This time, the function *declaration* is okay, but there's something wrong with the place where we're calling the function.\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Functions 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"functions4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let original_price = 51;\n    println!(\"Your sale price is {}\", sale_price(original_price));\n}\n\nfn sale_price(price: i32) -> {\n    if is_even(price) {\n        price - 10\n    } else {\n        price - 3\n    }\n}\n\nfn is_even(num: i32) -> bool {\n    num % 2 == 0\n}"
            }
          },
          "description_text" : "### Task 4\n\nThis store is having a sale where if the price is an even number, you get 10 (money unit) off, but if it's an odd number, it's 3 (money unit) less.\n\n<div class=\"hint\">\n  The error message points to line 6 and says it expects a type after the `->`.\n  This is where the function's return type should be -- take a look at the `is_even` function for an example!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Functions 5",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"functions5\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let answer = square(3);\n    println!(\"The answer is {}\", answer);\n}\n\nfn square(num: i32) -> i32 {\n    num * num;\n}\n"
            }
          },
          "description_text" : "### Task 5\n\nMake me compile!\n\n<div class=\"hint\">\n  This is a really common error that can be fixed by removing one character.\n\n  It happens because Rust distinguishes between expressions and statements: expressions return a value based on its operand, and statements simply return a () type which behaves just like `void` in C/C++ language.\n\n  We want to return a value of `i32` type from the `square` function, but it is returning a `()` type...\n\n  They are not the same. There are two solutions:\n  1. Add a `return` ahead of `num * num;`\n  2. remove `;`, make it to be `num * num`\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Test 1",
      "task_list" : [
        {
          "name" : "Test 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"test1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use test1::calculateprice;\n\n#[test]\nfn verify_test() {\n    let price1 = calculateprice(55);\n    let price2 = calculateprice(40);\n\n    assert_eq!(price1, 55);\n    assert_eq!(price2, 80);\n}\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "pub fn calculateprice(/* TODO */) {\n    // TODO\n}\n"
            }
          },
          "description_text" : "##Test 1\n\nThis is a test for the following sections:\n- Variables\n- Functions\n\nMary is buying apples.\nOne apple usually costs 2 dollars, but if you buy more than 40 at once, each apple only costs 1!\nWrite a function that calculates the price of an order of apples given the order amount.\n\nNo hints this time!\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "If",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "### Control Flow\n\nDeciding whether or not to run some code depending on if a condition is true and deciding to run some code repeatedly while a condition is true are basic building blocks in most programming languages. The most common constructs that let you control the flow of execution of Rust code are `if` expressions and loops.\n\n### if Expressions\n\nAn `if` expression allows you to branch your code depending on conditions. You provide a condition and then state, “If this condition is met, run this block of code. If the condition is not met, do not run this block of code.”\n\nIn the _src/main.rs_ file, input the following:\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number < 5 {\n        println!(\"condition was true\");\n    } else {\n        println!(\"condition was false\");\n    }\n}\n```\n\nAll if expressions start with the keyword `if`, which is followed by a condition. In this case, the condition checks whether or not the variable `number` has a value less than 5. The block of code we want to execute if the condition is true is placed immediately after the condition inside curly brackets. Blocks of code associated with the conditions in `if` expressions are sometimes called arms, just like the arms in `match` expressions.\n\nOptionally, we can also include an `else` expression, which we chose to do here, to give the program an alternative block of code to execute should the condition evaluate to false. If you don’t provide an `else` expression and the condition is false, the program will just skip the `if` block and move on to the next bit of code.\n\nTry running this code; you should see the following output:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/branches`\ncondition was true\n```\n\nLet’s try changing the value of `number` to a value that makes the condition false to see what happens:\n\n```rust\nlet number = 7;\n```\n\nRun the program again, and look at the output:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/branches`\ncondition was false\n```\n\nIt’s also worth noting that the condition in this code must be a `bool`. If the condition isn’t a `bool`, we’ll get an error. For example, try running the following code:\n\n```rust\nfn main() {\n    let number = 3;\n\n   if number {\n        println!(\"number was three\");\n   }\n}\n```\n\nThe `if` condition evaluates to a value of `3` this time, and Rust throws an error:\n\n```text\nerror[E0308]: mismatched types\n --> src/main.rs:4:8\n  |\n4 |     if number {\n  |        ^^^^^^ expected bool, found integral variable\n  |\n  = note: expected type `bool`\n             found type `{integer}`\n```\n\nThe error indicates that Rust expected a `bool` but got an integer. Unlike languages such as Ruby and JavaScript, Rust will not automatically try to convert non-Boolean types to a Boolean. You must be explicit and always provide `if` with a Boolean as its condition. If we want the `if` code block to run only when a number is not equal to `0`, for example, we can change the `if` expression to the following:\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number != 0 {\n        println!(\"number was something other than zero\");\n    }\n}\n```\n\nRunning this code will print `number was something other than zero`.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Control Flow - if Expressions](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#if-expressions)_\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "else if",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"else_if\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Handling Multiple Conditions with else if\n\nYou can have multiple conditions by combining `if` and `else` in an `else if` expression. For example:\n\n```rust\nfn main() {\n    let number = 6;\n\n    if number % 4 == 0 {\n        println!(\"number is divisible by 4\");\n    } else if number % 3 == 0 {\n        println!(\"number is divisible by 3\");\n    } else if number % 2 == 0 {\n        println!(\"number is divisible by 2\");\n    } else {\n        println!(\"number is not divisible by 4, 3, or 2\");\n    }\n}\n```\n\nThis program has four possible paths it can take. After running it, you should see the following output:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/branches`\nnumber is divisible by 3\n```\n\nWhen this program executes, it checks each `if` expression in turn and executes the first body for which the condition holds true. Note that even though 6 is divisible by 2, we don’t see the output 'number is divisible by 2', nor do we see the 'number is not divisible by 4, 3, or 2` text from the `else` block. That’s because Rust only executes the block for the first true condition, and once it finds one, it doesn’t even check the rest.\n\nUsing too many `else if` expressions can clutter your code, so if you have more than one, you might want to refactor your code. [Chapter 6](https://doc.rust-lang.org/stable/book/ch06-00-enums.html) describes a powerful Rust branching construct called `match` for these cases.\n\n### Using if in a let Statement\n\nBecause `if` is an expression, we can use it on the right side of a `let` statement, as in Listing 3-2:\n\n```rust\nfn main() {\n    let condition = true;\n    let number = if condition {\n        5\n    } else {\n        6\n    };\n\n    println!(\"The value of number is: {}\", number);\n}\n```\n##### Listing 3-2: Assigning the result of an if expression to a variable\n\nThe `number` variable will be bound to a value based on the outcome of the `if` expression. Run this code to see what happens:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30 secs\n     Running `target/debug/branches`\nThe value of number is: 5\n```\n\nRemember that blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions. In this case, the value of the whole `if` expression depends on which block of code executes. This means the values that have the potential to be results from each arm of the `if` must be the same type; in Listing 3-2, the results of both the `if` arm and the `else` arm were `i32` integers. If the types are mismatched, as in the following example, we’ll get an error:\n\n```rust\nfn main() {\n    let condition = true;\n\n    let number = if condition {\n        5\n    } else {\n        \"six\"\n    };\n\n    println!(\"The value of number is: {}\", number);\n}\n```\n\nWhen we try to compile this code, we’ll get an error. The `if` and `else` arms have value types that are incompatible, and Rust indicates exactly where to find the problem in the program:\n\n```text\nerror[E0308]: if and else have incompatible types\n --> src/main.rs:4:18\n  |\n4 |       let number = if condition {\n  |  __________________^\n5 | |         5\n6 | |     } else {\n7 | |         \"six\"\n8 | |     };\n  | |_____^ expected integral variable, found &str\n  |\n  = note: expected type `{integer}`\n             found type `&str`\n```\n\nThe expression in the `if` block evaluates to an integer, and the expression in the `else` block evaluates to a string. This won’t work because variables must have a single type. Rust needs to know at compile time what type the 'number' variable is, definitively, so it can verify at compile time that its type is valid everywhere we use 'number'. Rust wouldn’t be able to do that if the type of 'number' was only determined at runtime; the compiler would be more complex and would make fewer guarantees about the code if it had to keep track of multiple hypothetical types for any variable.\n\n_You can refer to the following chapters in the Rust Programming Language Book: [Handling Multiple Conditions with else if](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#handling-multiple-conditions-with-else-if) and [Using if in a let Statement](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#using-if-in-a-let-statement)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Repetition with Loops",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"repetition_with_loops\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Repetition with Loops\n\nIt’s often useful to execute a block of code more than once. For this task, Rust provides several _loops_. A loop runs through the code inside the loop body to the end and then starts immediately back at the beginning. \n\nRust has three kinds of loops: `loop`, `while`, and `for`. Let’s try each one.\n\n### Repeating Code with loop\n\nThe `loop` keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.\n\nAs an example, change the src/main.rs file to look like this:\n\n```rust\nfn main() {\n     loop {\n         println!(\"again!\");\n     }\n }\n```\n\nWhen we run this program, we’ll see `again!` printed over and over continuously until we stop the program manually. Press ⌘F2 to interrupt a program that is stuck in a continual loop.\n\nFortunately, Rust provides another, more reliable way to break out of a loop. You can place the `break` keyword within the loop to tell the program when to stop executing the loop.\n\n### Returning Values from Loops\n\nOne of the uses of a `loop` is to retry an operation you know might fail, such as checking whether a thread has completed its job. However, you might need to pass the result of that operation to the rest of your code. To do this, you can add the value you want returned after the `break` expression you use to stop the loop; that value will be returned out of the loop so you can use it, as shown here:\n\n```rust\nfn main() {\n    let mut counter = 0;\n\n    let result = loop {\n        counter += 1;\n\n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n\n    println!(\"The result is {}\", result);\n}\n```\n\nBefore the loop, we declare a variable named `counter` and initialize it to `0`. Then we declare a variable named `result` to hold the value returned from the loop. On every iteration of the loop, we add `1` to the `counter` variable, and then check whether the counter is equal to `10`. When it is, we use the `break` keyword with the value `counter * 2`. After the loop, we use a semicolon to end the statement that assigns the value to `result`. Finally, we print the value in `result`, which in this case is 20.\n\n\n### Conditional Loops with while\n\nIt’s often useful for a program to evaluate a condition within a loop. While the condition is true, the loop runs. When the condition ceases to be true, the program calls `break`, stopping the loop. This loop type could be implemented using a combination of `loop`, `if`, `else`, and `break`; you could try that now in a program, if you’d like.\n\nHowever, this pattern is so common that Rust has a built-in language construct for it, called a `while` loop. Listing 3-3 uses while: the program loops three times, counting down each time, and then, after the loop, it prints another message and exits.\n\n```rust\nfn main() {\n    let mut number = 3;\n\n    while number != 0 {\n        println!(\"{}!\", number);\n\n        number -= 1;\n    }\n\n    println!(\"LIFTOFF!!!\");\n}\n```\n##### Listing 3-3: Using a while loop to run code while a condition holds true\n\nThis construct eliminates a lot of nesting that would be necessary if you used `loop`, `if`, `else`, and `break`, and it’s clearer. While a condition holds true, the code runs; otherwise, it exits the loop.\n\n### Looping Through a Collection with for\n\nYou could use the `while` construct to loop over the elements of a collection, such as an array. For example, let’s look at Listing 3-4:\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n    let mut index = 0;\n\n    while index < 5 {\n        println!(\"the value is: {}\", a[index]);\n\n        index += 1;\n    }\n}\n```\n##### Listing 3-4: Looping through each element of a collection using a while loop\n\nHere, the code counts up through the elements in the array. It starts at index `0`, and then loops until it reaches the final index in the array (that is, when `index < 5` is no longer true). Running this code will print every element in the array:\n\n```text\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n     Running `target/debug/loops`\nthe value is: 10\nthe value is: 20\nthe value is: 30\nthe value is: 40\nthe value is: 50\n```\n\nAll five array values appear in the terminal, as expected. Even though `index` will reach a value of `5` at some point, the loop stops executing before trying to fetch a sixth value from the array.\n\nBut this approach is error prone; we could cause the program to panic if the index length is incorrect. It’s also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop.\n\nAs a more concise alternative, you can use a `for` loop and execute some code for each item in a collection. A for loop looks like the code in Listing 3-5:\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n\n    for element in a.iter() {\n        println!(\"the value is: {}\", element);\n    }\n}\n```\n##### Listing 3-5: Looping through each element of a collection using a for loop\n\nWhen we run this code, we’ll see the same output as in Listing 3-4. More importantly, we’ve now increased the safety of the code and eliminated the chance of bugs that might result from going beyond the end of the array or not going far enough and missing some items.\n\nFor example, in the code in Listing 3-4, if you removed an item from the `a` array but forgot to update the condition to `while index < 4`, the code would panic. Using the `for` loop, you wouldn’t need to remember to change any other code if you changed the number of values in the array.\n\nThe safety and conciseness of `for` loops make them the most commonly used loop construct in Rust. Even in situations in which you want to run some code a certain number of times, as in the countdown example that used a `while` loop in Listing 3-3, most Rustaceans would use a `for` loop. The way to do that would be to use a `Range`, which is a type provided by the standard library that generates all numbers in sequence starting from one number and ending before another number.\n\nHere’s what the countdown would look like using a `for` loop and another method we’ve not yet talked about, `rev`, to reverse the range:\n\n```rust\nfn main() {\n    for number in (1..4).rev() {\n        println!(\"{}!\", number);\n    }\n    println!(\"LIFTOFF!!!\");\n}\n```\n\nThis code is a bit nicer, isn’t it?\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Repetition with Loops](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#repetition-with-loops)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "If 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"if1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use if1::bigger;\n\n#[test]\nfn ten_is_bigger_than_eight() {\n    assert_eq!(10, bigger(10, 8));\n}\n\n#[test]\nfn fortytwo_is_bigger_than_thirtytwo() {\n    assert_eq!(42, bigger(32, 42));\n}\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "pub fn bigger(a: i32, b:i32) -> i32 {\n\n    if a > b { a } else { b }\n}\n\nfn main() {\n    assert_eq!(10, bigger(10, 8));\n    assert_eq!(42, bigger(32, 42));\n}\n"
            }
          },
          "description_text" : "## Task 1\n\nComplete this function to return the bigger number!\n\nDo not use:\n\n* `return`\n* another function call\n* additional variables\n\n<div class=\"hint\">\n  It's possible to do this in one line if you would like!\n\n  Some similar examples from other languages:\n  - In C(++) this would be: `a > b ? a : b`\n  - In Python this would be:  `a if a > b else b`\n\n  Remember in Rust that:\n  - the `if` condition does not need to be surrounded by parentheses\n  - `if` / `else` conditionals are expressions\n  - Each condition is followed by a `{}` block.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Tests",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn larger_can_hold_smaller() {\n        let larger = Rectangle { width: 8, height: 7 };\n        let smaller = Rectangle { width: 5, height: 1 };\n\n        assert!(larger.can_hold(&smaller));\n    }\n}"
            }
          },
          "description_text" : "## How to Write Tests\n\nTests are Rust functions that verify that the non-test code is functioning in the expected manner. The bodies of test functions typically perform these three actions:\n\n1.  Set up any needed data or state.\n2.  Run the code you want to test.\n3.  Assert the results are what you expect.\n\nLet’s look at the features Rust provides specifically for writing tests that take these actions, which include the `test` attribute, a few macros, and the `should_panic` attribute.\n\n\n### The Anatomy of a Test Function\n\nAt its simplest, a test in Rust is a function that’s annotated with the `test` attribute. Attributes are metadata about pieces of Rust code; one example is the `derive` attribute we used with structs in Chapter 5\\. To change a function into a test function, add `#[test]` on the line before `fn`. When you run your tests with the `cargo test` command, Rust builds a test runner binary that runs the functions annotated with the `test` attribute and reports on whether each test function passes or fails.\n\nWhen we make a new library project with Cargo, a test module with a test function in it is automatically generated for us. This module helps you start writing your tests so you don’t have to look up the exact structure and syntax of test functions every time you start a new project. You can add as many additional test functions and as many test modules as you want!\n\nWe’ll explore some aspects of how tests work by experimenting with the template test generated for us without actually testing any code. Then we’ll write some real-world tests that call some code that we’ve written and assert that its behavior is correct.\n\nLet's modify the _src/lib.rs_ file. Its content should look like Listing 11-1.\n\n```rust\n    #[cfg(test)]\n    mod tests {\n        #[test]\n        fn it_works() {\n            assert_eq!(2 + 2, 4);\n        }\n    }\n```\n\n##### Listing 11-1: The test module and function generated automatically by cargo new\n\nFor now, let’s ignore the top two lines and focus on the function to see how it works. Note the `#[test]` annotation before the `fn` line: this attribute indicates this is a test function, so the test runner knows to treat this function as a test. We could also have non-test functions in the `tests` module to help set up common scenarios or perform common operations, so we need to indicate which functions are tests by using the `#[test]` attribute.\n\nThe function body uses the `assert_eq!` macro to assert that 2 + 2 equals 4. This assertion serves as an example of the format for a typical test. Let’s run it to see that this test passes.\n\nRight-click on the 'Intro' task and choose **Open in Terminal** and run the `cargo test` command.\n You will see the same output as in Listing 11-2.\n\n```text\n   $ cargo test\n  Compiling intro v0.1.0\n Finished dev [unoptimized + debuginfo] target(s) in 0.38s\n     Running target/debug/deps/intro-c8e247c4dd65e48f\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\n##### Listing 11-2: The output from running the automatically generated test\n\nCargo compiled and ran the test. After the `Compiling`, `Finished`, and `Running` lines is the line `running 1 test`. The next line shows the name of the generated test function, called `it_works`, and the result of running that test, `ok`. The overall summary of running the tests appears next. The text `test result: ok.` means that all the tests passed, and the portion that reads `1 passed; 0 failed` totals the number of tests that passed or failed.\n\nBecause we don’t have any tests we’ve marked as ignored, the summary shows `0 ignored`. We also haven’t filtered the tests being run, so the end of the summary shows `0 filtered out`. We’ll talk about ignoring and filtering out tests in the next section, [“Controlling How Tests Are Run.”](ch11-02-running-tests.html#controlling-how-tests-are-run)\n\nThe `0 measured` statistic is for benchmark tests that measure performance. Benchmark tests are, as of this writing, only available in nightly Rust. See [the documentation about benchmark tests](../unstable-book/library-features/test.html) to learn more.\n\nThe next part of the test output, which starts with `Doc-tests adder`, is for the results of any documentation tests. We don’t have any documentation tests yet, but Rust can compile any code examples that appear in our API documentation. This feature helps us keep our docs and our code in sync! We’ll discuss how to write documentation tests in the [“Documentation Comments as Tests”](ch14-02-publishing-to-crates-io.html#documentation-comments-as-tests) section of Chapter 14\\. For now, we’ll ignore the `Doc-tests` output.\n\nLet’s change the name of our test to see how that changes the test output. Change the `it_works` function to a different name, such as `exploration`, like so:\n\n```rust\n    #[cfg(test)]\n    mod tests {\n        #[test]\n        fn exploration() {\n            assert_eq!(2 + 2, 4);\n        }\n    }\n```\n\nThen run `cargo test` again. The output now shows `exploration` instead of `it_works`:\n\n```text\nCompiling intro v0.1.0\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32s\n     Running target/debug/deps/intro-c8e247c4dd65e48f\n\nrunning 1 test\ntest tests::exploration ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nLet’s add another test, but this time we’ll make a test that fails! Tests fail when something in the test function panics. Each test is run in a new thread, and when the main thread sees that a test thread has died, the test is marked as failed. We talked about the simplest way to cause a panic in Chapter 9, which is to call the `panic!` macro. Enter the new test, `another`, so your _src/lib.rs_ file looks like Listing 11-3.\n\n```rust\n    #[cfg(test)]\n    mod tests {\n        #[test]\n        fn exploration() {\n            assert_eq!(2 + 2, 4);\n        }\n\n        #[test]\n        fn another() {\n            panic!(\"Make this test fail\");\n        }\n    }\n```\n\n##### Listing 11-3: Adding a second test that will fail because we call the panic! macro\n\nRun the tests again using `cargo test`. The output should look like Listing 11-4, which shows that our `exploration` test passed and `another` failed.\n```text\nCompiling intro v0.1.0\n    Finished dev [unoptimized + debuginfo] target(s) in 0.34s\n     Running target/debug/deps/intro-c8e247c4dd65e48f\n\nrunning 2 tests\ntest tests::exploration ... ok\ntest tests::another ... FAILED\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\n##### Listing 11-4: Test results when one test passes and one test fails\n\nInstead of `ok`, the line `test tests::another` shows `FAILED`. Two new sections appear between the individual results and the summary: the first section displays the detailed reason for each test failure. In this case, `another` failed because it `panicked at 'Make this test fail'`, which happened on line 10 in the _src/lib.rs_ file. The next section lists just the names of all the failing tests, which is useful when there are lots of tests and lots of detailed failing test output. We can use the name of a failing test to run just that test to more easily debug it; we’ll talk more about ways to run tests in the [“Controlling How Tests Are Run”](ch11-02-running-tests.html#controlling-how-tests-are-run) section.\n\nThe summary line displays at the end: overall, our test result is `FAILED`. We had one test pass and one test fail.\n\nNow that you’ve seen what the test results look like in different scenarios, let’s look at some macros other than `panic!` that are useful in tests.\n\n### Checking Results with the assert! Macro\n\nThe `assert!` macro, provided by the standard library, is useful when you want to ensure that some condition in a test evaluates to `true`. We give the `assert!` macro an argument that evaluates to a Boolean. If the value is `true`, `assert!` does nothing and the test passes. If the value is `false`, the `assert!` macro calls the `panic!` macro, which causes the test to fail. Using the `assert!` macro helps us check that our code is functioning in the way we intend.\n\nIn Chapter 5, Listing 5-15, we used a `Rectangle` struct and a `can_hold` method, which are repeated here in Listing 11-5\\. Let’s put this code in the _src/lib.rs_ file and write some tests for it using the `assert!` macro.\n\n```rust\n    #[derive(Debug)]\n    struct Rectangle {\n        width: u32,\n        height: u32,\n    }\n\n    impl Rectangle {\n        fn can_hold(&self, other: &Rectangle) -> bool {\n            self.width > other.width && self.height > other.height\n        }\n    }\n```\n\n##### Listing 11-5: Using the `Rectangle` struct and its `can_hold` method from Chapter 5\n\nThe `can_hold` method returns a Boolean, which means it’s a perfect use case for the `assert!` macro. In Listing 11-6, we write a test that exercises the `can_hold` method by creating a `Rectangle` instance that has a width of 8 and a height of 7 and asserting that it can hold another `Rectangle` instance that has a width of 5 and a height of 1.\n\n```rust\n   #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        fn larger_can_hold_smaller() {\n            let larger = Rectangle { width: 8, height: 7 };\n            let smaller = Rectangle { width: 5, height: 1 };\n\n            assert!(larger.can_hold(&smaller));\n        }\n    }\n```\n\n##### Listing 11-6: A test for `can_hold` that checks whether a larger rectangle can indeed hold a smaller rectangle\n\nNote that we’ve added a new line inside the `tests` module: `use super::*;`. The `tests` module is a regular module that follows the usual visibility rules we covered in Chapter 7 in the [“Modules as the Privacy Boundary”](ch07-02-defining-modules-to-control-scope-and-privacy.html) section. Because the `tests` module is an inner module, we need to bring the code under test in the outer module into the scope of the inner module. We use a glob here so anything we define in the outer module is available to this `tests` module.\n\nWe’ve named our test `larger_can_hold_smaller`, and we’ve created the two `Rectangle` instances that we need. Then we called the `assert!` macro and passed it the result of calling `larger.can_hold(&smaller)`. This expression is supposed to return `true`, so our test should pass. Let’s find out!\n\n```text\n    running 1 test\n    test tests::larger_can_hold_smaller ... ok\n\n    test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nIt does pass! Let’s add another test, this time asserting that a smaller rectangle cannot hold a larger rectangle:\n\n```rust\n    #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        fn larger_can_hold_smaller() {\n            // --snip--\n        }\n\n        #[test]\n        fn smaller_cannot_hold_larger() {\n            let larger = Rectangle { width: 8, height: 7 };\n            let smaller = Rectangle { width: 5, height: 1 };\n\n            assert!(!smaller.can_hold(&larger));\n        }\n    }\n```\n\nBecause the correct result of the `can_hold` function in this case is `false`, we need to negate that result before we pass it to the `assert!` macro. As a result, our test will pass if `can_hold` returns `false`:\n\n```text\n    running 2 tests\n    test tests::smaller_cannot_hold_larger ... ok\n    test tests::larger_can_hold_smaller ... ok\n\n    test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nTwo tests that pass! Now let’s see what happens to our test results when we introduce a bug in our code. Let’s change the implementation of the `can_hold` method by replacing the greater than sign with a less than sign when it compares the widths:\n\n```rust\n    # #[derive(Debug)]\n    # struct Rectangle {\n    #     width: u32,\n    #     height: u32,\n    # }\n    // --snip--\n\n    impl Rectangle {\n        fn can_hold(&self, other: &Rectangle) -> bool {\n            self.width < other.width && self.height > other.height\n        }\n    }\n```\n\nRunning the tests now produces the following:\n\n```text\n    running 2 tests\n    test tests::smaller_cannot_hold_larger ... ok\n    test tests::larger_can_hold_smaller ... FAILED\n\n    failures:\n\n    ---- tests::larger_can_hold_smaller stdout ----\n    thread 'tests::larger_can_hold_smaller' panicked at 'assertion failed:\n    larger.can_hold(&smaller)', src/lib.rs:22:9\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n    failures:\n        tests::larger_can_hold_smaller\n\n    test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nOur tests caught the bug! Because `larger.width` is 8 and `smaller.width` is 5, the comparison of the widths in `can_hold` now returns `false`: 8 is not less than 5.\n\n[\n\n### Testing Equality with the assert_eq! and assert_ne! Macros\n\nA common way to test functionality is to compare the result of the code under test to the value you expect the code to return to make sure they’re equal. You could do this using the `assert!` macro and passing it an expression using the `==` operator. However, this is such a common test that the standard library provides a pair of macros—`assert_eq!` and `assert_ne!`—to perform this test more conveniently. These macros compare two arguments for equality or inequality, respectively. They’ll also print the two values if the assertion fails, which makes it easier to see _why_ the test failed; conversely, the `assert!` macro only indicates that it got a `false` value for the `==` expression, not the values that lead to the `false` value.\n\nIn Listing 11-7, we write a function named `add_two` that adds `2` to its parameter and returns the result. Then we test this function using the `assert_eq!` macro.\n\n```rust\n    pub fn add_two(a: i32) -> i32 {\n        a + 2\n    }\n\n    #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        fn it_adds_two() {\n            assert_eq!(4, add_two(2));\n        }\n    }\n```\n\n##### Listing 11-7: Testing the function add_two using the assert_eq! macro\n\nLet’s check that it passes!\n\n```text\n    running 1 test\n    test tests::it_adds_two ... ok\n\n    test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nThe first argument we gave to the `assert_eq!` macro, `4`, is equal to the result of calling `add_two(2)`. The line for this test is `test tests::it_adds_two ... ok`, and the `ok` text indicates that our test passed!\n\nLet’s introduce a bug into our code to see what it looks like when a test that uses `assert_eq!` fails. Change the implementation of the `add_two` function to instead add `3`:\n\n```rust\n    pub fn add_two(a: i32) -> i32 {\n        a + 3\n    }\n```\n\nRun the tests again:\n\n```rust\n    running 1 test\n    test tests::it_adds_two ... FAILED\n\n    failures:\n\n    ---- tests::it_adds_two stdout ----\n    thread 'tests::it_adds_two' panicked at 'assertion failed: `(left == right)`\n      left: `4`,\n     right: `5`', src/lib.rs:11:9\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n    failures:\n        tests::it_adds_two\n\n    test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nOur test caught the bug! The `it_adds_two` test failed, displaying the message `assertion failed: `(left == right)`` and showing that `left` was `4` and `right` was `5`. This message is useful and helps us start debugging: it means the `left` argument to `assert_eq!` was `4` but the `right` argument, where we had `add_two(2)`, was `5`.\n\nNote that in some languages and test frameworks, the parameters to the functions that assert two values are equal are called `expected` and `actual`, and the order in which we specify the arguments matters. However, in Rust, they’re called `left` and `right`, and the order in which we specify the value we expect and the value that the code under test produces doesn’t matter. We could write the assertion in this test as `assert_eq!(add_two(2), 4)`, which would result in a failure message that displays `assertion failed: `(left == right)`` and that `left` was `5` and `right` was `4`.\n\nThe `assert_ne!` macro will pass if the two values we give it are not equal and fail if they’re equal. This macro is most useful for cases when we’re not sure what a value _will_ be, but we know what the value definitely _won’t_ be if our code is functioning as we intend. For example, if we’re testing a function that is guaranteed to change its input in some way, but the way in which the input is changed depends on the day of the week that we run our tests, the best thing to assert might be that the output of the function is not equal to the input.\n\nUnder the surface, the `assert_eq!` and `assert_ne!` macros use the operators `==` and `!=`, respectively. When the assertions fail, these macros print their arguments using debug formatting, which means the values being compared must implement the `PartialEq` and `Debug` traits. All the primitive types and most of the standard library types implement these traits. For structs and enums that you define, you’ll need to implement `PartialEq` to assert that values of those types are equal or not equal. You’ll need to implement `Debug` to print the values when the assertion fails. Because both traits are derivable traits, as mentioned in Listing 5-12 in Chapter 5, this is usually as straightforward as adding the `#[derive(PartialEq, Debug)]` annotation to your struct or enum definition. See Appendix C, [“Derivable Traits,”](appendix-03-derivable-traits.html) for more details about these and other derivable traits.\n\n_You can refer to the following chapter in the Rust Programming Language Book:[Writing Tests](https://doc.rust-lang.org/stable/book/ch11-01-writing-tests.html)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Adding Custom Failure Messages",
          "files" : {
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// put code of your task here\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"adding_custom_failure_messages\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## Adding Custom Failure Messages\n\nYou can also add a custom message to be printed with the failure message as optional arguments to the `assert!`, `assert_eq!`, and `assert_ne!` macros. Any arguments specified after the one required argument to `assert!` or the two required arguments to `assert_eq!` and `assert_ne!` are passed along to the `format!` macro (discussed in Chapter 8 in the [“Concatenation with the `+` Operator or the `format!` Macro”](ch08-02-strings.html#concatenation-with-the--operator-or-the-format-macro) section), so you can pass a format string that contains `{}` placeholders and values to go in those placeholders. Custom messages are useful to document what an assertion means; when a test fails, you’ll have a better idea of what the problem is with the code.\n\nFor example, let’s say we have a function that greets people by name and we want to test that the name we pass into the function appears in the output:\n\n```rust\n    pub fn greeting(name: &str) -> String {\n        format!(\"Hello {}!\", name)\n    }\n\n    #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        fn greeting_contains_name() {\n            let result = greeting(\"Carol\");\n            assert!(result.contains(\"Carol\"));\n        }\n    }\n```\n\nThe requirements for this program haven’t been agreed upon yet, and we’re pretty sure the `Hello` text at the beginning of the greeting will change. We decided we don’t want to have to update the test when the requirements change, so instead of checking for exact equality to the value returned from the `greeting` function, we’ll just assert that the output contains the text of the input parameter.\n\nLet’s introduce a bug into this code by changing `greeting` to not include `name` to see what this test failure looks like:\n\n```rust\n    pub fn greeting(name: &str) -> String {\n        String::from(\"Hello!\")\n    }\n```\n\nRunning this test produces the following:\n\n```text\n    running 1 test\n    test tests::greeting_contains_name ... FAILED\n\n    failures:\n\n    ---- tests::greeting_contains_name stdout ----\n    thread 'tests::greeting_contains_name' panicked at 'assertion failed:\n    result.contains(\"Carol\")', src/lib.rs:12:9\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n    failures:\n        tests::greeting_contains_name\n```\n\nThis result just indicates that the assertion failed and which line the assertion is on. A more useful failure message in this case would print the value we got from the `greeting` function. Let’s change the test function, giving it a custom failure message made from a format string with a placeholder filled in with the actual value we got from the `greeting` function:\n\n```rust\n    #[test]\n    fn greeting_contains_name() {\n        let result = greeting(\"Carol\");\n        assert!(\n            result.contains(\"Carol\"),\n            \"Greeting did not contain name, value was `{}`\", result\n        );\n    }\n```\n\nNow when we run the test, we’ll get a more informative error message:\n\n```text\n    ---- tests::greeting_contains_name stdout ----\n    thread 'tests::greeting_contains_name' panicked at 'Greeting did not\n    contain name, value was `Hello!`', src/lib.rs:12:9\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\n```\n\nWe can see the value we actually got in the test output, which would help us debug what happened instead of what we were expecting to happen.\n\n### Checking for Panics with should_panic\n\n](ch11-01-writing-tests.html#checking-for-panics-with-should_panic)\n\nIn addition to checking that our code returns the correct values we expect, it’s also important to check that our code handles error conditions as we expect. For example, consider the `Guess` type that we created in Chapter 9, Listing 9-10\\. Other code that uses `Guess` depends on the guarantee that `Guess` instances will contain only values between 1 and 100\\. We can write a test that ensures that attempting to create a `Guess` instance with a value outside that range panics.\n\nWe do this by adding another attribute, `should_panic`, to our test function. This attribute makes a test pass if the code inside the function panics; the test will fail if the code inside the function doesn’t panic.\n\nListing 11-8 shows a test that checks that the error conditions of `Guess::new` happen when we expect them to.\n\n```rust\n    pub struct Guess {\n        value: i32,\n    }\n\n    impl Guess {\n        pub fn new(value: i32) -> Guess {\n            if value < 1 || value > 100 {\n                panic!(\"Guess value must be between 1 and 100, got {}.\", value);\n            }\n\n            Guess {\n                value\n            }\n        }\n    }\n\n    #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        #[should_panic]\n        fn greater_than_100() {\n            Guess::new(200);\n        }\n    }\n```\n\n###### Listing 11-8: Testing that a condition will cause a panic!\n\nWe place the `#[should_panic]` attribute after the `#[test]` attribute and before the test function it applies to. Let’s look at the result when this test passes:\n\n```text\n    running 1 test\n    test tests::greater_than_100 ... ok\n\n    test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nLooks good! Now let’s introduce a bug in our code by removing the condition that the `new` function will panic if the value is greater than 100:\n\n```rust\n    // --snip--\n\n    impl Guess {\n        pub fn new(value: i32) -> Guess {\n            if value < 1  {\n                panic!(\"Guess value must be between 1 and 100, got {}.\", value);\n            }\n\n            Guess {\n                value\n            }\n        }\n    }\n```\n\nWhen we run the test in Listing 11-8, it will fail:\n\n```text\n    running 1 test\n    test tests::greater_than_100 ... FAILED\n\n    failures:\n\n    failures:\n        tests::greater_than_100\n\n    test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nWe don’t get a very helpful message in this case, but when we look at the test function, we see that it’s annotated with `#[should_panic]`. The failure we got means that the code in the test function did not cause a panic.\n\nTests that use `should_panic` can be imprecise because they only indicate that the code has caused some panic. A `should_panic` test would pass even if the test panics for a different reason from the one we were expecting to happen. To make `should_panic` tests more precise, we can add an optional `expected` parameter to the `should_panic` attribute. The test harness will make sure that the failure message contains the provided text. For example, consider the modified code for `Guess` in Listing 11-9 where the `new` function panics with different messages depending on whether the value is too small or too large.\n\n```rust\n    // --snip--\n\n    impl Guess {\n        pub fn new(value: i32) -> Guess {\n            if value < 1 {\n                panic!(\"Guess value must be greater than or equal to 1, got {}.\",\n                       value);\n            } else if value > 100 {\n                panic!(\"Guess value must be less than or equal to 100, got {}.\",\n                       value);\n            }\n\n            Guess {\n                value\n            }\n        }\n    }\n\n    #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        #[should_panic(expected = \"Guess value must be less than or equal to 100\")]\n        fn greater_than_100() {\n            Guess::new(200);\n        }\n    }\n```\n\n##### Listing 11-9: Testing that a condition will cause a panic! with a particular panic message\n\nThis test will pass because the value we put in the `should_panic` attribute’s `expected` parameter is a substring of the message that the `Guess::new` function panics with. We could have specified the entire panic message that we expect, which in this case would be `Guess value must be less than or equal to 100, got 200.` What you choose to specify in the expected parameter for `should_panic` depends on how much of the panic message is unique or dynamic and how precise you want your test to be. In this case, a substring of the panic message is enough to ensure that the code in the test function executes the `else if value > 100` case.\n\nTo see what happens when a `should_panic` test with an `expected` message fails, let’s again introduce a bug into our code by swapping the bodies of the `if value < 1` and the `else if value > 100` blocks:\n\n```rust\n    if value < 1 {\n        panic!(\"Guess value must be less than or equal to 100, got {}.\", value);\n    } else if value > 100 {\n        panic!(\"Guess value must be greater than or equal to 1, got {}.\", value);\n    }\n```\n\nThis time when we run the `should_panic` test, it will fail:\n\n```text\n    running 1 test\n    test tests::greater_than_100 ... FAILED\n\n    failures:\n\n    ---- tests::greater_than_100 stdout ----\n    thread 'tests::greater_than_100' panicked at 'Guess value must be\n    greater than or equal to 1, got 200.', src/lib.rs:11:13\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\n    note: Panic did not include expected string 'Guess value must be less than or\n    equal to 100'\n\n    failures:\n        tests::greater_than_100\n\n    test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nThe failure message indicates that this test did indeed panic as we expected, but the panic message did not include the expected string `'Guess value must be less than or equal to 100'`. The panic message that we did get in this case was `Guess value must be greater than or equal to 1, got 200.` Now we can start figuring out where our bug is!\n\n[\n\n### Using Result<T, E> in Tests\n\nSo far, we’ve written tests that panic when they fail. We can also write tests that use `Result<T, E>`! Here’s the test from Listing 11-1, rewritten to use `Result<T, E>` and return an `Err` instead of panicking:\n\n```rust\n    #[cfg(test)]\n    mod tests {\n        #[test]\n        fn it_works() -> Result<(), String> {\n            if 2 + 2 == 4 {\n                Ok(())\n            } else {\n                Err(String::from(\"two plus two does not equal four\"))\n            }\n        }\n    }\n```\n\nThe `it_works` function now has a return type, `Result<(), String>`. In the body of the function, rather than calling the `assert_eq!` macro, we return `Ok(())` when the test passes and an `Err` with a `String` inside when the test fails.\n\nWriting tests so they return a `Result<T, E>` enables you to use the question mark operator in the body of tests, which can be a convenient way to write tests that should fail if any operation within them returns an `Err` variant.\n\nYou can’t use the `#[should_panic]` annotation on tests that use `Result<T, E>`. Instead, you should return an `Err` value directly when the test should fail.\n\nNow that you know several ways to write tests, let’s look at what is happening when we run our tests and explore the different options we can use with `cargo test`.\n\n_You can refer to the following chapter in the Rust Programming Language Book:[Adding Custom Failure Messages](https://doc.rust-lang.org/stable/book/ch11-01-writing-tests.html#adding-custom-failure-messages)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Tests 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"tests1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#[cfg(test)]\nmod tests {\n    #[test]\n    fn you_can_assert() {\n        assert!();\n    }\n}"
            }
          },
          "description_text" : "## Task 1\n\nTests are important to ensure that your code does what you think it should do.\n\nThis test has a problem with it -- make the test compile! Make the test pass!\nMake the test fail!\n\n<div class=\"hint\">\n  You don't even need to write any code to test -- you can just test values and run that, even though you wouldn't do that in real life :)\n  `assert!` is a macro that needs an argument.\n  Depending on the value of the argument, `assert!` will do nothing (in which case the test will pass) or `assert!` will panic (in which case the test will fail).\n  So try giving different values  to `assert!` and see which ones compile, which ones pass, and which ones fail :)\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Tests 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"tests2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#[cfg(test)]\nmod tests {\n    #[test]\n    fn you_can_assert_eq() {\n        assert_eq!();\n    }\n}"
            }
          },
          "description_text" : "## Task 2\n\nThis test has a problem with it -- make the test compile!\nMake the test pass!\nMake the test fail!\n\n<div class=\"hint\">\n  Like the previous exercise, you don't need to write any code to get this test to compile and run.\n  `assert_eq!` is a macro that takes two arguments and compares them.\n  Try giving it two values that are equal!\n  Try giving it two arguments that are different!\n  Try giving it two values that are of different types!\n  Try switching which argument comes first and which comes second!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Tests 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"tests3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [
                {
                  "offset" : 140,
                  "length" : 4,
                  "possible_answer" : "_________________________________________________________________________________________________________________________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "pub fn is_even(num: i32) -> bool {\n    num % 2 == 0\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn is_true_when_even() {\nTODO\n}"
            }
          },
          "description_text" : "## Task 3\n\nThis test isn't testing our function -- make it do that in such a way that the test passes.\nThen write a second test that tests whether we get the result we expect to get when we call `is_even(5)`.\n\n<div class=\"hint\">\n  You can call a function right where you're passing arguments to `assert!` -- so you could do something like `assert!(having_fun())`.\n  If you want to check that you indeed get false, you can negate the result of what you're doing using `!`, like `assert!(!having_fun())`.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Test 2",
      "task_list" : [
        {
          "name" : "Test 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"test2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [
                {
                  "offset" : 184,
                  "length" : 1,
                  "possible_answer" : "__",
                  "placeholder_text" : "?"
                },
                {
                  "offset" : 260,
                  "length" : 35,
                  "possible_answer" : "______________________________",
                  "placeholder_text" : "write an assert for `times_two(-4)`"
                }
              ],
              "is_visible" : true,
              "text" : "pub fn times_two(num: i32) -> i32 {\n    num * 2\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn returns_twice_of_positive_numbers() {\n        assert_eq!(times_two(2),?);\n    }\n\n    #[test]\n    fn returns_twice_of_negative_numbers() {\n        write an assert for `times_two(-4)`\n    }\n}"
            }
          },
          "description_text" : "## Test  2\n\nThis is a test for the following sections:\n* Tests\n\nThis test isn't testing our function -- make it do that in such a way that the test passes.\nThen write a second test that tests that we get the result we expect to get when we call `times_two` with a negative number.\n\nNo hints, you can do this :)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Strings",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "## Storing UTF-8 Encoded Text with Strings\n\nWe talked about strings in Chapter 4, but we’ll look at them in more depth now. New Rustaceans commonly get stuck on strings for a combination of three reasons: Rust’s propensity for exposing possible errors, strings being a more complicated data structure than many programmers give them credit for, and UTF-8\\. These factors combine in a way that can seem difficult when you’re coming from other programming languages.\n\nIt’s useful to discuss strings in the context of collections because strings are implemented as a collection of bytes, plus some methods to provide useful functionality when those bytes are interpreted as text. In this section, we’ll talk about the operations on `String` that every collection type has, such as creating, updating, and reading. We’ll also discuss the ways in which `String` is different from the other collections, namely how indexing into a `String` is complicated by the differences between how people and computers interpret `String` data.\n\n### What Is a String?\n\nWe’ll first define what we mean by the term _string_. Rust has only one string type in the core language, which is the string slice `str` that is usually seen in its borrowed form `&str`. In Chapter 4, we talked about _string slices_, which are references to some UTF-8 encoded string data stored elsewhere. String literals, for example, are stored in the program’s binary and are therefore string slices.\n\nThe `String` type, which is provided by Rust’s standard library rather than coded into the core language, is a growable, mutable, owned, UTF-8 encoded string type. When Rustaceans refer to “strings” in Rust, they usually mean the `String` and the string slice `&str` types, not just one of those types. Although this section is largely about `String`, both types are used heavily in Rust’s standard library, and both `String` and string slices are UTF-8 encoded.\n\nRust’s standard library also includes a number of other string types, such as `OsString`, `OsStr`, `CString`, and `CStr`. Library crates can provide even more options for storing string data. See how those names all end in `String` or `Str`? They refer to owned and borrowed variants, just like the `String` and `str` types you’ve seen previously. These string types can store text in different encodings or be represented in memory in a different way, for example. We won’t discuss these other string types in this chapter; see their API documentation for more about how to use them and when each is appropriate.\n\n### Creating a New String\n\nMany of the same operations available with `Vec<T>` are available with `String` as well, starting with the `new` function to create a string, shown in Listing 8-11.\n\n```rust\n    let mut s = String::new();\n```\n\n##### Listing 8-11: Creating a new, empty String\n\nThis line creates a new empty string called `s`, which we can then load data into. Often, we’ll have some initial data that we want to start the string with. For that, we use the `to_string` method, which is available on any type that implements the `Display` trait, as string literals do. Listing 8-12 shows two examples.\n\n```rust\n    let data = \"initial contents\";\n\n    let s = data.to_string();\n\n    // the method also works on a literal directly:\n    let s = \"initial contents\".to_string();\n```\n\n##### Listing 8-12: Using the to_string method to create a String from a string literal\n\nThis code creates a string containing `initial contents`.\n\nWe can also use the function `String::from` to create a `String` from a string literal. The code in Listing 8-13 is equivalent to the code from Listing 8-12 that uses `to_string`.\n\n```rust\n    let s = String::from(\"initial contents\");\n```\n\n##### Listing 8-13: Using the String::from function to create a String from a string literal\n\nBecause strings are used for so many things, we can use many different generic APIs for strings, providing us with a lot of options. Some of them can seem redundant, but they all have their place! In this case, `String::from` and `to_string` do the same thing, so which you choose is a matter of style.\n\nRemember that strings are UTF-8 encoded, so we can include any properly encoded data in them, as shown in Listing 8-14.\n\n```rust\n    let hello = String::from(\"السلام عليكم\");\n    let hello = String::from(\"Dobrý den\");\n    let hello = String::from(\"Hello\");\n    let hello = String::from(\"שָׁלוֹם\");\n    let hello = String::from(\"नमस्ते\");\n    let hello = String::from(\"こんにちは\");\n    let hello = String::from(\"안녕하세요\");\n    let hello = String::from(\"你好\");\n    let hello = String::from(\"Olá\");\n    let hello = String::from(\"Здравствуйте\");\n    let hello = String::from(\"Hola\");\n```\n\n##### Listing 8-14: Storing greetings in different languages in strings\n\nAll of these are valid `String` values.\n\n### Updating a String\n\nA `String` can grow in size and its contents can change, just like the contents of a `Vec<T>`, if you push more data into it. In addition, you can conveniently use the `+` operator or the `format!` macro to concatenate `String` values.\n\n#### Appending to a String with `push_str` and `push`\n\nWe can grow a `String` by using the `push_str` method to append a string slice, as shown in Listing 8-15.\n\n```rust\n    let mut s = String::from(\"foo\");\n    s.push_str(\"bar\");\n```\n\n##### Listing 8-15: Appending a string slice to a String using the push_str method\n\nAfter these two lines, `s` will contain `foobar`. The `push_str` method takes a string slice because we don’t necessarily want to take ownership of the parameter. For example, the code in Listing 8-16 shows that it would be unfortunate if we weren’t able to use `s2` after appending its contents to `s1`.\n\n```rust\n    let mut s1 = String::from(\"foo\");\n    let s2 = \"bar\";\n    s1.push_str(s2);\n    println!(\"s2 is {}\", s2);\n```\n\n##### Listing 8-16: Using a string slice after appending its contents to a String\n\nIf the `push_str` method took ownership of `s2`, we wouldn’t be able to print its value on the last line. However, this code works as we’d expect!\n\nThe `push` method takes a single character as a parameter and adds it to the `String`. Listing 8-17 shows code that adds the letter _l_ to a `String` using the `push` method.\n\n```rust\n    let mut s = String::from(\"lo\");\n    s.push('l');\n```\n\n##### Listing 8-17: Adding one character to a String value using push\n\nAs a result of this code, `s` will contain `lol`.\n\n#### Concatenation with the `+` Operator or the format! Macro\n\nOften, you’ll want to combine two existing strings. One way is to use the `+` operator, as shown in Listing 8-18.\n\n```rust\n    let s1 = String::from(\"Hello, \");\n    let s2 = String::from(\"world!\");\n    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used\n```\n\n##### Listing 8-18: Using the + operator to combine two String values into a new String value\n\nThe string `s3` will contain `Hello, world!` as a result of this code. The reason `s1` is no longer valid after the addition and the reason we used a reference to `s2` has to do with the signature of the method that gets called when we use the `+` operator. The `+` operator uses the `add` method, whose signature looks something like this:\n\n```rust\n    fn add(self, s: &str) -> String {\n```\n\nThis isn’t the exact signature that’s in the standard library: in the standard library, `add` is defined using generics. Here, we’re looking at the signature of `add` with concrete types substituted for the generic ones, which is what happens when we call this method with `String` values. We’ll discuss generics in Chapter 10\\. This signature gives us the clues we need to understand the tricky bits of the `+` operator.\n\nFirst, `s2` has an `&`, meaning that we’re adding a _reference_ of the second string to the first string because of the `s` parameter in the `add` function: we can only add a `&str` to a `String`; we can’t add two `String` values together. But wait—the type of `&s2` is `&String`, not `&str`, as specified in the second parameter to `add`. So why does Listing 8-18 compile?\n\nThe reason we’re able to use `&s2` in the call to `add` is that the compiler can _coerce_ the `&String` argument into a `&str`. When we call the `add` method, Rust uses a _deref coercion_, which here turns `&s2` into `&s2[..]`. We’ll discuss deref coercion in more depth in Chapter 15\\. Because `add` does not take ownership of the `s` parameter, `s2` will still be a valid `String` after this operation.\n\nSecond, we can see in the signature that `add` takes ownership of `self`, because `self` does _not_ have an `&`. This means `s1` in Listing 8-18 will be moved into the `add` call and no longer be valid after that. So although `let s3 = s1 + &s2;` looks like it will copy both strings and create a new one, this statement actually takes ownership of `s1`, appends a copy of the contents of `s2`, and then returns ownership of the result. In other words, it looks like it’s making a lot of copies but isn’t; the implementation is more efficient than copying.\n\nIf we need to concatenate multiple strings, the behavior of the `+` operator gets unwieldy:\n\n```rust\n    let s1 = String::from(\"tic\");\n    let s2 = String::from(\"tac\");\n    let s3 = String::from(\"toe\");\n\n    let s = s1 + \"-\" + &s2 + \"-\" + &s3;\n```\n\nAt this point, `s` will be `tic-tac-toe`. With all of the `+` and `\"` characters, it’s difficult to see what’s going on. For more complicated string combining, we can use the `format!` macro:\n\n```rust\n    let s1 = String::from(\"tic\");\n    let s2 = String::from(\"tac\");\n    let s3 = String::from(\"toe\");\n\n    let s = format!(\"{}-{}-{}\", s1, s2, s3);\n```\n\nThis code also sets `s` to `tic-tac-toe`. The `format!` macro works in the same way as `println!`, but instead of printing the output to the screen, it returns a `String` with the contents. The version of the code using `format!` is much easier to read and doesn’t take ownership of any of its parameters.\n\n### Indexing into Strings\n\nIn many other programming languages, accessing individual characters in a string by referencing them by index is a valid and common operation. However, if you try to access parts of a `String` using indexing syntax in Rust, you’ll get an error. Consider the invalid code in Listing 8-19.\n\n```rust\n    let s1 = String::from(\"hello\");\n    let h = s1[0];\n```\n\n##### Listing 8-19: Attempting to use indexing syntax with a String</span>\n\nThis code will result in the following error:\n\n```text\nerror[E0277]: the trait bound `std::string::String: std::ops::Index<{integer}>` is not satisfied\n     -->\n      |\n    3 |     let h = s1[0];\n      |             ^^^^^ the type `std::string::String` cannot be indexed by `{integer}`\n      |\n      = help: the trait `std::ops::Index<{integer}>` is not implemented for `std::string::String`\n```\n\nThe error and the note tell the story: Rust strings don’t support indexing. But why not? To answer that question, we need to discuss how Rust stores strings in memory.\n\n#### Internal Representation\n\nA `String` is a wrapper over a `Vec<u8>`. Let’s look at some of our properly encoded UTF-8 example strings from Listing 8-14\\. First, this one:\n\n```rust\n    let len = String::from(\"Hola\").len();\n    #}\n```\n\nIn this case, `len` will be 4, which means the vector storing the string “Hola” is 4 bytes long. Each of these letters takes 1 byte when encoded in UTF-8\\. But what about the following line? (Note that this string begins with the capital Cyrillic letter Ze, not the Arabic number 3.)\n\n```rust\n    let len = String::from(\"Здравствуйте\").len();\n```    \n\nAsked how long the string is, you might say 12\\. However, Rust’s answer is 24: that’s the number of bytes it takes to encode “Здравствуйте” in UTF-8, because each Unicode scalar value in that string takes 2 bytes of storage. Therefore, an index into the string’s bytes will not always correlate to a valid Unicode scalar value. To demonstrate, consider this invalid Rust code:\n\n```rust\n    let hello = \"Здравствуйте\";\n    let answer = &hello[0];\n```\n\nWhat should the value of `answer` be? Should it be `З`, the first letter? When encoded in UTF-8, the first byte of `З` is `208` and the second is `151`, so `answer` should in fact be `208`, but `208` is not a valid character on its own. Returning `208` is likely not what a user would want if they asked for the first letter of this string; however, that’s the only data that Rust has at byte index 0\\. Users generally don’t want the byte value returned, even if the string contains only Latin letters: if `&\"hello\"[0]` were valid code that returned the byte value, it would return `104`, not `h`. To avoid returning an unexpected value and causing bugs that might not be discovered immediately, Rust doesn’t compile this code at all and prevents misunderstandings early in the development process.\n\n#### Bytes and Scalar Values and Grapheme Clusters! Oh My!\n\nAnother point about UTF-8 is that there are actually three relevant ways to look at strings from Rust’s perspective: as bytes, scalar values, and grapheme clusters (the closest thing to what we would call _letters_).\n\nIf we look at the Hindi word “नमस्ते” written in the Devanagari script, it is stored as a vector of `u8` values that looks like this:\n\n```text\n    [224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n    224, 165, 135]\n```\n\nThat’s 18 bytes and is how computers ultimately store this data. If we look at them as Unicode scalar values, which are what Rust’s `char` type is, those bytes look like this:\n\n```text\n    ['न', 'म', 'स', '्', 'त', 'े']\n```\n\nThere are six `char` values here, but the fourth and sixth are not letters: they’re diacritics that don’t make sense on their own. Finally, if we look at them as grapheme clusters, we’d get what a person would call the four letters that make up the Hindi word:\n```text\n    [\"न\", \"म\", \"स्\", \"ते\"]\n```\n\nRust provides different ways of interpreting the raw string data that computers store so that each program can choose the interpretation it needs, no matter what human language the data is in.\n\nA final reason Rust doesn’t allow us to index into a `String` to get a character is that indexing operations are expected to always take constant time (O(1)). But it isn’t possible to guarantee that performance with a `String`, because Rust would have to walk through the contents from the beginning to the index to determine how many valid characters there were.\n\n### Slicing Strings\n\nIndexing into a string is often a bad idea because it’s not clear what the return type of the string-indexing operation should be: a byte value, a character, a grapheme cluster, or a string slice. Therefore, Rust asks you to be more specific if you really need to use indices to create string slices. To be more specific in your indexing and indicate that you want a string slice, rather than indexing using `[]` with a single number, you can use `[]` with a range to create a string slice containing particular bytes:\n\n```rust\n    let hello = \"Здравствуйте\";\n\n    let s = &hello[0..4];\n```\n\nHere, `s` will be a `&str` that contains the first 4 bytes of the string. Earlier, we mentioned that each of these characters was 2 bytes, which means `s` will be `Зд`.\n\nWhat would happen if we used `&hello[0..1]`? The answer: Rust would panic at runtime in the same way as if an invalid index were accessed in a vector:\n\n    thread 'main' panicked at 'byte index 1 is not a char boundary; it is inside 'З' (bytes 0..2) of `Здравствуйте`', src/libcore/str/mod.rs:2188:4\n\nYou should use ranges to create string slices with caution, because doing so can crash your program.\n\n[\n\n### Methods for Iterating Over Strings\n\n](ch08-02-strings.html#methods-for-iterating-over-strings)\n\nFortunately, you can access elements in a string in other ways.\n\nIf you need to perform operations on individual Unicode scalar values, the best way to do so is to use the `chars` method. Calling `chars` on “नमस्ते” separates out and returns six values of type `char`, and you can iterate over the result to access each element:\n\n```rust\n    for c in \"नमस्ते\".chars() {\n        println!(\"{}\", c);\n    }\n```\n\nThis code will print the following:\n\n```text\n    न\n    म\n    स\n    ्\n    त\n    े\n```\n\nThe `bytes` method returns each raw byte, which might be appropriate for your domain:\n\n```rust\n    for b in \"नमस्ते\".bytes() {\n        println!(\"{}\", b);\n    }\n```\n\nThis code will print the 18 bytes that make up this `String`:\n\n```text\n    224\n    164\n    // --snip--\n    165\n    135\n```\n\nBut be sure to remember that valid Unicode scalar values may be made up of more than 1 byte.\n\nGetting grapheme clusters from strings is complex, so this functionality is not provided by the standard library. Crates are available on [crates.io](https://crates.io) if this is the functionality you need.\n\n### Strings Are Not So Simple\n\nTo summarize, strings are complicated. Different programming languages make different choices about how to present this complexity to the programmer. Rust has chosen to make the correct handling of `String` data the default behavior for all Rust programs, which means programmers have to put more thought into handling UTF-8 data upfront. This trade-off exposes more of the complexity of strings than is apparent in other programming languages, but it prevents you from having to handle errors involving non-ASCII characters later in your development life cycle.\n\n_You can refer to the following chapter in the Rust Programming Language Book:[Strings](https://doc.rust-lang.org/stable/book/ch08-02-strings.html)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Strings 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"strings1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let answer = current_favorite_color();\n    println!(\"My current favorite color is {}\", answer);\n}\n\nfn current_favorite_color() -> String {\n    \"blue\"\n}\n"
            }
          },
          "description_text" : "Make me compile without changing the function signature!\n\n<div class=\"hint\">\n  The `current_favorite_color` function is currently returning a string slice with the `'static` lifetime.\n  We know this because the data of the string lives in our code itself -- it doesn't come from a file or user input or another program -- so it will live as long as our program lives.\n  But it is still a string slice.\n  There's one way to create a `String` by converting a string slice covered in the Strings chapter of the book, and another way that uses the `From` trait.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Strings 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"strings2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let word = String::from(\"green\"); // Try not changing this line :)\n    if is_a_color_word(word) {\n        println!(\"That is a color word I know!\");\n    } else {\n        println!(\"That is not a color word I know.\");\n    }\n}\n\nfn is_a_color_word(attempt: &str) -> bool {\n    attempt == \"green\" || attempt == \"blue\" || attempt == \"red\"\n}\n"
            }
          },
          "description_text" : "Make me compile without changing the function signature!\n\n<div class=\"hint\">\n  Yes, it would be really easy to fix this by just changing the value bound to `word` to be a string slice instead of a `String`, wouldn't it??\n  There is a way to add one character to line 6, though, that will coerce the `String` into a string slice.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Test 3",
      "task_list" : [
        {
          "name" : "Test 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"test3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 118,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                },
                {
                  "offset" : 136,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                },
                {
                  "offset" : 165,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                },
                {
                  "offset" : 195,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                },
                {
                  "offset" : 232,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                },
                {
                  "offset" : 265,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                },
                {
                  "offset" : 315,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                },
                {
                  "offset" : 353,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                },
                {
                  "offset" : 388,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                },
                {
                  "offset" : 450,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn string_slice(arg: &str) { println!(\"{}\", arg); }\n\nfn string(arg: String) { println!(\"{}\", arg); }\n\nfn main() {\n    TODO(\"blue\");\n    TODO(\"red\".to_string());\n    TODO(String::from(\"hi\"));\n    TODO(\"rust is fun!\".to_owned());\n    TODO(\"nice weather\".into());\n    TODO(format!(\"Interpolation {}\", \"Station\"));\n    TODO(&String::from(\"abc\")[0..1]);\n    TODO(\"  hello there \".trim());\n    TODO(\"Happy Monday!\".to_string().replace(\"Mon\", \"Tues\"));\n    TODO(\"mY sHiFt KeY iS sTiCkY\".to_lowercase());\n}"
            }
          },
          "description_text" : "## Test 3\n\nThis is a test for the following sections:\n* Strings\n\nOk, here are a bunch of values -- some are `Strings`, some are `&strs`.\nYour task is to call one of these two functions on each value depending on what you think each value is.\nThat is, add either `string_slice` or `string` before the parentheses on each line.\nIf you're right, it will compile!\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Modules",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "## Defining Modules to Control Scope and Privacy\n\nIn this section, we’ll talk about modules and other parts of the module system, namely _paths_ that allow you to name items; the `use` keyword that brings a path into scope; and the `pub` keyword to make items public. We’ll also discuss using the `as` keyword, external packages, and the glob operator. For now, let’s focus on modules!\n\n_Modules_ let us organize code within a crate into groups for readability and easy reuse. Modules also control the _privacy_ of items, which is whether an item can be used by outside code (_public_) or whether it’s an internal implementation detail and not available for outside use (_private_).\n\nAs an example, let’s write a library crate that provides the functionality of a restaurant. We’ll define the signatures of functions but leave their bodies empty to concentrate on the organization of the code rather than actually implementing a restaurant in code.\n\nIn the restaurant industry, parts of a restaurant are referred to as _front of house_ and others as _back of house_. Front of house is where customers are and includes hosts seating customers, servers taking orders and payment, and bartenders making drinks. Back of house includes the chefs and cooks in the kitchen, dishwashers cleaning up, and managers doing administrative work.\n\nTo structure our crate in the same way that a real restaurant works, we can organize the functions into nested modules. Create a new library named `restaurant` by running `cargo new --lib restaurant`; then put the code in Listing 7-1 into _src/lib.rs_ to define some modules and function signatures.\n\n```rust\n    mod front_of_house {\n        mod hosting {\n            fn add_to_waitlist() {}\n\n            fn seat_at_table() {}\n        }\n\n        mod serving {\n            fn take_order() {}\n\n            fn serve_order() {}\n\n            fn take_payment() {}\n        }\n    }\n```\n\n##### Listing 7-1: A front_of_house module containing other modules that then contain functions\n\nWe define a module by starting with the `mod` keyword, and then specify the name of the module (in this case, `front_of_house`) and place curly brackets around the body of the module. Inside modules, we can have other modules, as in this case with the modules `hosting` and `serving`. Modules can also hold definitions for other items, such as structs, enums, constants, traits, or as in Listing 7-1, functions.\n\nBy using modules, we can group related definitions together and name why they’re related. Programmers using this code would have an easier time finding the definitions they want to use because they could navigate the code based on the groups rather than having to read through all the definitions. Programmers adding new functionality to this code would know where to place the code to keep the program organized.\n\nEarlier, we mentioned that _src/main.rs_ and _src/lib.rs_ are called _crate roots_. The reason for their name is that the contents of either of these two files form a module named `crate` at the root of the crate’s module structure, known as the _module tree_.\n\nListing 7-2 shows the module tree for the structure in Listing 7-1.\n\n    crate\n     └── front_of_house\n         ├── hosting\n         │   ├── add_to_waitlist\n         │   └── seat_at_table\n         └── serving\n             ├── take_order\n             ├── serve_order\n             └── take_payment\n\n##### Listing 7-2: The module tree for the code in Listing 7-1\n\nThis tree shows how some of the modules nest inside one another (such as `hosting` nests inside `front_of_house`). The tree also shows how some modules are _siblings_ to each other, meaning they’re defined in the same module (`hosting` and `serving` are defined within `front_of_house`). To continue the family metaphor, if module A is contained inside module B, we say that module A is the _child_ of module B, and that module B is the _parent_ of module A. Notice that the entire module tree is rooted under the implicit module named `crate`.\n\nThe module tree might remind you of the filesystem’s directory tree on your computer; this is a very apt comparison! Just like directories in a filesystem, you use modules to organize your code. And just like files in a directory, we need a way to find our modules.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Defining Modules to Control Scope and Privacy](https://doc.rust-lang.org/stable/book/ch07-02-defining-modules-to-control-scope-and-privacy.html)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Paths for Referring to an Item in the Module Tree",
          "files" : {
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// put code of your task here\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"paths_for_referring_to_an_item_in_the_module_tree\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## Paths for Referring to an Item in the Module Tree\n\nTo show Rust where to find an item in a module tree, we use a _path_ in the same way we use a path when navigating a filesystem. If we want to call a function, we need to know its path.\n\nA _path_ can take two forms:\n\n*   An _absolute path_ starts from a crate root by using a crate name or a literal `crate`.\n*   A _relative path_ starts from the current module and uses `self`, `super`, or an identifier in the current module.\n\nBoth absolute and relative paths are followed by one or more identifiers separated by double colons (`::`).\n\nLet’s return to the example in Listing 7-1\\. How do we call the `add_to_waitlist` function? This is the same as asking, what’s the path of the `add_to_waitlist` function? In Listing 7-3, we simplified our code a bit by removing some of the modules and functions. We’ll show two ways to call the `add_to_waitlist` function from a new function `eat_at_restaurant` defined in the crate root. Note that this example won’t compile just yet; we’ll explain why in a bit.\n\n```rust\n    mod front_of_house {\n        mod hosting {\n            fn add_to_waitlist() {}\n        }\n    }\n\n    pub fn eat_at_restaurant() {\n        // Absolute path\n        crate::front_of_house::hosting::add_to_waitlist();\n\n        // Relative path\n        front_of_house::hosting::add_to_waitlist();\n    }\n```\n\n##### Listing 7-3: Calling the add_to_waitlist function using absolute and relative paths</span>\n\nThe first time we call the `add_to_waitlist` function in `eat_at_restaurant`, we use an absolute path. The `add_to_waitlist` function is defined in the same crate as `eat_at_restaurant`, which means we can use the `crate` keyword to start an absolute path.\n\nAfter `crate`, we include each of the successive modules until we make our way to `add_to_waitlist`. You can imagine a filesystem with the same structure, and we’d specify the path `/front_of_house/hosting/add_to_waitlist` to run the `add_to_waitlist` program; using the `crate` name to start from the crate root is like using `/` to start from the filesystem root in your shell.\n\nThe second time we call `add_to_waitlist` in `eat_at_restaurant`, we use a relative path. The path starts with `front_of_house`, the name of the module defined at the same level of the module tree as `eat_at_restaurant`. Here the filesystem equivalent would be using the path `front_of_house/hosting/add_to_waitlist`. Starting with a name means that the path is relative.\n\nChoosing whether to use a relative or absolute path is a decision you’ll make based on your project. The decision should depend on whether you’re more likely to move item definition code separately from or together with the code that uses the item. For example, if we move the `front_of_house` module and the `eat_at_restaurant` function into a module named `customer_experience`, we’d need to update the absolute path to `add_to_waitlist`, but the relative path would still be valid. However, if we moved the `eat_at_restaurant` function separately into a module named `dining`, the absolute path to the `add_to_waitlist` call would stay the same, but the relative path would need to be updated. We tend to specify absolute paths because it’s more likely to move code definitions and item calls independently of each other.\n\nLet’s try to compile Listing 7-3 and find out why it won’t compile yet! The error we get is shown in Listing 7-4.\n\n```text\nCompiling Test_Rust_Project v0.1.0\nerror[E0603]: module `hosting` is private\n --> src/main.rs:9:28\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                            ^^^^^^^\n\nerror[E0603]: module `hosting` is private\n  --> src/main.rs:12:21\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                     ^^^^^^^\n```\n\n##### Listing 7-4: Compiler errors from building the code in Listing 7-3\n\nThe error messages say that module `hosting` is private. In other words, we have the correct paths for the `hosting` module and the `add_to_waitlist` function, but Rust won’t let us use them because it doesn’t have access to the private sections.\n\nModules aren’t only useful for organizing your code, they also define Rust’s _privacy boundary_: the line that encapsulates the implementation details external code isn’t allowed to know about, call, or rely on. So, if you want to make an item like a function or struct private, you put it in a module.\n\nThe way privacy works in Rust is that all items (functions, methods, structs, enums, modules, and constants) are private by default. Items in a parent module can’t use the private items inside child modules, but items in child modules can use the items in their ancestor modules. The reason is that child modules wrap and hide their implementation details, but the child modules can see the context in which they’re defined. To continue with the restaurant metaphor, think of the privacy rules like the back office of a restaurant: what goes on in there is private to restaurant customers, but office managers can see and do everything in the restaurant in which they operate.\n\nRust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. But you can expose inner parts of child modules code to outer ancestor modules by making an item public using the `pub` keyword.\n\n### Exposing Paths with the pub Keyword\n\nLet’s return to the error in Listing 7-4 that told us the `hosting` module is private. We want the `eat_at_restaurant` function in the parent module to have access to the `add_to_waitlist` function in the child module, so we mark the `hosting` module with the `pub` keyword, as shown in Listing 7-5.\n\n```rust\n    mod front_of_house {\n        pub mod hosting {\n            fn add_to_waitlist() {}\n        }\n    }\n\n    pub fn eat_at_restaurant() {\n        // Absolute path\n        crate::front_of_house::hosting::add_to_waitlist();\n\n        // Relative path\n        front_of_house::hosting::add_to_waitlist();\n    }\n```\n\n##### Listing 7-5: Declaring the hosting module as pub to use it from eat_at_restaurant\n\nUnfortunately, the code in Listing 7-5 still results in an error, as shown in Listing 7-6.\n\n```text\nCompiling Test_Rust_Project v0.1.0\nerror[E0603]: function `add_to_waitlist` is private\n --> src/main.rs:9:37\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                                     ^^^^^^^^^^^^^^^\n\nerror[E0603]: function `add_to_waitlist` is private\n  --> src/main.rs:12:30\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                              ^^^^^^^^^^^^^^^                            ^^^^^^^^^^^^^^^\n```\n\n##### Listing 7-6: Compiler errors from building the code in Listing 7-5\n\nWhat happened? Adding the `pub` keyword in front of `mod hosting` makes the module public. With this change, if we can access `front_of_house`, we can access `hosting`. But the _contents_ of `hosting` are still private; making the module public doesn’t make its contents public. The `pub` keyword on a module only lets code in its ancestor modules refer to it.\n\nThe errors in Listing 7-6 say that the `add_to_waitlist` function is private. The privacy rules apply to structs, enums, functions, and methods as well as modules.\n\nLet’s also make the `add_to_waitlist` function public by adding the `pub` keyword before its definition, as in Listing 7-7.\n\n```rust\n    mod front_of_house {\n        pub mod hosting {\n            pub fn add_to_waitlist() {}\n        }\n    }\n\n    pub fn eat_at_restaurant() {\n        // Absolute path\n        crate::front_of_house::hosting::add_to_waitlist();\n\n        // Relative path\n        front_of_house::hosting::add_to_waitlist();\n    }\n```\n\n##### Listing 7-7: Adding the pub keyword to mod hosting and fn add_to_waitlist lets us call the function from eat_at_restaurant\n\nNow the code will compile! Let’s look at the absolute and the relative path, and double-check why adding the `pub` keyword lets us use these paths in `add_to_waitlist` with respect to the privacy rules.\n\nIn the absolute path, we start with `crate`, the root of our crate’s module tree. Then the `front_of_house` module is defined in the crate root. The `front_of_house` module isn’t public, but because the `eat_at_restaurant` function is defined in the same module as `front_of_house` (that is, `eat_at_restaurant` and `front_of_house` are siblings), we can refer to `front_of_house` from `eat_at_restaurant`. Next is the `hosting` module marked with `pub`. We can access the parent module of `hosting`, so we can access `hosting`. Finally, the `add_to_waitlist` function is marked with `pub` and we can access its parent module, so this function call works!\n\nIn the relative path, the logic is the same as the absolute path except for the first step: rather than starting from the crate root, the path starts from `front_of_house`. The `front_of_house` module is defined within the same module as `eat_at_restaurant`, so the relative path starting from the module in which `eat_at_restaurant` is defined works. Then, because `hosting` and `add_to_waitlist` are marked with `pub`, the rest of the path works and this function call is valid!\n\n### Starting Relative Paths with super\n\nWe can also construct relative paths that begin in the parent module by using `super` at the start of the path. This is like starting a filesystem path with the `..` syntax. Why would we want to do this?\n\nConsider the code in Listing 7-8 that models the situation in which a chef fixes an incorrect order and personally brings it out to the customer. The function `fix_incorrect_order` calls the function `serve_order` by specifying the path to `serve_order` starting with `super`:\n\n```rust\n    fn serve_order() {}\n\n    mod back_of_house {\n        fn fix_incorrect_order() {\n            cook_order();\n            super::serve_order();\n        }\n\n        fn cook_order() {}\n    }\n```\n\n##### Listing 7-8: Calling a function using a relative path starting with super\n\nThe `fix_incorrect_order` function is in the `back_of_house` module, so we can use `super` to go to the parent module of `back_of_house`, which in this case is `crate`, the root. From there, we look for `serve_order` and find it. Success! We think the `back_of_house` module and the `serve_order` function are likely to stay in the same relationship to each other and get moved together should we decide to reorganize the crate’s module tree. Therefore, we used `super` so we’ll have fewer places to update code in the future if this code gets moved to a different module.\n\n### Making Structs and Enums Public\n\nWe can also use `pub` to designate structs and enums as public, but there are a few extra details. If we use `pub` before a struct definition, we make the struct public, but the struct’s fields will still be private. We can make each field public or not on a case-by-case basis. In Listing 7-9, we’ve defined a public `back_of_house::Breakfast` struct with a public `toast` field but a private `seasonal_fruit` field. This models the case in a restaurant where the customer can pick the type of bread that comes with a meal, but the chef decides which fruit accompanies the meal based on what’s in season and in stock. The available fruit changes quickly, so customers can’t choose the fruit or even see which fruit they’ll get.\n\n```rust\n    mod back_of_house {\n        pub struct Breakfast {\n            pub toast: String,\n            seasonal_fruit: String,\n        }\n\n        impl Breakfast {\n            pub fn summer(toast: &str) -> Breakfast {\n                Breakfast {\n                    toast: String::from(toast),\n                    seasonal_fruit: String::from(\"peaches\"),\n                }\n            }\n        }\n    }\n\n    pub fn eat_at_restaurant() {\n        // Order a breakfast in the summer with Rye toast\n        let mut meal = back_of_house::Breakfast::summer(\"Rye\");\n        // Change our mind about what bread we'd like\n        meal.toast = String::from(\"Wheat\");\n        println!(\"I'd like {} toast please\", meal.toast);\n\n        // The next line won't compile if we uncomment it; we're not allowed\n        // to see or modify the seasonal fruit that comes with the meal\n        // meal.seasonal_fruit = String::from(\"blueberries\");\n    }\n```\n\n##### Listing 7-9: A struct with some public fields and some private fields\n\nBecause the `toast` field in the `back_of_house::Breakfast` struct is public, in `eat_at_restaurant` we can write and read to the `toast` field using dot notation. Notice that we can’t use the `seasonal_fruit` field in `eat_at_restaurant` because `seasonal_fruit` is private. Try uncommenting the line modifying the `seasonal_fruit` field value to see what error you get!\n\nAlso, note that because `back_of_house::Breakfast` has a private field, the struct needs to provide a public associated function that constructs an instance of `Breakfast` (we’ve named it `summer` here). If `Breakfast` didn’t have such a function, we couldn’t create an instance of `Breakfast` in `eat_at_restaurant` because we can’t set the value of the private `seasonal_fruit` field in `eat_at_restaurant`.\n\nIn contrast, if we make an enum public, all of its variants are then public. We only need the `pub` before the `enum` keyword, as shown in Listing 7-10.\n\n```rust\n    mod back_of_house {\n        pub enum Appetizer {\n            Soup,\n            Salad,\n        }\n    }\n\n    pub fn eat_at_restaurant() {\n        let order1 = back_of_house::Appetizer::Soup;\n        let order2 = back_of_house::Appetizer::Salad;\n    }\n```\n\n##### Listing 7-10: Designating an enum as public makes all its variants public\n\nBecause we made the `Appetizer` enum public, we can use the `Soup` and `Salad` variants in `eat_at_restaurant`. Enums aren’t very useful unless their variants are public; it would be annoying to have to annotate all enum variants with `pub` in every case, so the default for enum variants is to be public. Structs are often useful without their fields being public, so struct fields follow the general rule of everything being private by default unless annotated with `pub`.\n\nThere’s one more situation involving `pub` that we haven’t covered, and that is our last module system feature: the `use` keyword. We’ll cover `use` by itself first, and then we’ll show how to combine `pub` and `use`.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Paths for Referring to an Item in the Module Tree](https://doc.rust-lang.org/stable/book/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#paths-for-referring-to-an-item-in-the-module-tree)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Bringing Paths into Scope with the use Keyword",
          "files" : {
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// put code of your task here\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"bringing_paths_into_scope_with_the_use_keyword\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## Bringing Paths into Scope with the use Keyword\n\nIt might seem like the paths we’ve written to call functions so far are inconveniently long and repetitive. For example, in Listing 7-7, whether we chose the absolute or relative path to the `add_to_waitlist` function, every time we wanted to call `add_to_waitlist` we had to specify `front_of_house` and `hosting` too. Fortunately, there’s a way to simplify this process. We can bring a path into a scope once and then call the items in that path as if they’re local items with the `use` keyword.\n\nIn Listing 7-11, we bring the `crate::front_of_house::hosting` module into the scope of the `eat_at_restaurant` function so we only have to specify `hosting::add_to_waitlist` to call the `add_to_waitlist` function in `eat_at_restaurant`.\n\n```rust\n    mod front_of_house {\n        pub mod hosting {\n            pub fn add_to_waitlist() {}\n        }\n    }\n\n    use crate::front_of_house::hosting;\n\n    pub fn eat_at_restaurant() {\n        hosting::add_to_waitlist();\n        hosting::add_to_waitlist();\n        hosting::add_to_waitlist();\n    }\n```\n\n##### Listing 7-11: Bringing a module into scope with use\n\nAdding `use` and a path in a scope is similar to creating a symbolic link in the filesystem. By adding `use crate::front_of_house::hosting` in the crate root, `hosting` is now a valid name in that scope, just as though the `hosting` module had been defined in the crate root. Paths brought into scope with `use` also check privacy, like any other paths.\n\nSpecifying a relative path with `use` is slightly different. Instead of starting from a name in the current scope, we must start the path given to `use` with the keyword `self`. Listing 7-12 shows how to specify a relative path to get the same behavior as Listing 7-11.\n\n```rust\n    mod front_of_house {\n        pub mod hosting {\n            pub fn add_to_waitlist() {}\n        }\n    }\n\n    use self::front_of_house::hosting;\n\n    pub fn eat_at_restaurant() {\n        hosting::add_to_waitlist();\n        hosting::add_to_waitlist();\n        hosting::add_to_waitlist();\n    }\n```\n\n##### Listing 7-12: Bringing a module into scope with use and a relative path starting with self\n\nNote that using `self` in this way might not be necessary in the future; it’s an inconsistency in the language that Rust developers are working to eliminate.\n\n### Creating Idiomatic use Paths\n\nIn Listing 7-11, you might have wondered why we specified `use crate::front_of_house::hosting` and then called `hosting::add_to_waitlist` in `eat_at_restaurant` rather than specifying the `use` path all the way out to the `add_to_waitlist` function to achieve the same result, as in Listing 7-13.\n\n```rust\n    mod front_of_house {\n        pub mod hosting {\n            pub fn add_to_waitlist() {}\n        }\n    }\n\n    use crate::front_of_house::hosting::add_to_waitlist;\n\n    pub fn eat_at_restaurant() {\n        add_to_waitlist();\n        add_to_waitlist();\n        add_to_waitlist();\n    }\n```\n\n##### Listing 7-13: Bringing the add_to_waitlist function into scope with use, which is unidiomatic\n\nAlthough both Listing 7-11 and 7-13 accomplish the same task, Listing 7-11 is the idiomatic way to bring a function into scope with `use`. Bringing the function’s parent module into scope with `use` so we have to specify the parent module when calling the function makes it clear that the function isn’t locally defined while still minimizing repetition of the full path. The code in Listing 7-13 is unclear as to where `add_to_waitlist` is defined.\n\nOn the other hand, when bringing in structs, enums, and other items with `use`, it’s idiomatic to specify the full path. Listing 7-14 shows the idiomatic way to bring the standard library’s `HashMap` struct into the scope of a binary crate.\n\n```rust\n    use std::collections::HashMap;\n\n    fn main() {\n        let mut map = HashMap::new();\n        map.insert(1, 2);\n    }\n```\n\n##### Listing 7-14: Bringing HashMap into scope in an idiomatic way\n\nThere’s no strong reason behind this idiom: it’s just the convention that has emerged, and folks have gotten used to reading and writing Rust code this way.\n\nThe exception to this idiom is if we’re bringing two items with the same name into scope with `use` statements, because Rust doesn’t allow that. Listing 7-15 shows how to bring two `Result` types into scope that have the same name but different parent modules and how to refer to them.\n\n```rust\n    use std::fmt;\n    use std::io;\n\n    fn function1() -> fmt::Result {\n    }\n\n    fn function2() -> io::Result<()> {\n    }\n```\n\n##### Listing 7-15: Bringing two types with the same name into the same scope requires using their parent modules.\n\nAs you can see, using the parent modules distinguishes the two `Result` types. If instead we specified `use std::fmt::Result` and `use std::io::Result`, we’d have two `Result` types in the same scope and Rust wouldn’t know which one we meant when we used `Result`. Try it and see what compiler error you get!\n\n### Providing New Names with the `as` Keyword\n\nThere’s another solution to the problem of bringing two types of the same name into the same scope with `use`: after the path, we can specify `as` and a new local name, or alias, for the type. Listing 7-16 shows another way to write the code in Listing 7-15 by renaming one of the two `Result` types using `as`.\n\n```rust\n    use std::fmt::Result;\n    use std::io::Result as IoResult;\n\n    fn function1() -> Result {\n    }\n\n    fn function2() -> IoResult<()> {\n    }\n```\n\n##### Listing 7-16: Renaming a type when it’s brought into scope with the as keyword\n\nIn the second `use` statement, we chose the new name `IoResult` for the `std::io::Result` type, which won’t conflict with the `Result` from `std::fmt` that we’ve also brought into scope. Listing 7-15 and Listing 7-16 are considered idiomatic, so the choice is up to you!\n\n### Re-exporting Names with `pub use`\n\nWhen we bring a name into scope with the `use` keyword, the name available in the new scope is private. To enable the code that calls our code to refer to that name as if it had been defined in that code’s scope, we can combine `pub` and `use`. This technique is called _re-exporting_ because we’re bringing an item into scope but also making that item available for others to bring into their scope.\n\nListing 7-17 shows the code in Listing 7-11 with `use` in the root module changed to `pub use`.\n\n```rust\n    mod front_of_house {\n        pub mod hosting {\n            pub fn add_to_waitlist() {}\n        }\n    }\n\n    pub use crate::front_of_house::hosting;\n\n    pub fn eat_at_restaurant() {\n        hosting::add_to_waitlist();\n        hosting::add_to_waitlist();\n        hosting::add_to_waitlist();\n    }\n```\n\n##### Listing 7-17: Making a name available for any code to use from a new scope with pub use\n\nBy using `pub use`, external code can now call the `add_to_waitlist` function using `hosting::add_to_waitlist`. If we hadn’t specified `pub use`, the `eat_at_restaurant` function could call `hosting::add_to_waitlist` in its scope but external code couldn’t take advantage of this new path.\n\nRe-exporting is useful when the internal structure of your code is different than the way programmers calling your code would think about the domain. For example, in this restaurant metaphor, the people running the restaurant think about “front of house” and “back of house.” But customers visiting a restaurant probably won’t think about the parts of the restaurant in those terms. With `pub use`, we can write our code with one structure but expose a different structure. Doing so makes our library well organized for programmers working on the library and programmers calling the library.\n\n### Using External Packages\n\nIn Chapter 2, we programmed a guessing game project that used an external package called `rand` to get random numbers. To use `rand` in our project, we added this line to _Cargo.toml_:\n\n```toml\n    [dependencies]\n    rand = \"0.5.5\"\n```\n\nAdding `rand` as a dependency in _Cargo.toml_ tells Cargo to download the `rand` package and any dependencies from _https://crates.io_ and make `rand` available to our project.\n\nThen, to bring `rand` definitions into the scope of our package, we added a `use` line starting with the name of the package, `rand`, and listing the items we wanted to bring into scope. Recall that in the section [“Generating a Random Number”](ch02-00-guessing-game-tutorial.html#generating-a-random-number) in Chapter 2, we brought the `Rng` trait into scope and called the `rand::thread_rng` function:\n\n```rust\n    use rand::Rng;\n    fn main() {\n        let secret_number = rand::thread_rng().gen_range(1, 101);\n    }\n```\n\nMembers of the Rust community have made many packages available at _https://crates.io_, and pulling any of them into your package involves these same steps: listing them in your package’s _Cargo.toml_ file and using `use` to bring items into scope.\n\nNote that the standard library (`std`) is also a crate that’s external to our package. Because the standard library is shipped with the Rust language, we don’t need to change _Cargo.toml_ to include `std`. But we do need to refer to it with `use` to bring items from there into our package’s scope. For example, with `HashMap` we would use this line:\n\n```rust\n    use std::collections::HashMap;\n```\n\nThis is an absolute path starting with `std`, the name of the standard library crate.\n\n### Using Nested Paths to Clean Up Large use Lists\n\nIf we’re using multiple items defined in the same package or same module, listing each item on its own line can take up a lot of vertical space in our files. For example, these two `use` statements we had in Listing 2-4 in the Guessing Game bring items from `std` into scope:\n\n```rust\n    use std::cmp::Ordering;\n    use std::io;\n    // ---snip---\n```\n\nInstead, we can use nested paths to bring the same items into scope in one line. We do this by specifying the common part of the path, followed by two colons, and then curly brackets around a list of the parts of the paths that differ, as shown in Listing 7-18.\n\n```rust\n    use std::{cmp::Ordering, io};\n    // ---snip---\n```\n\n##### Listing 7-18: Specifying a nested path to bring multiple items with the same prefix into scope\n\nIn bigger programs, bringing many items into scope from the same package or module using nested paths can reduce the number of separate `use` statements needed by a lot!\n\nWe can use a nested path at any level in a path, which is useful when combining two `use` statements that share a subpath. For example, Listing 7-19 shows two `use` statements: one that brings `std::io` into scope and one that brings `std::io::Write` into scope.\n\n```rust\n    use std::io;\n    use std::io::Write;\n```\n\n##### Listing 7-19: Two use statements where one is a subpath of the other\n\nThe common part of these two paths is `std::io`, and that’s the complete first path. To merge these two paths into one `use` statement, we can use `self` in the nested path, as shown in Listing 7-20.\n\n```rust\n    use std::io::{self, Write};\n```\n\n##### Listing 7-20: Combining the paths in Listing 7-19 into one use statement\n\nThis line brings `std::io` and `std::io::Write` into scope.\n\n### The Glob Operator\n\nIf we want to bring _all_ public items defined in a path into scope, we can specify that path followed by `*`, the glob operator:\n\n```rust\n    use std::collections::*;\n```\n\nThis `use` statement brings all public items defined in `std::collections` into the current scope. Be careful when using the glob operator! Glob can make it harder to tell what names are in scope and where a name used in your program was defined.\n\nThe glob operator is often used when testing to bring everything under test into the `tests` module; we’ll talk about that in the section [“How to Write Tests”](ch11-01-writing-tests.html#how-to-write-tests) in Chapter 11\\. The glob operator is also sometimes used as part of the prelude pattern: see [the standard library documentation](../std/prelude/index.html#other-preludes) for more information on that pattern.\n\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Bringing Paths into Scope with the use Keyword](https://doc.rust-lang.org/stable/book/ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#bringing-paths-into-scope-with-the-use-keyword)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Separating Modules into Different Files",
          "files" : {
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// put code of your task here\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"separating_modules_into_different_files\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/front_of_house.rs" : {
              "name" : "src/front_of_house.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            }
          },
          "description_text" : "## Separating Modules into Different Files\n\nSo far, all the examples in this chapter defined multiple modules in one file. When modules get large, you might want to move their definitions to a separate file to make the code easier to navigate.\n\nFor example, let’s start from the code in Listing 7-17 and move the `front_of_house` module to its own file _src/front_of_house.rs_ by changing the crate root file so it contains the code shown in Listing 7-21\\. In this case, the crate root file is _src/lib.rs_, but this procedure also works with binary crates whose crate root file is _src/main.rs_.\n\n```rust\n    mod front_of_house;\n\n    pub use crate::front_of_house::hosting;\n\n    pub fn eat_at_restaurant() {\n        hosting::add_to_waitlist();\n        hosting::add_to_waitlist();\n        hosting::add_to_waitlist();\n    }\n```\n\n##### Listing 7-21: Declaring the front_of_house module whose body will be in _src/front_of_house.rs_\n\nAnd _src/front_of_house.rs_ gets the definitions from the body of the `front_of_house` module, as shown in Listing 7-22.\n\n<span class=\"filename\">Filename: src/front_of_house.rs</span>\n\n```rust\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n```\n\n##### Listing 7-22: Definitions inside the front_of_house module in _src/front_of_house.rs_\n\nUsing a semicolon after `mod front_of_house` rather than using a block tells Rust to load the contents of the module from another file with the same name as the module. To continue with our example and extract the `hosting` module to its own file as well, we change _src/front_of_house.rs_ to contain only the declaration of the `hosting` module:\n\n```rust\n    pub mod hosting;\n```\n\nThen we create a _src/front_of_house_ directory and a file _src/front_of_house/hosting.rs_ to contain the definitions made in the `hosting` module:\n\n```rust\n    pub fn add_to_waitlist() {}\n```\n\nThe module tree remains the same, and the function calls in `eat_at_restaurant` will work without any modification, even though the definitions live in different files. This technique lets you move modules to new files as they grow in size.\n\nNote that the `pub use crate::front_of_house::hosting` statement in _src/lib.rs_ also hasn’t changed, nor does `use` have any impact on what files are compiled as part of the crate. The `mod` keyword declares modules, and Rust looks in a file with the same name as the module for the code that goes into that module.\n\n## Summary\n\nRust lets you organize your packages into crates and your crates into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a `use` statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the `pub` keyword.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Separating Modules into Different Files](https://doc.rust-lang.org/stable/book/ch07-05-separating-modules-into-different-files.html#separating-modules-into-different-files)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Modules 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"modules1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "mod sausage_factory {\n    fn make_sausage() {\n        println!(\"sausage!\");\n    }\n}\n\nfn main() {\n    sausage_factory::make_sausage();\n}\n"
            }
          },
          "description_text" : "## Task 1\n\nMake me compile!\n\n<div class=\"hint\">\n  Everything is private in Rust by default -- but there's a keyword we can use to make something public!\n  The compiler error should point to the thing that needs to be public.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Modules 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"modules2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "mod delicious_snacks {\n    use self::fruits::PEAR as fruit;\n    use self::veggies::CUCUMBER as veggie;\n\n    mod fruits {\n        pub const PEAR: &'static str = \"Pear\";\n        pub const APPLE: &'static str = \"Apple\";\n    }\n\n    mod veggies {\n        pub const CUCUMBER: &'static str = \"Cucumber\";\n        pub const CARROT: &'static str = \"Carrot\";\n    }\n}\n\nfn main() {\n    println!(\"favorite snacks: {} and {}\",\n             delicious_snacks::fruit,\n             delicious_snacks::veggie);\n}\n"
            }
          },
          "description_text" : "##Task 2\n\nMake me compile!\n\n<div class=\"hint\">\n  The delicious_snacks module is trying to present an external interface (the `fruit` and `veggie` constants) that is different than its internal structure (the `fruits` and `veggies` modules and associated constants).\n  It's almost there except for one keyword missing for each constant.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Macros",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "## Macros\n\nWe’ve used macros like `println!` throughout this book, but we haven’t fully explored what a macro is and how it works. The term _macro_ refers to a family of features in Rust: _declarative_ macros with `macro_rules!` and three kinds of _procedural_ macros:\n\n*   Custom `#[derive]` macros that specify code added with the `derive` attribute used on structs and enums\n*   Attribute-like macros that define custom attributes usable on any item\n*   Function-like macros that look like function calls but operate on the tokens specified as their argument\n\nWe’ll talk about each of these in turn, but first, let’s look at why we even need macros when we already have functions.\n\n### The Difference Between Macros and Functions\n\nFundamentally, macros are a way of writing code that writes other code, which is known as _metaprogramming_. In Appendix C, we discuss the `derive` attribute, which generates an implementation of various traits for you. We’ve also used the `println!` and `vec!` macros throughout the book. All of these macros _expand_ to produce more code than the code you’ve written manually.\n\nMetaprogramming is useful for reducing the amount of code you have to write and maintain, which is also one of the roles of functions. However, macros have some additional powers that functions don’t.\n\nA function signature must declare the number and type of parameters the function has. Macros, on the other hand, can take a variable number of parameters: we can call `println!(\"hello\")` with one argument or `println!(\"hello {}\", name)` with two arguments. Also, macros are expanded before the compiler interprets the meaning of the code, so a macro can, for example, implement a trait on a given type. A function can’t, because it gets called at runtime and a trait needs to be implemented at compile time.\n\nThe downside to implementing a macro instead of a function is that macro definitions are more complex than function definitions because you’re writing Rust code that writes Rust code. Due to this indirection, macro definitions are generally more difficult to read, understand, and maintain than function definitions.\n\nAnother important difference between macros and functions is that you must define macros or bring them into scope _before_ you call them in a file, as opposed to functions you can define anywhere and call anywhere.\n\n### Declarative Macros with macro_rules! for General Metaprogramming\n\nThe most widely used form of macros in Rust is _declarative macros_. These are also sometimes referred to as “macros by example,” “`macro_rules!` macros,” or just plain “macros.” At their core, declarative macros allow you to write something similar to a Rust `match` expression. As discussed in Chapter 6, `match` expressions are control structures that take an expression, compare the resulting value of the expression to patterns, and then run the code associated with the matching pattern. Macros also compare a value to patterns that are associated with particular code: in this situation, the value is the literal Rust source code passed to the macro; the patterns are compared with the structure of that source code; and the code associated with each pattern, when matched, replaces the code passed to the macro. This all happens during compilation.\n\nTo define a macro, you use the `macro_rules!` construct. Let’s explore how to use `macro_rules!` by looking at how the `vec!` macro is defined. Chapter 8 covered how we can use the `vec!` macro to create a new vector with particular values. For example, the following macro creates a new vector containing three integers:\n\n```rust\n    let v: Vec<u32> = vec![1, 2, 3];\n```\n\nWe could also use the `vec!` macro to make a vector of two integers or a vector of five string slices. We wouldn’t be able to use a function to do the same because we wouldn’t know the number or type of values up front.\n\nListing 19-36 shows a slightly simplified definition of the `vec!` macro.\n\n```rust\n    #[macro_export]\n    macro_rules! vec {\n        ( $( $x:expr ),* ) => {\n            {\n                let mut temp_vec = Vec::new();\n                $(\n                    temp_vec.push($x);\n                )*\n                temp_vec\n            }\n        };\n    }\n```\n\n##### Listing 19-36: A simplified version of the vec! macro definition\n\n> Note: The actual definition of the `vec!` macro in the standard library includes code to preallocate the correct amount of memory up front. That code is an optimization that we don’t include here to make the example simpler.\n\nThe `#[macro_export]` annotation indicates that this macro should be made available whenever the crate in which the macro is defined is brought into scope. Without this annotation, the macro can’t be brought into scope.\n\nWe then start the macro definition with `macro_rules!` and the name of the macro we’re defining _without_ the exclamation mark. The name, in this case `vec`, is followed by curly brackets denoting the body of the macro definition.\n\nThe structure in the `vec!` body is similar to the structure of a `match` expression. Here we have one arm with the pattern `( $( $x:expr ),* )`, followed by `=>` and the block of code associated with this pattern. If the pattern matches, the associated block of code will be emitted. Given that this is the only pattern in this macro, there is only one valid way to match; any other pattern will result in an error. More complex macros will have more than one arm.\n\nValid pattern syntax in macro definitions is different than the pattern syntax covered in Chapter 18 because macro patterns are matched against Rust code structure rather than values. Let’s walk through what the pattern pieces in Listing 19-36 mean; for the full macro pattern syntax, see [the reference](../reference/macros.html).\n\nFirst, a set of parentheses encompasses the whole pattern. A dollar sign (`<main) is next, followed by a set of parentheses that captures values that match the pattern within the parentheses for use in the replacement code. Within `$()` is `$x:expr`, which matches any Rust expression and gives the expression the name `$x`.\n\nThe comma following `$()` indicates that a literal comma separator character could optionally appear after the code that matches the code in `$()`. The `*` specifies that the pattern matches zero or more of whatever precedes the `*`.\n\nWhen we call this macro with `vec![1, 2, 3];`, the `$x` pattern matches three times with the three expressions `1`, `2`, and `3`.\n\nNow let’s look at the pattern in the body of the code associated with this arm: `temp_vec.push()` within `$()*` is generated for each part that matches `$()` in the pattern zero or more times depending on how many times the pattern matches. The `$x` is replaced with each expression matched. When we call this macro with `vec![1, 2, 3];`, the code generated that replaces this macro call will be the following:\n\n```rust\n    let mut temp_vec = Vec::new();\n    temp_vec.push(1);\n    temp_vec.push(2);\n    temp_vec.push(3);\n    temp_vec\n```\n\nWe’ve defined a macro that can take any number of arguments of any type and can generate code to create a vector containing the specified elements.\n\nThere are some strange edge cases with `macro_rules!`. In the future, Rust will have a second kind of declarative macro that will work in a similar fashion but fix some of these edge cases. After that update, `macro_rules!` will be effectively deprecated. With this in mind, as well as the fact that most Rust programmers will _use_ macros more than _write_ macros, we won’t discuss `macro_rules!` any further. To learn more about how to write macros, consult the online documentation or other resources, such as [“The Little Book of Rust Macros”](https://danielkeep.github.io/tlborm/book/index.html).\n\n### Procedural Macros for Generating Code from Attributes\n\nThe second form of macros is _procedural macros_, which act more like functions (and are a type of procedure). Procedural macros accept some code as an input, operate on that code, and produce some code as an output rather than matching against patterns and replacing the code with other code as declarative macros do.\n\nThe three kinds of procedural macros: custom derive, attribute-like, and function-like, all work in a similar fashion.\n\nWhen creating procedural macros, the definitions must reside in their own crate with a special crate type. This is for complex technical reasons that we hope to eliminate in the future. Using procedural macros looks like the code in Listing 19-37, where `some_attribute` is a placeholder for using a specific macro.\n\n```rust\n    use proc_macro;\n\n    #[some_attribute]\n    pub fn some_name(input: TokenStream) -> TokenStream {\n    }\n```\n\n##### Listing 19-37: An example of using a procedural macro\n\nThe function that defines a procedural macro takes a `TokenStream` as an input and produces a `TokenStream` as an output. The `TokenStream` type is defined by the `proc_macro` crate that is included with Rust and represents a sequence of tokens. This is the core of the macro: the source code that the macro is operating on makes up the input `TokenStream`, and the code the macro produces is the output `TokenStream`. The function also has an attribute attached to it that specifies which kind of procedural macro we’re creating. We can have multiple kinds of procedural macros in the same crate.\n\nLet’s look at the different kinds of procedural macros. We’ll start with a custom derive macro and then explain the small dissimilarities that make the other forms different.\n\n### How to Write a Custom `derive` Macro\n\nLet’s create a crate named `hello_macro` that defines a trait named `HelloMacro` with one associated function named `hello_macro`. Rather than making our crate users implement the `HelloMacro` trait for each of their types, we’ll provide a procedural macro so users can annotate their type with `#[derive(HelloMacro)]` to get a default implementation of the `hello_macro` function. The default implementation will print `Hello, Macro! My name is TypeName!` where `TypeName` is the name of the type on which this trait has been defined. In other words, we’ll write a crate that enables another programmer to write code like Listing 19-38 using our crate.\n\n```rust\n    use hello_macro::HelloMacro;\n    use hello_macro_derive::HelloMacro;\n\n    #[derive(HelloMacro)]\n    struct Pancakes;\n\n    fn main() {\n        Pancakes::hello_macro();\n    }\n```\n\n##### Listing 19-38: The code a user of our crate will be able to write when using our procedural macro\n\nThis code will print `Hello, Macro! My name is Pancakes!` when we’re done. The first step is to make a new library crate, like this:\n\n```text\n    $ cargo new hello_macro --lib\n```\n\nNext, we’ll define the `HelloMacro` trait and its associated function:\n\n```rust\n    pub trait HelloMacro {\n        fn hello_macro();\n    }\n```\n\nWe have a trait and its function. At this point, our crate user could implement the trait to achieve the desired functionality, like so:\n\n```rust\n    use hello_macro::HelloMacro;\n\n    struct Pancakes;\n\n    impl HelloMacro for Pancakes {\n        fn hello_macro() {\n            println!(\"Hello, Macro! My name is Pancakes!\");\n        }\n    }\n\n    fn main() {\n        Pancakes::hello_macro();\n    }\n```\n\nHowever, they would need to write the implementation block for each type they wanted to use with `hello_macro`; we want to spare them from having to do this work.\n\nAdditionally, we can’t yet provide the `hello_macro` function with default implementation that will print the name of the type the trait is implemented on: Rust doesn’t have reflection capabilities, so it can’t look up the type’s name at runtime. We need a macro to generate code at compile time.\n\nThe next step is to define the procedural macro. At the time of this writing, procedural macros need to be in their own crate. Eventually, this restriction might be lifted. The convention for structuring crates and macro crates is as follows: for a crate named `foo`, a custom derive procedural macro crate is called `foo_derive`. Let’s start a new crate called `hello_macro_derive` inside our `hello_macro` project:\n\n```text\n    $ cargo new hello_macro_derive --lib\n```\n\nOur two crates are tightly related, so we create the procedural macro crate within the directory of our `hello_macro` crate. If we change the trait definition in `hello_macro`, we’ll have to change the implementation of the procedural macro in `hello_macro_derive` as well. The two crates will need to be published separately, and programmers using these crates will need to add both as dependencies and bring them both into scope. We could instead have the `hello_macro` crate use `hello_macro_derive` as a dependency and reexport the procedural macro code. However, the way we’ve structured the project makes it possible for programmers to use `hello_macro` even if they don’t want the `derive` functionality.\n\nWe need to declare the `hello_macro_derive` crate as a procedural macro crate. We’ll also need functionality from the `syn` and `quote` crates, as you’ll see in a moment, so we need to add them as dependencies. Add the following to the _Cargo.toml_ file for `hello_macro_derive`:\n\n```toml\n    [lib]\n    proc-macro = true\n\n    [dependencies]\n    syn = \"0.14.4\"\n    quote = \"0.6.3\"\n```\n\nTo start defining the procedural macro, place the code in Listing 19-39 into your _src/lib.rs_ file for the `hello_macro_derive` crate. Note that this code won’t compile until we add a definition for the `impl_hello_macro` function.\n\n```rust\n    extern crate proc_macro;\n\n    use crate::proc_macro::TokenStream;\n    use quote::quote;\n    use syn;\n\n    #[proc_macro_derive(HelloMacro)]\n    pub fn hello_macro_derive(input: TokenStream) -> TokenStream {\n        // Construct a representation of Rust code as a syntax tree\n        // that we can manipulate\n        let ast = syn::parse(input).unwrap();\n\n        // Build the trait implementation\n        impl_hello_macro(&ast)\n    }\n```\n\n##### Listing 19-39: Code that most procedural macro crates will require in order to process Rust code\n\nNotice that we’ve split the code into the `hello_macro_derive` function responsible for parsing the `TokenStream` and the `impl_hello_macro` function responsible for transforming the syntax tree: this makes writing a procedural macro more convenient. The code in the outer function (`hello_macro_derive` in this case) will be the same for almost every procedural macro crate you see or create. The code you specify in the body of the inner function (`impl_hello_macro` in this case) will be different depending on your procedural macro’s purpose.\n\nWe’ve introduced three new crates: `proc_macro`, [`syn`](https://crates.io/crates/syn), and [`quote`](https://crates.io/crates/quote). The `proc_macro` crate comes with Rust, so we didn’t need to add that to the dependencies in _Cargo.toml_. The `proc_macro` crate is the compiler’s API that allows us to read and manipulate Rust code from our code.\n\nThe `syn` crate parses Rust code from a string into a data structure that we can perform operations on. The `quote` crate turns `syn` data structures back into Rust code. These crates make it much simpler to parse any sort of Rust code we might want to handle: writing a full parser for Rust code is no simple task.\n\nThe `hello_macro_derive` function will be called when a user of our library specifies `#[derive(HelloMacro)]` on a type. This is possible because we’ve annotated the `hello_macro_derive` function here with `proc_macro_derive` and specified the name, `HelloMacro`, which matches our trait name; this is the convention most procedural macros follow.\n\nThe `hello_macro_derive` function first converts the `input` from a `TokenStream` to a data structure that we can then interpret and perform operations on. This is where `syn` comes into play. The `parse` function in `syn` takes a `TokenStream` and returns a `DeriveInput` struct representing the parsed Rust code. Listing 19-40 shows the relevant parts of the `DeriveInput` struct we get from parsing the `struct Pancakes;` string:\n\n```rust\n    DeriveInput {\n        // --snip--\n\n        ident: Ident {\n            ident: \"Pancakes\",\n            span: #0 bytes(95..103)\n        },\n        data: Struct(\n            DataStruct {\n                struct_token: Struct,\n                fields: Unit,\n                semi_token: Some(\n                    Semi\n                )\n            }\n        )\n    }\n```\n\n##### Listing 19-40: The DeriveInput instance we get when parsing the code that has the macro’s attribute in Listing 19-38\n\nThe fields of this struct show that the Rust code we’ve parsed is a unit struct with the `ident` (identifier, meaning the name) of `Pancakes`. There are more fields on this struct for describing all sorts of Rust code; check the [`syn` documentation for `DeriveInput`](https://docs.rs/syn/0.14.4/syn/struct.DeriveInput.html) for more information.\n\nSoon we’ll define the `impl_hello_macro` function, which is where we’ll build the new Rust code we want to include. But before we do, note that the output for our derive macro is also a `TokenStream`. The returned `TokenStream` is added to the code that our crate users write, so when they compile their crate, they’ll get the extra functionality that we provide in the modified `TokenStream`.\n\nYou might have noticed that we’re calling `unwrap` to cause the `hello_macro_derive` function to panic if the call to the `syn::parse` function fails here. It’s necessary for our procedural macro to panic on errors because `proc_macro_derive` functions must return `TokenStream` rather than `Result` to conform to the procedural macro API. We’ve simplified this example by using `unwrap`; in production code, you should provide more specific error messages about what went wrong by using `panic!` or `expect`.\n\nNow that we have the code to turn the annotated Rust code from a `TokenStream` into a `DeriveInput` instance, let’s generate the code that implements the `HelloMacro` trait on the annotated type, as shown in Listing 19-41.\n\n```rust\n    fn impl_hello_macro(ast: &syn::DeriveInput) -> TokenStream {\n        let name = &ast.ident;\n        let gen = quote! {\n            impl HelloMacro for #name {\n                fn hello_macro() {\n                    println!(\"Hello, Macro! My name is {}\", stringify!(#name));\n                }\n            }\n        };\n        gen.into()\n    }\n```\n\n##### Listing 19-41: Implementing the HelloMacro trait using the parsed Rust code\n\nWe get an `Ident` struct instance containing the name (identifier) of the annotated type using `ast.ident`. The struct in Listing 19-40 shows that when we run the `impl_hello_macro` function on the code in Listing 19-38, the `ident` we get will have the `ident` field with a value of `\"Pancakes\"`. Thus, the `name` variable in Listing 19-41 will contain an `Ident` struct instance that, when printed, will be the string `\"Pancakes\"`, the name of the struct in Listing 19-38.\n\nThe `quote!` macro lets us define the Rust code that we want to return. The compiler expects something different to the direct result of the `quote!` macro’s execution, so we need to convert it to a `TokenStream`. We do this by calling the `into` method, which consumes this intermediate representation and returns a value of the required `TokenStream` type.\n\nThe `quote!` macro also provides some very cool templating mechanics: we can enter `#name`, and `quote!` will replace it with the value in the variable `name`. You can even do some repetition similar to the way regular macros work. Check out [the `quote` crate’s docs](https://docs.rs/quote) for a thorough introduction.\n\nWe want our procedural macro to generate an implementation of our `HelloMacro` trait for the type the user annotated, which we can get by using `#name`. The trait implementation has one function, `hello_macro`, whose body contains the functionality we want to provide: printing `Hello, Macro! My name is` and then the name of the annotated type.\n\nThe `stringify!` macro used here is built into Rust. It takes a Rust expression, such as `1 + 2`, and at compile time turns the expression into a string literal, such as `\"1 + 2\"`. This is different than `format!` or `println!`, macros which evaluate the expression and then turn the result into a `String`. There is a possibility that the `#name` input might be an expression to print literally, so we use `stringify!`. Using `stringify!` also saves an allocation by converting `#name` to a string literal at compile time.\n\nAt this point, `cargo build` should complete successfully in both `hello_macro` and `hello_macro_derive`. Let’s hook up these crates to the code in Listing 19-38 to see the procedural macro in action! Create a new binary project in your _projects_ directory using `cargo new pancakes`. We need to add `hello_macro` and `hello_macro_derive` as dependencies in the `pancakes` crate’s _Cargo.toml_. If you’re publishing your versions of `hello_macro` and `hello_macro_derive` to _https://crates.io/_, they would be regular dependencies; if not, you can specify them as `path` dependencies as follows:\n\n```toml\n    [dependencies]\n    hello_macro = { path = \"../hello_macro\" }\n    hello_macro_derive = { path = \"../hello_macro/hello_macro_derive\" }\n```\n\nPut the code in Listing 19-38 into _src/main.rs_, and run `cargo run`: it should print `Hello, Macro! My name is Pancakes!` The implementation of the `HelloMacro` trait from the procedural macro was included without the `pancakes` crate needing to implement it; the `#[derive(HelloMacro)]` added the trait implementation.\n\nNext, let’s explore how the other kinds of procedural macros differ from custom derive macros.\n\n### Attribute-like macros\n\nAttribute-like macros are similar to custom derive macros, but instead of generating code for the `derive` attribute, they allow you to create new attributes. They’re also more flexible: `derive` only works for structs and enums; attributes can be applied to other items as well, such as functions. Here’s an example of using an attribute-like macro: say you have an attribute named `route` that annotates functions when using a web application framework:\n\n```rust\n    #[route(GET, \"/\")]\n    fn index() {\n```\n\nThis `#[route]` attribute would be defined by the framework as a procedural macro. The signature of the macro definition function would look like this:\n\n```rust\n    #[proc_macro_attribute]\n    pub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {\n```\n\nHere, we have two parameters of type `TokenStream`. The first is for the contents of the attribute: the `GET, \"/\"` part. The second is the body of the item the attribute is attached to: in this case, `fn index() {}` and the rest of the function’s body.\n\nOther than that, attribute-like macros work the same way as custom derive macros: you create a crate with the `proc-macro` crate type and implement a function that generates the code you want!\n\n### Function-like macros\n\nFunction-like macros define macros that look like function calls. Similarly to `macro_rules!` macros, they’re more flexible than functions in that they can take an unknown number of arguments, for example. However, `macro_rules!` macros can only be defined using the match-like syntax we discussed in the section [“Declarative Macros with `macro_rules!` for General Metaprogramming”](ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming) earlier. Function-like macros take a `TokenStream` parameter and their definition manipulates that `TokenStream` using Rust code as the other two types of procedural macros do. An example of a function-like macro is an `sql!` macro that might be called like so:\n\n```rust\n    let sql = sql!(SELECT * FROM posts WHERE id=1);\n```\n\nThis macro would parse the SQL statement inside it and check that it’s syntactically correct, which is much more complex processing than a `macro_rules!` macro can do. The `sql!` macro would be defined like this:\n\n```rust\n    #[proc_macro]\n    pub fn sql(input: TokenStream) -> TokenStream {\n```\n\nThis definition is similar to the custom derive macro’s signature: we receive the tokens that are inside the parentheses and return the code we wanted to generate.\n\n## Summary\n\nWhew! Now you have some Rust features in your toolbox that you won’t use often, but you’ll know they’re available in particular circumstances. We’ve introduced several complex topics, so when you encounter them in error message suggestions or in other peoples’ code, you’ll recognize these concepts and syntax. Use this chapter as a reference to guide you to solutions.\n\n_You can refer to the following book sections:_\n* [Macros](https://doc.rust-lang.org/stable/book/ch19-06-macros.html)\n* [The Little Book of Rust Macros](https://danielkeep.github.io/tlborm/book/index.html)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Macros 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"macros1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "macro_rules! my_macro {\n    () => {\n        println!(\"Check out my macro!\");\n    };\n}\n\nfn main() {\n    my_macro();\n}\n"
            }
          },
          "description_text" : "## Task 1\n\nMake me compile!\n\n<div class=\"hint\">\n  When you call a macro, you need to add something special compared to a regular function call.\n  If you're stuck, take a look at what's inside `my_macro`.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Macros 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"macros2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    my_macro!();\n}\n\nmacro_rules! my_macro {\n    () => {\n        println!(\"Check out my macro!\");\n    };\n}\n"
            }
          },
          "description_text" : "## Task 2\n\nMake me compile!\n\n<div class=\"hint\">\n  Macros don't quite play by the same rules as the rest of Rust, in terms of what's available where.\n\n  Unlike other things in Rust, the order of \"where you define a macro\" versus \"where you use it\" actually matters.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Macros 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"macros3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "TODO\nmod macros {\n    macro_rules! my_macro {\n        () => {\n            println!(\"Check out my macro!\");\n        };\n    }\n}\n\nfn main() {\n    my_macro!();\n}\n"
            }
          },
          "description_text" : "## Task 3\n\nMake me compile, without taking the macro out of the module!\n\n<div class=\"hint\">\n  In order to use a macro outside of its module, you need to do something special to the module to lift the macro out into its parent.\n\n  The same trick also works on \"extern crate\" statements for crates that have exported macros, if you've seen any of those around.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Macros 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"macros4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "macro_rules! my_macro {\n    () => {\n        println!(\"Check out my macro!\");\n    }\n    ($val:expr) => {\n        println!(\"Look at this other macro: {}\", $val);\n    }\n}\n\nfn main() {\n    my_macro!();\n    my_macro!(7777);\n}\n"
            }
          },
          "description_text" : "## Task 4\n\nMake me compile!\n\n<div class=\"hint\">\n  You only need to add a single character to make this compile.\n\n  The way macros are written, it wants to see something between each \"macro arm\", so it can separate them.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Test 4",
      "task_list" : [
        {
          "name" : "Test 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"test4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    if my_macro!(\"world!\") != \"Hello world!\" {\n        panic!(\"Oh no! Wrong output!\");\n    }\n}\n"
            }
          },
          "description_text" : "## Test 4\n\nThis test covers the sections:\n* Modules\n* Macros\n\nWrite a macro that passes the test! No hints this time, you can do it!\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Move Semantics",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "## Understanding Ownership\n\nOwnership is Rust’s most unique feature, and it enables Rust to make memory safety guarantees without needing a garbage collector. Therefore, it’s important to understand how ownership works in Rust. In this chapter, we’ll talk about ownership as well as several related features: borrowing, slices, and how Rust lays data out in memory.\n\n## What Is Ownership?\n\nRust’s central feature is _ownership_. Although the feature is straightforward to explain, it has deep implications for the rest of the language.\n\nAll programs have to manage the way they use a computer’s memory while running. Some languages have garbage collection that constantly looks for no longer used memory as the program runs; in other languages, the programmer must explicitly allocate and free the memory. Rust uses a third approach: memory is managed through a system of ownership with a set of rules that the compiler checks at compile time. None of the ownership features slow down your program while it’s running.\n\nBecause ownership is a new concept for many programmers, it does take some time to get used to. The good news is that the more experienced you become with Rust and the rules of the ownership system, the more you’ll be able to naturally develop code that is safe and efficient. Keep at it!\n\nWhen you understand ownership, you’ll have a solid foundation for understanding the features that make Rust unique. In this chapter, you’ll learn ownership by working through some examples that focus on a very common data structure: strings.\n\n\n> ### The Stack and the Heap\n> \n> In many programming languages, you don’t have to think about the stack and the heap very often. But in a systems programming language like Rust, whether a value is on the stack or the heap has more of an effect on how the language behaves and why you have to make certain decisions. Parts of ownership will be described in relation to the stack and the heap later in this chapter, so here is a brief explanation in preparation.\n> \n> Both the stack and the heap are parts of memory that are available to your code to use at runtime, but they are structured in different ways. The stack stores values in the order it gets them and removes the values in the opposite order. This is referred to as _last in, first out_. Think of a stack of plates: when you add more plates, you put them on top of the pile, and when you need a plate, you take one off the top. Adding or removing plates from the middle or bottom wouldn’t work as well! Adding data is called _pushing onto the stack_, and removing data is called _popping off the stack_.\n> \n> All data stored on the stack must have a known, fixed size. Data with an unknown size at compile time or a size that might change must be stored on the heap instead. The heap is less organized: when you put data on the heap, you request a certain amount of space. The operating system finds an empty spot in the heap that is big enough, marks it as being in use, and returns a _pointer_, which is the address of that location. This process is called _allocating on the heap_ and is sometimes abbreviated as just _allocating_. Pushing values onto the stack is not considered allocating. Because the pointer is a known, fixed size, you can store the pointer on the stack, but when you want the actual data, you must follow the pointer.\n> \n> Think of being seated at a restaurant. When you enter, you state the number of people in your group, and the staff finds an empty table that fits everyone and leads you there. If someone in your group comes late, they can ask where you’ve been seated to find you.\n> \n> Pushing to the stack is faster than allocating on the heap because the operating system never has to search for a place to store new data; that location is always at the top of the stack. Comparatively, allocating space on the heap requires more work, because the operating system must first find a big enough space to hold the data and then perform bookkeeping to prepare for the next allocation.\n> \n> Accessing data in the heap is slower than accessing data on the stack because you have to follow a pointer to get there. Contemporary processors are faster if they jump around less in memory. Continuing the analogy, consider a server at a restaurant taking orders from many tables. It’s most efficient to get all the orders at one table before moving on to the next table. Taking an order from table A, then an order from table B, then one from A again, and then one from B again would be a much slower process. By the same token, a processor can do its job better if it works on data that’s close to other data (as it is on the stack) rather than farther away (as it can be on the heap). Allocating a large amount of space on the heap can also take time.\n> \n> When your code calls a function, the values passed into the function (including, potentially, pointers to data on the heap) and the function’s local variables get pushed onto the stack. When the function is over, those values get popped off the stack.\n> \n> Keeping track of what parts of code are using what data on the heap, minimizing the amount of duplicate data on the heap, and cleaning up unused data on the heap so you don’t run out of space are all problems that ownership addresses. Once you understand ownership, you won’t need to think about the stack and the heap very often, but knowing that managing heap data is why ownership exists can help explain why it works the way it does.\n\n### Ownership Rules\n\nFirst, let’s take a look at the ownership rules. Keep these rules in mind as we work through the examples that illustrate them:\n\n*   Each value in Rust has a variable that’s called its _owner_.\n*   There can only be one owner at a time.\n*   When the owner goes out of scope, the value will be dropped.\n\n### Variable Scope\n\nWe’ve walked through an example of a Rust program already in Chapter 2. Now that we’re past basic syntax, we won’t include all the `fn main() {` code in examples, so if you’re following along, you’ll have to put the following examples inside a `main` function manually. As a result, our examples will be a bit more concise, letting us focus on the actual details rather than boilerplate code.\n\nAs a first example of ownership, we’ll look at the _scope_ of some variables. A scope is the range within a program for which an item is valid. Let’s say we have a variable that looks like this:\n\n```rust\n    let s = \"hello\"\n```\n\nThe variable `s` refers to a string literal, where the value of the string is hardcoded into the text of our program. The variable is valid from the point at which it’s declared until the end of the current _scope_. Listing 4-1 has comments annotating where the variable `s` is valid.\n\n```rust\n    {                      // s is not valid here, it’s not yet declared\n        let s = \"hello\";   // s is valid from this point forward\n\n        // do stuff with s\n    }                      // this scope is now over, and s is no longer valid\n```\n\n##### Listing 4-1: A variable and the scope in which it is valid\n\nIn other words, there are two important points in time here:\n\n*   When `s` comes _into scope_, it is valid.\n*   It remains valid until it goes _out of scope_.\n\nAt this point, the relationship between scopes and when variables are valid is similar to that in other programming languages. Now we’ll build on top of this understanding by introducing the `String` type.\n\n### The String Type\n\nTo illustrate the rules of ownership, we need a data type that is more complex than the ones we covered in the [“Data Types”](ch03-02-data-types.html#data-types) section of Chapter 3. The types covered previously are all stored on the stack and popped off the stack when their scope is over, but we want to look at data that is stored on the heap and explore how Rust knows when to clean up that data.\n\nWe’ll use `String` as the example here and concentrate on the parts of `String` that relate to ownership. These aspects also apply to other complex data types provided by the standard library and that you create. We’ll discuss `String` in more depth in Chapter 8.\n\nWe’ve already seen string literals, where a string value is hardcoded into our program. String literals are convenient, but they aren’t suitable for every situation in which we may want to use text. One reason is that they’re immutable. Another is that not every string value can be known when we write our code: for example, what if we want to take user input and store it? For these situations, Rust has a second string type, `String`. This type is allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. You can create a `String` from a string literal using the `from` function, like so:\n\n```rust\n    let s = String::from(\"hello\");\n```\n\nThe double colon (`::`) is an operator that allows us to namespace this particular `from` function under the `String` type rather than using some sort of name like `string_from`. We’ll discuss this syntax more in the [“Method Syntax”](ch05-03-method-syntax.html#method-syntax) section of Chapter 5 and when we talk about namespacing with modules in [“Paths for Referring to an Item in the Module Tree”](ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html) in Chapter 7.\n\nThis kind of string _can_ be mutated:\n\n```rust\n    let mut s = String::from(\"hello\");\n\n    s.push_str(\", world!\"); // push_str() appends a literal to a String\n\n    println!(\"{}\", s); // This will print `hello, world!`\n```\n\nSo, what’s the difference here? Why can `String` be mutated but literals cannot? The difference is how these two types deal with memory.\n\n### Memory and Allocation\n\nIn the case of a string literal, we know the contents at compile time, so the text is hardcoded directly into the final executable. This is why string literals are fast and efficient. But these properties only come from the string literal’s immutability. Unfortunately, we can’t put a blob of memory into the binary for each piece of text whose size is unknown at compile time and whose size might change while running the program.\n\nWith the `String` type, in order to support a mutable, growable piece of text, we need to allocate an amount of memory on the heap, unknown at compile time, to hold the contents. This means:\n\n*   The memory must be requested from the operating system at runtime.\n*   We need a way of returning this memory to the operating system when we’re done with our `String`.\n\nThat first part is done by us: when we call `String::from`, its implementation requests the memory it needs. This is pretty much universal in programming languages.\n\nHowever, the second part is different. In languages with a _garbage collector (GC)_, the GC keeps track and cleans up memory that isn’t being used anymore, and we don’t need to think about it. Without a GC, it’s our responsibility to identify when memory is no longer being used and call code to explicitly return it, just as we did to request it. Doing this correctly has historically been a difficult programming problem. If we forget, we’ll waste memory. If we do it too early, we’ll have an invalid variable. If we do it twice, that’s a bug too. We need to pair exactly one `allocate` with exactly one `free`.\n\nRust takes a different path: the memory is automatically returned once the variable that owns it goes out of scope. Here’s a version of our scope example from Listing 4-1 using a `String` instead of a string literal:\n\n```rust\n    {\n        let s = String::from(\"hello\"); // s is valid from this point forward\n\n        // do stuff with s\n    }                                  // this scope is now over, and s is no\n                                       // longer valid\n```\n\nThere is a natural point at which we can return the memory our `String` needs to the operating system: when `s` goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called `drop`, and it’s where the author of `String` can put the code to return the memory. Rust calls `drop` automatically at the closing curly bracket.\n\n> Note: In C++, this pattern of deallocating resources at the end of an item’s lifetime is sometimes called _Resource Acquisition Is Initialization (RAII)_. The `drop` function in Rust will be familiar to you if you’ve used RAII patterns.\n\nThis pattern has a profound impact on the way Rust code is written. It may seem simple right now, but the behavior of code can be unexpected in more complicated situations when we want to have multiple variables use the data we’ve allocated on the heap. Let’s explore some of those situations now.\n\n#### Ways Variables and Data Interact: Move\n\nMultiple variables can interact with the same data in different ways in Rust. Let’s look at an example using an integer in Listing 4-2.\n\n```rust\n    let x = 5;\n    let y = x;\n```\n\n##### Listing 4-2: Assigning the integer value of variable x to y\n\nWe can probably guess what this is doing: “bind the value `5` to `x`; then make a copy of the value in `x` and bind it to `y`.” We now have two variables, `x` and `y`, and both equal `5`. This is indeed what is happening, because integers are simple values with a known, fixed size, and these two `5` values are pushed onto the stack.\n\nNow let’s look at the `String` version:\n\n```rust\n    let s1 = String::from(\"hello\");\n    let s2 = s1;\n```\n\nThis looks very similar to the previous code, so we might assume that the way it works would be the same: that is, the second line would make a copy of the value in `s1` and bind it to `s2`. But this isn’t quite what happens.\n\nTake a look at Figure 4-1 to see what is happening to `String` under the covers. A `String` is made up of three parts, shown on the left: a pointer to the memory that holds the contents of the string, a length, and a capacity. This group of data is stored on the stack. On the right is the memory on the heap that holds the contents.\n\n<img alt=\"String in memory\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-01.svg\" class=\"center\" style=\"width: 50%;\">\n\n##### Figure 4-1: Representation in memory of a String holding the value \"hello\" bound to s1\n\nThe length is how much memory, in bytes, the contents of the `String` is currently using. The capacity is the total amount of memory, in bytes, that the `String` has received from the operating system. The difference between length and capacity matters, but not in this context, so for now, it’s fine to ignore the capacity.\n\nWhen we assign `s1` to `s2`, the `String` data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. We do not copy the data on the heap that the pointer refers to. In other words, the data representation in memory looks like Figure 4-2.\n\n<img alt=\"s1 and s2 pointing to the same value\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-02.svg\" class=\"center\" style=\"width: 50%;\">\n\n##### Figure 4-2: Representation in memory of the variable s2 that has a copy of the pointer, length, and capacity of s1\n\nThe representation does _not_ look like Figure 4-3, which is what memory would look like if Rust instead copied the heap data as well. If Rust did this, the operation `s2 = s1` could be very expensive in terms of runtime performance if the data on the heap were large.\n\n<img alt=\"s1 and s2 to two places\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-03.svg\" class=\"center\" style=\"width: 50%;\">\n\n##### Figure 4-3: Another possibility for what s2 = s1 might do if Rust copied the heap data as well\n\nEarlier, we said that when a variable goes out of scope, Rust automatically calls the `drop` function and cleans up the heap memory for that variable. But Figure 4-2 shows both data pointers pointing to the same location. This is a problem: when `s2` and `s1` go out of scope, they will both try to free the same memory. This is known as a _double free_ error and is one of the memory safety bugs we mentioned previously. Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.\n\nTo ensure memory safety, there’s one more detail to what happens in this situation in Rust. Instead of trying to copy the allocated memory, Rust considers `s1` to no longer be valid and, therefore, Rust doesn’t need to free anything when `s1` goes out of scope. Check out what happens when you try to use `s1` after `s2` is created; it won’t work:\n\n```rust\n    let s1 = String::from(\"hello\");\n    let s2 = s1;\n\n    println!(\"{}, world!\", s1);\n```\n\nYou’ll get an error like this because Rust prevents you from using the invalidated reference:\n\n```text\n    error[E0382]: use of moved value: `s1`\n     --> src/main.rs:5:28\n      |\n    3 |     let s2 = s1;\n      |         -- value moved here\n    4 |\n    5 |     println!(\"{}, world!\", s1);\n      |                            ^^ value used here after move\n      |\n      = note: move occurs because `s1` has type `std::string::String`, which does\n      not implement the `Copy` trait\n```\n\nIf you’ve heard the terms _shallow copy_ and _deep copy_ while working with other languages, the concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy. But because Rust also invalidates the first variable, instead of being called a shallow copy, it’s known as a _move_. In this example, we would say that `s1` was _moved_ into `s2`. So what actually happens is shown in Figure 4-4.\n\n<img alt=\"s1 moved to s2\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-04.svg\" class=\"center\" style=\"width: 50%;\">\n\n##### Figure 4-4: Representation in memory after `s1` has been invalidated\n\nThat solves our problem! With only `s2` valid, when it goes out of scope, it alone will free the memory, and we’re done.\n\nIn addition, there’s a design choice that’s implied by this: Rust will never automatically create “deep” copies of your data. Therefore, any _automatic_ copying can be assumed to be inexpensive in terms of runtime performance.\n\n#### Ways Variables and Data Interact: Clone\n\nIf we _do_ want to deeply copy the heap data of the `String`, not just the stack data, we can use a common method called `clone`. We’ll discuss method syntax in Chapter 5, but because methods are a common feature in many programming languages, you’ve probably seen them before.\n\nHere’s an example of the `clone` method in action:\n\n```rust\n    let s1 = String::from(\"hello\");\n    let s2 = s1.clone();\n\n    println!(\"s1 = {}, s2 = {}\", s1, s2);\n```\n\nThis works just fine and explicitly produces the behavior shown in Figure 4-3, where the heap data _does_ get copied.\n\nWhen you see a call to `clone`, you know that some arbitrary code is being executed and that code may be expensive. It’s a visual indicator that something different is going on.\n\n#### Stack-Only Data: Copy\n\nThere’s another wrinkle we haven’t talked about yet. This code using integers, part of which was shown in Listing 4-2, works and is valid:\n\n```rust\n    let x = 5;\n    let y = x;\n\n    println!(\"x = {}, y = {}\", x, y);\n```\n\nBut this code seems to contradict what we just learned: we don’t have a call to `clone`, but `x` is still valid and wasn’t moved into `y`.\n\nThe reason is that types such as integers that have a known size at compile time are stored entirely on the stack, so copies of the actual values are quick to make. That means there’s no reason we would want to prevent `x` from being valid after we create the variable `y`. In other words, there’s no difference between deep and shallow copying here, so calling `clone` wouldn’t do anything different from the usual shallow copying and we can leave it out.\n\nRust has a special annotation called the `Copy` trait that we can place on types like integers that are stored on the stack (we’ll talk more about traits in Chapter 10). If a type has the `Copy` trait, an older variable is still usable after assignment. Rust won’t let us annotate a type with the `Copy` trait if the type, or any of its parts, has implemented the `Drop` trait. If the type needs something special to happen when the value goes out of scope and we add the `Copy` annotation to that type, we’ll get a compile-time error. To learn about how to add the `Copy` annotation to your type, see [“Derivable Traits”](appendix-03-derivable-traits.html) in Appendix C.\n\nSo what types are `Copy`? You can check the documentation for the given type to be sure, but as a general rule, any group of simple scalar values can be `Copy`, and nothing that requires allocation or is some form of resource is `Copy`. Here are some of the types that are `Copy`:\n\n*   All the integer types, such as `u32`.\n*   The Boolean type, `bool`, with values `true` and `false`.\n*   All the floating point types, such as `f64`.\n*   The character type, `char`.\n*   Tuples, if they only contain types that are also `Copy`. For example, `(i32, i32)` is `Copy`, but `(i32, String)` is not.\n\n### Ownership and Functions\n\nThe semantics for passing a value to a function are similar to those for assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does. Listing 4-3 has an example with some annotations showing where variables go into and out of scope.\n\n```rust\n    fn main() {\n        let s = String::from(\"hello\");  // s comes into scope\n\n        takes_ownership(s);             // s's value moves into the function...\n                                        // ... and so is no longer valid here\n\n        let x = 5;                      // x comes into scope\n\n        makes_copy(x);                  // x would move into the function,\n                                        // but i32 is Copy, so it’s okay to still\n                                        // use x afterward\n\n    } // Here, x goes out of scope, then s. But because s's value was moved, nothing\n      // special happens.\n\n    fn takes_ownership(some_string: String) { // some_string comes into scope\n        println!(\"{}\", some_string);\n    } // Here, some_string goes out of scope and `drop` is called. The backing\n      // memory is freed.\n\n    fn makes_copy(some_integer: i32) { // some_integer comes into scope\n        println!(\"{}\", some_integer);\n    } // Here, some_integer goes out of scope. Nothing special happens.\n```\n\n##### Listing 4-3: Functions with ownership and scope annotated\n\nIf we tried to use `s` after the call to `takes_ownership`, Rust would throw a compile-time error. These static checks protect us from mistakes. Try adding code to `main` that uses `s` and `x` to see where you can use them and where the ownership rules prevent you from doing so.\n\n### Return Values and Scope\n\nReturning values can also transfer ownership. Listing 4-4 is an example with similar annotations to those in Listing 4-3.\n\n```rust\n    fn main() {\n        let s1 = gives_ownership();         // gives_ownership moves its return\n                                            // value into s1\n\n        let s2 = String::from(\"hello\");     // s2 comes into scope\n\n        let s3 = takes_and_gives_back(s2);  // s2 is moved into\n                                            // takes_and_gives_back, which also\n                                            // moves its return value into s3\n    } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was\n      // moved, so nothing happens. s1 goes out of scope and is dropped.\n\n    fn gives_ownership() -> String {             // gives_ownership will move its\n                                                 // return value into the function\n                                                 // that calls it\n\n        let some_string = String::from(\"hello\"); // some_string comes into scope\n\n        some_string                              // some_string is returned and\n                                                 // moves out to the calling\n                                                 // function\n    }\n\n    // takes_and_gives_back will take a String and return one\n    fn takes_and_gives_back(a_string: String) -> String { // a_string comes into\n                                                          // scope\n\n        a_string  // a_string is returned and moves out to the calling function\n    }\n```\n\n##### Listing 4-4: Transferring ownership of return values\n\nThe ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by `drop` unless the data has been moved to be owned by another variable.\n\nTaking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It’s quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well.\n\nIt’s possible to return multiple values using a tuple, as shown in Listing 4-5.\n\n```rust\n    fn main() {\n        let s1 = String::from(\"hello\");\n\n        let (s2, len) = calculate_length(s1);\n\n        println!(\"The length of '{}' is {}.\", s2, len);\n    }\n\n    fn calculate_length(s: String) -> (String, usize) {\n        let length = s.len(); // len() returns the length of a String\n\n        (s, length)\n    }\n```\n\n##### Listing 4-5: Returning ownership of parameters\n\nBut this is too much ceremony and a lot of work for a concept that should be common. Luckily for us, Rust has a feature for this concept, called _references_.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Ownership](https://doc.rust-lang.org/stable/book/ch04-01-what-is-ownership.html)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "References and Borrowing",
          "files" : {
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// put code of your task here\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"references_and_borrowing\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## References and Borrowing\n\nThe issue with the tuple code in Listing 4-5 is that we have to return the `String` to the calling function so we can still use the `String` after the call to `calculate_length`, because the `String` was moved into `calculate_length`.\n\nHere is how you would define and use a `calculate_length` function that has a reference to an object as a parameter instead of taking ownership of the value:\n\n```rust\n    fn main() {\n        let s1 = String::from(\"hello\");\n\n        let len = calculate_length(&s1);\n\n        println!(\"The length of '{}' is {}.\", s1, len);\n    }\n\n    fn calculate_length(s: &String) -> usize {\n        s.len()\n    }\n```\n\nFirst, notice that all the tuple code in the variable declaration and the function return value is gone. Second, note that we pass `&s1` into `calculate_length` and, in its definition, we take `&String` rather than `String`.\n\nThese ampersands are _references_, and they allow you to refer to some value without taking ownership of it. Figure 4-5 shows a diagram.\n\n<img alt=\"&amp;String s pointing at String s1\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-05.svg\" class=\"center\">\n\n##### Figure 4-5: A diagram of &String s pointing at String s1\n\n> Note: The opposite of referencing by using `&` is _dereferencing_, which is accomplished with the dereference operator, `*`. We’ll see some uses of the dereference operator in Chapter 8 and discuss details of dereferencing in Chapter 15.\n\nLet’s take a closer look at the function call here:\n\n```rust\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n```\n\nThe `&s1` syntax lets us create a reference that _refers_ to the value of `s1` but does not own it. Because it does not own it, the value it points to will not be dropped when the reference goes out of scope.\n\nLikewise, the signature of the function uses `&` to indicate that the type of the parameter `s` is a reference. Let’s add some explanatory annotations:\n\n```rust\n    fn calculate_length(s: &String) -> usize { // s is a reference to a String\n        s.len()\n    } // Here, s goes out of scope. But because it does not have ownership of what\n      // it refers to, nothing happens.\n```\n\nThe scope in which the variable `s` is valid is the same as any function parameter’s scope, but we don’t drop what the reference points to when it goes out of scope because we don’t have ownership. When functions have references as parameters instead of the actual values, we won’t need to return the values in order to give back ownership, because we never had ownership.\n\nWe call having references as function parameters _borrowing_. As in real life, if a person owns something, you can borrow it from them. When you’re done, you have to give it back.\n\nSo what happens if we try to modify something we’re borrowing? Try the code in Listing 4-6\\. Spoiler alert: it doesn’t work!\n\n```rust\n    fn main() {\n        let s = String::from(\"hello\");\n\n        change(&s);\n    }\n\n    fn change(some_string: &String) {\n        some_string.push_str(\", world\");\n    }\n```\n\n##### Listing 4-6: Attempting to modify a borrowed value\n\nHere’s the error:\n\n```text\n    error[E0596]: cannot borrow immutable borrowed content `*some_string` as mutable\n     --> error.rs:8:5\n      |\n    7 | fn change(some_string: &String) {\n      |                        ------- use `&mut String` here to make mutable\n    8 |     some_string.push_str(\", world\");\n      |     ^^^^^^^^^^^ cannot borrow as mutable\n```\n\nJust as variables are immutable by default, so are references. We’re not allowed to modify something we have a reference to.\n\n### Mutable References\n\nWe can fix the error in the code from Listing 4-6 with just a small tweak:\n\n```rust\n    fn main() {\n        let mut s = String::from(\"hello\");\n\n        change(&mut s);\n    }\n\n    fn change(some_string: &mut String) {\n        some_string.push_str(\", world\");\n    }\n```\n\nFirst, we had to change `s` to be `mut`. Then we had to create a mutable reference with `&mut s` and accept a mutable reference with `some_string: &mut String`.\n\nBut mutable references have one big restriction: you can have only one mutable reference to a particular piece of data in a particular scope. This code will fail:\n\n```rust\n    let mut s = String::from(\"hello\");\n\n    let r1 = &mut s;\n    let r2 = &mut s;\n\n    println!(\"{}, {}\", r1, r2);\n```\n\nHere’s the error:\n\n```text\n    error[E0499]: cannot borrow `s` as mutable more than once at a time\n     --> src/main.rs:5:14\n      |\n    4 |     let r1 = &mut s;\n      |              ------ first mutable borrow occurs here\n    5 |     let r2 = &mut s;\n      |              ^^^^^^ second mutable borrow occurs here\n    6 |\n    7 |     println!(\"{}, {}\", r1, r2);\n      |                        -- first borrow later used here\n```\n\nThis restriction allows for mutation but in a very controlled fashion. It’s something that new Rustaceans struggle with, because most languages let you mutate whenever you’d like.\n\nThe benefit of having this restriction is that Rust can prevent data races at compile time. A _data race_ is similar to a race condition and happens when these three behaviors occur:\n\n*   Two or more pointers access the same data at the same time.\n*   At least one of the pointers is being used to write to the data.\n*   There’s no mechanism being used to synchronize access to the data.\n\nData races cause undefined behavior and can be difficult to diagnose and fix when you’re trying to track them down at runtime; Rust prevents this problem from happening because it won’t even compile code with data races!\n\nAs always, we can use curly brackets to create a new scope, allowing for multiple mutable references, just not _simultaneous_ ones:\n\n```rust\n    let mut s = String::from(\"hello\");\n\n    {\n        let r1 = &mut s;\n\n    } // r1 goes out of scope here, so we can make a new reference with no problems.\n\n    let r2 = &mut s;\n```\n\nA similar rule exists for combining mutable and immutable references. This code results in an error:\n\n```rust\n    let mut s = String::from(\"hello\");\n\n    let r1 = &s; // no problem\n    let r2 = &s; // no problem\n    let r3 = &mut s; // BIG PROBLEM\n\n    println!(\"{}, {}, and {}\", r1, r2, r3);\n```\n\nHere’s the error:\n\n```text\n    error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n     --> src/main.rs:6:14\n      |\n    4 |     let r1 = &s; // no problem\n      |              -- immutable borrow occurs here\n    5 |     let r2 = &s; // no problem\n    6 |     let r3 = &mut s; // BIG PROBLEM\n      |              ^^^^^^ mutable borrow occurs here\n    7 |\n    8 |     println!(\"{}, {}, and {}\", r1, r2, r3);\n      |                                -- immutable borrow later used here\n```\n\nWhew! We _also_ cannot have a mutable reference while we have an immutable one. Users of an immutable reference don’t expect the values to suddenly change out from under them! However, multiple immutable references are okay because no one who is just reading the data has the ability to affect anyone else’s reading of the data.\n\nNote that a reference's scope starts from where it is introduced and continues through the last time that reference is used. For instance, this code will compile because the last usage of the immutable references occurs before the mutable reference is introduced:\n\n```rust\n    let mut s = String::from(\"hello\");\n\n    let r1 = &s; // no problem\n    let r2 = &s; // no problem\n    println!(\"{} and {}\", r1, r2);\n    // r1 and r2 are no longer used after this point\n\n    let r3 = &mut s; // no problem\n    println!(\"{}\", r3);\n```\n\nThe scopes of the immutable references `r1` and `r2` end after the `println!` where they are last used, which is before the mutable reference `r3` is created. These scopes don't overlap, so this code is allowed.\n\nEven though borrowing errors may be frustrating at times, remember that it’s the Rust compiler pointing out a potential bug early (at compile time rather than at runtime) and showing you exactly where the problem is. Then you don’t have to track down why your data isn’t what you thought it was.\n\n### Dangling References\n\nIn languages with pointers, it’s easy to erroneously create a _dangling pointer_, a pointer that references a location in memory that may have been given to someone else, by freeing some memory while preserving a pointer to that memory. In Rust, by contrast, the compiler guarantees that references will never be dangling references: if you have a reference to some data, the compiler will ensure that the data will not go out of scope before the reference to the data does.\n\nLet’s try to create a dangling reference, which Rust will prevent with a compile-time error:\n\n```rust\n    fn main() {\n        let reference_to_nothing = dangle();\n    }\n\n    fn dangle() -> &String {\n        let s = String::from(\"hello\");\n\n        &s\n    }\n```\n\nHere’s the error:\n\n```text\n    error[E0106]: missing lifetime specifier\n     --> main.rs:5:16\n      |\n    5 | fn dangle() -> &String {\n      |                ^ expected lifetime parameter\n      |\n      = help: this function's return type contains a borrowed value, but there is\n      no value for it to be borrowed from\n      = help: consider giving it a 'static lifetime\n```\n\nThis error message refers to a feature we haven’t covered yet: lifetimes. We’ll discuss lifetimes in detail in Chapter 10\\. But, if you disregard the parts about lifetimes, the message does contain the key to why this code is a problem:\n\n```text\n    this function's return type contains a borrowed value, but there is no value\n    for it to be borrowed from.\n```\n\nLet’s take a closer look at exactly what’s happening at each stage of our `dangle` code:\n\n```rust\n    fn dangle() -> &String { // dangle returns a reference to a String\n\n        let s = String::from(\"hello\"); // s is a new String\n\n        &s // we return a reference to the String, s\n    } // Here, s goes out of scope, and is dropped. Its memory goes away.\n      // Danger!\n```\n\nBecause `s` is created inside `dangle`, when the code of `dangle` is finished, `s` will be deallocated. But we tried to return a reference to it. That means this reference would be pointing to an invalid `String`. That’s no good! Rust won’t let us do this.\n\nThe solution here is to return the `String` directly:\n\n```rust\n    fn no_dangle() -> String {\n        let s = String::from(\"hello\");\n\n        s\n    }\n```\n\nThis works without any problems. Ownership is moved out, and nothing is deallocated.\n\n### The Rules of References\n\nLet’s recap what we’ve discussed about references:\n\n*   At any given time, you can have _either_ one mutable reference _or_ any number of immutable references.\n*   References must always be valid.\n\nNext, we’ll look at a different kind of reference: slices.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [References and Borrowing](https://doc.rust-lang.org/stable/book/ch04-02-references-and-borrowing.html#references-and-borrowing)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "The Slice Type",
          "files" : {
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// put code of your task here\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"the_slice_type\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## The Slice Type\n\nAnother data type that does not have ownership is the _slice_. Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection.\n\nHere’s a small programming problem: write a function that takes a string and returns the first word it finds in that string. If the function doesn’t find a space in the string, the whole string must be one word, so the entire string should be returned.\n\nLet’s think about the signature of this function:\n\n```rust\n    fn first_word(s: &String) -> ?\n```\n\nThis function, `first_word`, has a `&String` as a parameter. We don’t want ownership, so this is fine. But what should we return? We don’t really have a way to talk about _part_ of a string. However, we could return the index of the end of the word. Let’s try that, as shown in Listing 4-7.\n\n```rust\n    fn first_word(s: &String) -> usize {\n        let bytes = s.as_bytes();\n\n        for (i, &item) in bytes.iter().enumerate() {\n            if item == b' ' {\n                return i;\n            }\n        }\n\n        s.len()\n    }\n```\n\n##### Listing 4-7: The first_word function that returns a byte index value into the String parameter\n\nBecause we need to go through the `String` element by element and check whether a value is a space, we’ll convert our `String` to an array of bytes using the `as_bytes` method:\n\n```rust\n    let bytes = s.as_bytes();\n```\n\nNext, we create an iterator over the array of bytes using the `iter` method:\n\n```rust\n    for (i, &item) in bytes.iter().enumerate() {\n```\n\nWe’ll discuss iterators in more detail in Chapter 13. For now, know that `iter` is a method that returns each element in a collection and that `enumerate` wraps the result of `iter` and returns each element as part of a tuple instead. The first element of the tuple returned from `enumerate` is the index, and the second element is a reference to the element. This is a bit more convenient than calculating the index ourselves.\n\nBecause the `enumerate` method returns a tuple, we can use patterns to destructure that tuple, just like everywhere else in Rust. So in the `for` loop, we specify a pattern that has `i` for the index in the tuple and `&item` for the single byte in the tuple. Because we get a reference to the element from `.iter().enumerate()`, we use `&` in the pattern.\n\nInside the `for` loop, we search for the byte that represents the space by using the byte literal syntax. If we find a space, we return the position. Otherwise, we return the length of the string by using `s.len()`:\n\n```rust\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n```\n\nWe now have a way to find out the index of the end of the first word in the string, but there’s a problem. We’re returning a `usize` on its own, but it’s only a meaningful number in the context of the `&String`. In other words, because it’s a separate value from the `String`, there’s no guarantee that it will still be valid in the future. Consider the program in Listing 4-8 that uses the `first_word` function from Listing 4-7.\n\n```rust\n    fn main() {\n        let mut s = String::from(\"hello world\");\n\n        let word = first_word(&s); // word will get the value 5\n\n        s.clear(); // this empties the String, making it equal to \"\"\n\n        // word still has the value 5 here, but there's no more string that\n        // we could meaningfully use the value 5 with. word is now totally invalid!\n    }\n```\n\n##### Listing 4-8: Storing the result from calling the first_word function and then changing the String contents\n\nThis program compiles without any errors and would also do so if we used `word` after calling `s.clear()`. Because `word` isn’t connected to the state of `s` at all, `word` still contains the value `5`. We could use that value `5` with the variable `s` to try to extract the first word out, but this would be a bug because the contents of `s` have changed since we saved `5` in `word`.\n\nHaving to worry about the index in `word` getting out of sync with the data in `s` is tedious and error prone! Managing these indices is even more brittle if we write a `second_word` function. Its signature would have to look like this:\n\n```rust\n    fn second_word(s: &String) -> (usize, usize) {\n```\n\nNow we’re tracking a starting _and_ an ending index, and we have even more values that were calculated from data in a particular state but aren’t tied to that state at all. We now have three unrelated variables floating around that need to be kept in sync.\n\nLuckily, Rust has a solution to this problem: string slices.\n\n### String Slices\n\nA _string slice_ is a reference to part of a `String`, and it looks like this:\n\n```rust\n    let s = String::from(\"hello world\");\n\n    let hello = &s[0..5];\n    let world = &s[6..11];\n```\n\nThis is similar to taking a reference to the whole `String` but with the extra `[0..5]` bit. Rather than a reference to the entire `String`, it’s a reference to a portion of the `String`.\n\nWe can create slices using a range within brackets by specifying `[starting_index..ending_index]`, where `starting_index` is the first position in the slice and `ending_index` is one more than the last position in the slice. Internally, the slice data structure stores the starting position and the length of the slice, which corresponds to `ending_index` minus `starting_index`. So in the case of `let world = &s[6..11];`, `world` would be a slice that contains a pointer to the 7th byte of `s` with a length value of 5.\n\nFigure 4-6 shows this in a diagram.\n\n<img alt=\"world containing a pointer to the 6th byte of String s and a length 5\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-06.svg\" class=\"center\" style=\"width: 50%;\">\n\n##### Figure 4-6: String slice referring to part of a String\n\nWith Rust’s `..` range syntax, if you want to start at the first index (zero), you can drop the value before the two periods. In other words, these are equal:\n\n```rust\n    let s = String::from(\"hello\");\n\n    let slice = &s[0..2];\n    let slice = &s[..2];\n```\n\nBy the same token, if your slice includes the last byte of the `String`, you can drop the trailing number. That means these are equal:\n\n```rust\n    let s = String::from(\"hello\");\n\n    let len = s.len();\n\n    let slice = &s[3..len];\n    let slice = &s[3..];\n```\n\nYou can also drop both values to take a slice of the entire string. So these are equal:\n\n```rust\n    let s = String::from(\"hello\");\n\n    let len = s.len();\n\n    let slice = &s[0..len];\n    let slice = &s[..];\n```\n\n> Note: String slice range indices must occur at valid UTF-8 character boundaries. If you attempt to create a string slice in the middle of a multibyte character, your program will exit with an error. For the purposes of introducing string slices, we are assuming ASCII only in this section; a more thorough discussion of UTF-8 handling is in the [“Storing UTF-8 Encoded Text with Strings”](ch08-02-strings.html#storing-utf-8-encoded-text-with-strings) section of Chapter 8.\n\nWith all this information in mind, let’s rewrite `first_word` to return a slice. The type that signifies “string slice” is written as `&str`:\n\n```rust\n    fn first_word(s: &String) -> &str {\n        let bytes = s.as_bytes();\n\n        for (i, &item) in bytes.iter().enumerate() {\n            if item == b' ' {\n                return &s[0..i];\n            }\n        }\n\n        &s[..]\n    }\n```\n\nWe get the index for the end of the word in the same way as we did in Listing 4-7, by looking for the first occurrence of a space. When we find a space, we return a string slice using the start of the string and the index of the space as the starting and ending indices.\n\nNow when we call `first_word`, we get back a single value that is tied to the underlying data. The value is made up of a reference to the starting point of the slice and the number of elements in the slice.\n\nReturning a slice would also work for a `second_word` function:\n\n```rust\n    fn second_word(s: &String) -> &str {\n```\n\nWe now have a straightforward API that’s much harder to mess up, because the compiler will ensure the references into the `String` remain valid. Remember the bug in the program in Listing 4-8, when we got the index to the end of the first word but then cleared the string so our index was invalid? That code was logically incorrect but didn’t show any immediate errors. The problems would show up later if we kept trying to use the first word index with an emptied string. Slices make this bug impossible and let us know we have a problem with our code much sooner. Using the slice version of `first_word` will throw a compile-time error:\n\n```rust\n    fn main() {\n        let mut s = String::from(\"hello world\");\n\n        let word = first_word(&s);\n\n        s.clear(); // error!\n\n        println!(\"the first word is: {}\", word);\n    }\n```\n\nHere’s the compiler error:\n\n```text\n    error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n      --> src/main.rs:18:5\n       |\n    16 |     let word = first_word(&s);\n       |                           -- immutable borrow occurs here\n    17 |\n    18 |     s.clear(); // error!\n       |     ^^^^^^^^^ mutable borrow occurs here\n    19 |\n    20 |     println!(\"the first word is: {}\", word);\n       |                                       ---- immutable borrow later used here\n```\n\nRecall from the borrowing rules that if we have an immutable reference to something, we cannot also take a mutable reference. Because `clear` needs to truncate the `String`, it tries to take a mutable reference, which fails. Not only has Rust made our API easier to use, but it has also eliminated an entire class of errors at compile time!\n\n#### String Literals Are Slices\n\nRecall that we talked about string literals being stored inside the binary. Now that we know about slices, we can properly understand string literals:\n\n```rust\n    let s = \"Hello, world!\";\n```\n\nThe type of `s` here is `&str`: it’s a slice pointing to that specific point of the binary. This is also why string literals are immutable; `&str` is an immutable reference.\n\n#### String Slices as Parameters\n\nKnowing that you can take slices of literals and `String` values leads us to one more improvement on `first_word`, and that’s its signature:\n\n```rust\n    fn first_word(s: &String) -> &str {\n```\n\nA more experienced Rustacean would write the signature shown in Listing 4-9 instead because it allows us to use the same function on both `String` values and `&str` values.\n\n```rust\n    fn first_word(s: &str) -> &str {\n```\n\n##### Listing 4-9: Improving the first_word function by using a string slice for the type of the s parameter\n\nIf we have a string slice, we can pass that directly. If we have a `String`, we can pass a slice of the entire `String`. Defining a function to take a string slice instead of a reference to a `String` makes our API more general and useful without losing any functionality:\n\n```rust\n    fn main() {\n        let my_string = String::from(\"hello world\");\n\n        // first_word works on slices of `String`s\n        let word = first_word(&my_string[..]);\n\n        let my_string_literal = \"hello world\";\n\n        // first_word works on slices of string literals\n        let word = first_word(&my_string_literal[..]);\n\n        // Because string literals *are* string slices already,\n        // this works too, without the slice syntax!\n        let word = first_word(my_string_literal);\n    }\n```\n\n### Other Slices\n\nString slices, as you might imagine, are specific to strings. But there’s a more general slice type, too. Consider this array:\n\n```rust\n    let a = [1, 2, 3, 4, 5];\n```\n\nJust as we might want to refer to a part of a string, we might want to refer to part of an array. We’d do so like this:\n\n```rust\n    let a = [1, 2, 3, 4, 5];\n\n    let slice = &a[1..3];\n```\n\nThis slice has the type `&[i32]`. It works the same way as string slices do, by storing a reference to the first element and a length. You’ll use this kind of slice for all sorts of other collections. We’ll discuss these collections in detail when we talk about vectors in Chapter 8.\n\n## Summary\n\nThe concepts of ownership, borrowing, and slices ensure memory safety in Rust programs at compile time. The Rust language gives you control over your memory usage in the same way as other systems programming languages, but having the owner of data automatically clean up that data when the owner goes out of scope means you don’t have to write and debug extra code to get this control.\n\nOwnership affects how lots of other parts of Rust work, so we’ll talk about these concepts further throughout the rest of the book. Let’s move on to Chapter 5 and look at grouping pieces of data together in a `struct`.\n\n_You can refer to the following chapter in the Rust Programming Language Book:\n[The Slice Type](https://doc.rust-lang.org/stable/book/ch04-03-slices.html#the-slice-type)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Move Semantics 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"move_semantics1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let vec0 = Vec::new();\n\n    let vec1 = fill_vec(vec0);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n\n    vec1.push(88);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n}\n\nfn fill_vec(vec: Vec<i32>) -> Vec<i32> {\n    let mut vec = vec;\n\n    vec.push(22);\n    vec.push(44);\n    vec.push(66);\n\n    vec\n}\n"
            }
          },
          "description_text" : "## Task 1\n\nMake me compile!\n\n<div class=\"hint\">\n  So you've got the \"cannot borrow immutable local variable `vec1` as mutable\" error on line 8, right?\n  The fix for this is going to be adding one keyword, and the addition is NOT on line 8 where the error is.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Move Semantics 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"move_semantics2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let vec0 = Vec::new();\n\n    let mut vec1 = fill_vec(vec0);\n\n    // Do not change the following line!\n    println!(\"{} has length {} content `{:?}`\", \"vec0\", vec0.len(), vec0);\n\n    vec1.push(88);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n}\n\nfn fill_vec(vec: Vec<i32>) -> Vec<i32> {\n    let mut vec = vec;\n\n    vec.push(22);\n    vec.push(44);\n    vec.push(66);\n\n    vec\n}\n"
            }
          },
          "description_text" : "## Task 2\n\nMake me compile without changing line 7!\n\n<div class=\"hint\">\n  So `vec0` is being *moved* into the function `fill_vec` when we call it on line 4, which means it gets dropped at the end of `fill_vec`, which means we can't use `vec0` again on line 7 (or anywhere else in `main` after the `fill_vec` call for that matter).\n  We could fix this in a few ways, try them all!\n\n  1. Make another, separate version of the data that's in `vec0` and pass that to `fill_vec` instead.\n  2. Make `fill_vec` borrow its argument instead of taking ownership of it, and then copy the data within the function in order to return an owned `Vec<i32>`\n  3. Make `fill_vec` *mutably* borrow its argument (which will need to be mutable), modify it directly, then not return anything. Then you can get rid of `vec1` entirely -- note that this will change what gets printed by the first `println!`\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Move Semantics 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"move_semantics3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let vec0 = Vec::new();\n\n    let mut vec1 = fill_vec(vec0);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n\n    vec1.push(88);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n}\n\nfn fill_vec(vec: Vec<i32>) -> Vec<i32> {\n    vec.push(22);\n    vec.push(44);\n    vec.push(66);\n\n    vec\n}"
            }
          },
          "description_text" : "## Task 3\n\nMake me compile without adding new lines -- just changing existing lines! (no lines with multiple semicolons necessary!)\n\n<div class=\"hint\">\n  The difference between this one and the previous ones is that the first line of `fn fill_vec` that had `let mut vec = vec;` is no longer there.\n  You can, instead of adding that line back, add `mut` in one place that will change an existing binding to be a mutable binding instead of an immutable one :)\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Move Semantics 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"move_semantics4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let vec0 = Vec::new();\n\n    let mut vec1 = fill_vec(vec0);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n\n    vec1.push(88);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n}\n\n// `fill_vec()` no longer take `vec: Vec<i32>` as argument\nfn fill_vec() -> Vec<i32> {\n    let mut vec = vec;\n\n    vec.push(22);\n    vec.push(44);\n    vec.push(66);\n\n    vec\n}\n"
            }
          },
          "description_text" : "## Task 4\n\nRefactor this code so that instead of having `vec0` and creating the vector in `fn main`, we instead create it within `fn fill_vec` and transfer the freshly created vector from fill_vec to its caller.\n\n<div class=\"hint\">\n  Stop reading whenever you feel like you have enough direction :)\n  Or try doing one step and then fixing the compiler errors that result!\n\n  So the end goal is to:\n  - get rid of the first line in main that creates the new vector\n  - so then `vec0` doesn't exist, so we can't pass it to `fill_vec`\n  - we don't want to pass anything to `fill_vec`, so its signature should reflect that it does not take any arguments\n  - since we're not creating a new vec in `main` anymore, we need to create a new vec in `fill_vec`, similarly to the way we did in `main`\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Error Handling",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "# Error Handling\n\nRust’s commitment to reliability extends to error handling. Errors are a fact of life in software, so Rust has a number of features for handling situations in which something goes wrong. In many cases, Rust requires you to acknowledge the possibility of an error and take some action before your code will compile. This requirement makes your program more robust by ensuring that you’ll discover errors and handle them appropriately before you’ve deployed your code to production!\n\nRust groups errors into two major categories: _recoverable_ and _unrecoverable_ errors. For a recoverable error, such as a file not found error, it’s reasonable to report the problem to the user and retry the operation. Unrecoverable errors are always symptoms of bugs, like trying to access a location beyond the end of an array.\n\nMost languages don’t distinguish between these two kinds of errors and handle both in the same way, using mechanisms such as exceptions. Rust doesn’t have exceptions. Instead, it has the type `Result<T, E>` for recoverable errors and the `panic!` macro that stops execution when the program encounters an unrecoverable error. This chapter covers calling `panic!` first and then talks about returning `Result<T, E>` values. Additionally, we’ll explore considerations when deciding whether to try to recover from an error or to stop execution.\n\n## Unrecoverable Errors with panic!\n\nSometimes, bad things happen in your code, and there’s nothing you can do about it. In these cases, Rust has the `panic!` macro. When the `panic!` macro executes, your program will print a failure message, unwind and clean up the stack, and then quit. This most commonly occurs when a bug of some kind has been detected and it’s not clear to the programmer how to handle the error.\n\n\n> ### Unwinding the Stack or Aborting in Response to a Panic\n>\n> By default, when a panic occurs, the program starts _unwinding_, which means Rust walks back up the stack and cleans up the data from each function it encounters. But this walking back and cleanup is a lot of work. The alternative is to immediately _abort_, which ends the program without cleaning up. Memory that the program was using will then need to be cleaned up by the operating system. If in your project you need to make the resulting binary as small as possible, you can switch from unwinding to aborting upon a panic by adding `panic = 'abort'` to the appropriate `[profile]` sections in your _Cargo.toml_ file. For example, if you want to abort on panic in release mode, add this:\n> \n>     [profile.release]\n>     panic = 'abort'\n\nLet’s try calling `panic!` in a simple program:\n\n```rust\n    fn main() {\n        panic!(\"crash and burn\");\n    }\n```\n\nWhen you run the program, you’ll see something like this:\n\n```text\n  Compiling test_rust_project v0.1.0\n      Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n       Running `target/debug/test_rust_project`\n  thread 'main' panicked at 'crash and burn', src/main.rs:2:5\n```\n\nThe call to `panic!` causes the error message contained in the last two lines. The first line shows our panic message and the place in our source code where the panic occurred: _src/main.rs:2:5_ indicates that it’s the second line, fifth character of our _src/main.rs_ file.\n\nIn this case, the line indicated is part of our code, and if we go to that line, we see the `panic!` macro call. In other cases, the `panic!` call might be in code that our code calls, and the filename and line number reported by the error message will be someone else’s code where the `panic!` macro is called, not the line of our code that eventually led to the `panic!` call. We can use the backtrace of the functions the `panic!` call came from to figure out the part of our code that is causing the problem. We’ll discuss what a backtrace is in more detail next.\n\n### Using a `panic!` Backtrace\n\nLet’s look at another example to see what it’s like when a `panic!` call comes from a library because of a bug in our code instead of from our code calling the macro directly. Listing 9-1 has some code that attempts to access an element by index in a vector.\n\n```rust\n    fn main() {\n        let v = vec![1, 2, 3];\n\n        v[99];\n    }\n```\n\n##### Listing 9-1: Attempting to access an element beyond the end of a vector, which will cause a call to panic!\n\nHere, we’re attempting to access the 100th element of our vector (which is at index 99 because indexing starts at zero), but it has only 3 elements. In this situation, Rust will panic. Using `[]` is supposed to return an element, but if you pass an invalid index, there’s no element that Rust could return here that would be correct.\n\nOther languages, like C, will attempt to give you exactly what you asked for in this situation, even though it isn’t what you want: you’ll get whatever is at the location in memory that would correspond to that element in the vector, even though the memory doesn’t belong to the vector. This is called a _buffer overread_ and can lead to security vulnerabilities if an attacker is able to manipulate the index in such a way as to read data they shouldn’t be allowed to that is stored after the array.\n\nTo protect your program from this sort of vulnerability, if you try to read an element at an index that doesn’t exist, Rust will stop execution and refuse to continue. Let’s try it and see:\n\n```text\n   Compiling test_rust_project v0.1.0\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/test_rust_project`\nthread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libcore/slice/mod.rs:2686:10\nThis error points at a file we didn’t write, _libcore/slice/mod.rs_. That’s the implementation of `slice` in the Rust source code. The code that gets run when we use `[]` on our vector `v` is in _libcore/slice/mod.rs_, and that is where the `panic!` is actually happening.\n```\n\nThe next note line tells us that we can set the `RUST_BACKTRACE` environment variable to get a backtrace of exactly what happened to cause the error. A _backtrace_ is a list of all the functions that have been called to get to this point. Backtraces in Rust work as they do in other languages: the key to reading the backtrace is to start from the top and read until you see files you wrote. That’s the spot where the problem originated. The lines above the lines mentioning your files are code that your code called; the lines below are code that called your code. These lines might include core Rust code, standard library code, or crates that you’re using. Let’s try getting a backtrace by setting the `RUST_BACKTRACE` environment variable to any value except 0. Listing 9-2 shows output similar to what you’ll see.\n\n```text\nstack backtrace:\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\n             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39\n   1: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:71\n   2: std::panicking::default_hook::{{closure}}\n             at src/libstd/sys_common/backtrace.rs:59\n             at src/libstd/panicking.rs:197\n   3: std::panicking::default_hook\n             at src/libstd/panicking.rs:211\n   4: <std::panicking::begin_panic::PanicPayload<A> as core::panic::BoxMeUp>::get\n             at src/libstd/panicking.rs:474\n   5: std::panicking::continue_panic_fmt\n             at src/libstd/panicking.rs:381\n   6: std::panicking::try::do_call\n             at src/libstd/panicking.rs:308\n   7: <T as core::any::Any>::type_id\n             at src/libcore/panicking.rs:85\n   8: <T as core::any::Any>::type_id\n             at src/libcore/panicking.rs:61\n   9: <usize as core::slice::SliceIndex<[T]>>::index\n             at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libcore/slice/mod.rs:2686\n  10: core::slice::<impl core::ops::index::Index<I> for [T]>::index\n             at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libcore/slice/mod.rs:2543\n  11: <alloc::vec::Vec<T> as core::ops::index::Index<I>>::index\n             at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/liballoc/vec.rs:1677\n  12: test_rust_project::main\n             at src/main.rs:4\n  13: std::rt::lang_start::{{closure}}\n             at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libstd/rt.rs:64\n  14: std::panicking::try::do_call\n             at src/libstd/rt.rs:49\n             at src/libstd/panicking.rs:293\n  15: panic_unwind::dwarf::eh::read_encoded_pointer\n             at src/libpanic_unwind/lib.rs:87\n  16: <std::panicking::begin_panic::PanicPayload<A> as core::panic::BoxMeUp>::get\n             at src/libstd/panicking.rs:272\n             at src/libstd/panic.rs:388\n             at src/libstd/rt.rs:48\n  17: std::rt::lang_start\n             at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libstd/rt.rs:64\n  18: test_rust_project::main\n\nProcess finished with exit code 101\n```\n\n##### Listing 9-2: The backtrace generated by a call to panic! displayed when the environment variable RUST_BACKTRACE is set\n\nThat’s a lot of output! The exact output you see might be different depending on your operating system and Rust version. In order to get backtraces with this information, debug symbols must be enabled. Debug symbols are enabled by default when using `cargo build` or `cargo run` without the `--release` flag, as we have here.\n\nIn the output in Listing 9-2, line 12 of the backtrace points to the line in our project that’s causing the problem: line 4 of _src/main.rs_. If we don’t want our program to panic, the location pointed to by the first line mentioning a file we wrote is where we should start investigating. In Listing 9-1, where we deliberately wrote code that would panic in order to demonstrate how to use backtraces, the way to fix the panic is to not request an element at index 99 from a vector that only contains 3 items. When your code panics in the future, you’ll need to figure out what action the code is taking with what values to cause the panic and what the code should do instead.\n\nWe’ll come back to `panic!` and when we should and should not use `panic!` to handle error conditions in the [“To `panic!` or Not to `panic!`”](ch09-03-to-panic-or-not-to-panic.html#to-panic-or-not-to-panic) section later in this chapter. Next, we’ll look at how to recover from an error using `Result`.\n\n_You can refer to the following chapter in the Rust Programming Language Book:\n[Unrecoverable Errors with panic!](https://doc.rust-lang.org/book/ch09-01-unrecoverable-errors-with-panic.html#unrecoverable-errors-with-panic)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Recoverable Errors with Result",
          "files" : {
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// put code of your task here\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"recoverable_errors_with_result\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## Recoverable Errors with Result\n\nMost errors aren’t serious enough to require the program to stop entirely. Sometimes, when a function fails, it’s for a reason that you can easily interpret and respond to. For example, if you try to open a file and that operation fails because the file doesn’t exist, you might want to create the file instead of terminating the process.\n\nRecall from [“Handling Potential Failure with the `Result` Type”](ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-the-result-type) in Chapter 2 that the `Result` enum is defined as having two variants, `Ok` and `Err`, as follows:\n\n```rust\n    enum Result<T, E> {\n        Ok(T),\n        Err(E),\n    }\n```\n\nThe `T` and `E` are generic type parameters: we’ll discuss generics in more detail in Chapter 10\\. What you need to know right now is that `T` represents the type of the value that will be returned in a success case within the `Ok` variant, and `E` represents the type of the error that will be returned in a failure case within the `Err` variant. Because `Result` has these generic type parameters, we can use the `Result` type and the functions that the standard library has defined on it in many different situations where the successful value and error value we want to return may differ.\n\nLet’s call a function that returns a `Result` value because the function could fail. In Listing 9-3 we try to open a file.\n\n```rust\n    use std::fs::File;\n\n    fn main() {\n        let f = File::open(\"hello.txt\");\n    }\n```\n\n##### Listing 9-3: Opening a file\n\nHow do we know `File::open` returns a `Result`? We could look at the [standard library API documentation](../std/index.html), or we could ask the compiler! If we give `f` a type annotation that we know is _not_ the return type of the function and then try to compile the code, the compiler will tell us that the types don’t match. The error message will then tell us what the type of `f` _is_. Let’s try it! We know that the return type of `File::open` isn’t of type `u32`, so let’s change the `let f` statement to this:\n\n```rust\n    let f: u32 = File::open(\"hello.txt\");\n```\n\nAttempting to compile now gives us the following output:\n\n```text\n    error[E0308]: mismatched types\n     --> src/main.rs:4:18\n      |\n    4 |     let f: u32 = File::open(\"hello.txt\");\n      |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected u32, found enum\n    `std::result::Result`\n      |\n      = note: expected type `u32`\n                 found type `std::result::Result<std::fs::File, std::io::Error>`\n```\n\nThis tells us the return type of the `File::open` function is a `Result<T, E>`. The generic parameter `T` has been filled in here with the type of the success value, `std::fs::File`, which is a file handle. The type of `E` used in the error value is `std::io::Error`.\n\nThis return type means the call to `File::open` might succeed and return a file handle that we can read from or write to. The function call also might fail: for example, the file might not exist, or we might not have permission to access the file. The `File::open` function needs to have a way to tell us whether it succeeded or failed and at the same time give us either the file handle or error information. This information is exactly what the `Result` enum conveys.\n\nIn the case where `File::open` succeeds, the value in the variable `f` will be an instance of `Ok` that contains a file handle. In the case where it fails, the value in `f` will be an instance of `Err` that contains more information about the kind of error that happened.\n\nWe need to add to the code in Listing 9-3 to take different actions depending on the value `File::open` returns. Listing 9-4 shows one way to handle the `Result` using a basic tool, the `match` expression that we discussed in Chapter 6.\n\n```rust\n    use std::fs::File;\n\n    fn main() {\n        let f = File::open(\"hello.txt\");\n\n        let f = match f {\n            Ok(file) => file,\n            Err(error) => {\n                panic!(\"There was a problem opening the file: {:?}\", error)\n            },\n        };\n    }\n```\n\n##### Listing 9-4: Using a match expression to handle the Result variants that might be returned\n\nNote that, like the `Option` enum, the `Result` enum and its variants have been brought into scope by the prelude, so we don’t need to specify `Result::` before the `Ok` and `Err` variants in the `match` arms.\n\nHere we tell Rust that when the result is `Ok`, return the inner `file` value out of the `Ok` variant, and we then assign that file handle value to the variable `f`. After the `match`, we can use the file handle for reading or writing.\n\nThe other arm of the `match` handles the case where we get an `Err` value from `File::open`. In this example, we’ve chosen to call the `panic!` macro. If there’s no file named _hello.txt_ in our current directory and we run this code, we’ll see the following output from the `panic!` macro:\n\n```text\n    thread 'main' panicked at 'There was a problem opening the file: Error { repr:\n    Os { code: 2, message: \"No such file or directory\" } }', src/main.rs:9:12\n```\n\nAs usual, this output tells us exactly what has gone wrong.\n\n### Matching on Different Errors\n\nThe code in Listing 9-4 will `panic!` no matter why `File::open` failed. What we want to do instead is take different actions for different failure reasons: if `File::open` failed because the file doesn’t exist, we want to create the file and return the handle to the new file. If `File::open` failed for any other reason—for example, because we didn’t have permission to open the file—we still want the code to `panic!` in the same way as it did in Listing 9-4\\. Look at Listing 9-5, which adds an inner `match` expression.\n\n```rust\n    use std::fs::File;\n    use std::io::ErrorKind;\n\n    fn main() {\n        let f = File::open(\"hello.txt\");\n\n        let f = match f {\n            Ok(file) => file,\n            Err(error) => match error.kind() {\n                ErrorKind::NotFound => match File::create(\"hello.txt\") {\n                    Ok(fc) => fc,\n                    Err(e) => panic!(\"Tried to create file but there was a problem: {:?}\", e),\n                },\n                other_error => panic!(\"There was a problem opening the file: {:?}\", other_error),\n            },\n        };\n    }\n```\n\n##### Listing 9-5: Handling different kinds of errors in different ways\n\nThe type of the value that `File::open` returns inside the `Err` variant is `io::Error`, which is a struct provided by the standard library. This struct has a method `kind` that we can call to get an `io::ErrorKind` value. The enum `io::ErrorKind` is provided by the standard library and has variants representing the different kinds of errors that might result from an `io` operation. The variant we want to use is `ErrorKind::NotFound`, which indicates the file we’re trying to open doesn’t exist yet. So we match on `f`, but we also have an inner match on `error.kind()`.\n\nThe condition we want to check in the inner match is whether the value returned by `error.kind()` is the `NotFound` variant of the `ErrorKind` enum. If it is, we try to create the file with `File::create`. However, because `File::create` could also fail, we need a second arm in the inner `match` expression. When the file can’t be created, a different error message is printed. The second arm of the outer `match` stays the same, so the program panics on any error besides the missing file error.\n\nThat’s a lot of `match`! The `match` expression is very useful but also very much a primitive. In Chapter 13, you’ll learn about closures; the `Result<T, E>` type has many methods that accept a closure and are implemented using `match` expressions. Using those methods will make your code more concise. A more seasoned Rustacean might write this code instead of Listing 9-5:\n\n```rust\n    use std::fs::File;\n    use std::io::ErrorKind;\n\n    fn main() {\n        let f = File::open(\"hello.txt\").unwrap_or_else(|error| {\n            if error.kind() == ErrorKind::NotFound {\n                File::create(\"hello.txt\").unwrap_or_else(|error| {\n                    panic!(\"Tried to create file but there was a problem: {:?}\", error);\n                })\n            } else {\n                panic!(\"There was a problem opening the file: {:?}\", error);\n            }\n        });\n    }\n```\n\nAlthough this code has the same behavior as Listing 9-5, it doesn’t contain any `match` expressions and is cleaner to read. Come back to this example after you’ve read Chapter 13, and look up the `unwrap_or_else` method in the standard library documentation. Many more of these methods can clean up huge nested `match` expressions when you’re dealing with errors.\n\n### Shortcuts for Panic on Error: `unwrap` and `expect`\n\nUsing `match` works well enough, but it can be a bit verbose and doesn’t always communicate intent well. The `Result<T, E>` type has many helper methods defined on it to do various tasks. One of those methods, called `unwrap`, is a shortcut method that is implemented just like the `match` expression we wrote in Listing 9-4\\. If the `Result` value is the `Ok` variant, `unwrap` will return the value inside the `Ok`. If the `Result` is the `Err` variant, `unwrap` will call the `panic!` macro for us. Here is an example of `unwrap` in action:\n\n```rust\n    use std::fs::File;\n\n    fn main() {\n        let f = File::open(\"hello.txt\").unwrap();\n    }\n```\n\nIf we run this code without a _hello.txt_ file, we’ll see an error message from the `panic!` call that the `unwrap` method makes:\n\n```text\n    thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error {\n    repr: Os { code: 2, message: \"No such file or directory\" } }',\n    src/libcore/result.rs:906:4\n```\n\nAnother method, `expect`, which is similar to `unwrap`, lets us also choose the `panic!` error message. Using `expect` instead of `unwrap` and providing good error messages can convey your intent and make tracking down the source of a panic easier. The syntax of `expect` looks like this:\n\n```rust\n    use std::fs::File;\n\n    fn main() {\n        let f = File::open(\"hello.txt\").expect(\"Failed to open hello.txt\");\n    }\n```\n\nWe use `expect` in the same way as `unwrap`: to return the file handle or call the `panic!` macro. The error message used by `expect` in its call to `panic!` will be the parameter that we pass to `expect`, rather than the default `panic!` message that `unwrap` uses. Here’s what it looks like:\n\n```text\n    thread 'main' panicked at 'Failed to open hello.txt: Error { repr: Os { code:\n    2, message: \"No such file or directory\" } }', src/libcore/result.rs:906:4\n```\n\nBecause this error message starts with the text we specified, `Failed to open hello.txt`, it will be easier to find where in the code this error message is coming from. If we use `unwrap` in multiple places, it can take more time to figure out exactly which `unwrap` is causing the panic because all `unwrap` calls that panic print the same message.\n\n### Propagating Errors\n\nWhen you’re writing a function whose implementation calls something that might fail, instead of handling the error within this function, you can return the error to the calling code so that it can decide what to do. This is known as _propagating_ the error and gives more control to the calling code, where there might be more information or logic that dictates how the error should be handled than what you have available in the context of your code.\n\nFor example, Listing 9-6 shows a function that reads a username from a file. If the file doesn’t exist or can’t be read, this function will return those errors to the code that called this function.\n\n```rust\n    use std::io;\n    use std::io::Read;\n    use std::fs::File;\n\n    fn read_username_from_file() -> Result<String, io::Error> {\n        let f = File::open(\"hello.txt\");\n\n        let mut f = match f {\n            Ok(file) => file,\n            Err(e) => return Err(e),\n        };\n\n        let mut s = String::new();\n\n        match f.read_to_string(&mut s) {\n            Ok(_) => Ok(s),\n            Err(e) => Err(e),\n        }\n    }\n```\n\n##### Listing 9-6: A function that returns errors to the calling code using `match`\n\nThis function can be written in a much shorter way, but we’re going to start by doing a lot of it manually in order to explore error handling; at the end, we’ll show the shorter way. Let’s look at the return type of the function first: `Result<String, io::Error>`. This means the function is returning a value of the type `Result<T, E>` where the generic parameter `T` has been filled in with the concrete type `String` and the generic type `E` has been filled in with the concrete type `io::Error`. If this function succeeds without any problems, the code that calls this function will receive an `Ok` value that holds a `String`—the username that this function read from the file. If this function encounters any problems, the code that calls this function will receive an `Err` value that holds an instance of `io::Error` that contains more information about what the problems were. We chose `io::Error` as the return type of this function because that happens to be the type of the error value returned from both of the operations we’re calling in this function’s body that might fail: the `File::open` function and the `read_to_string` method.\n\nThe body of the function starts by calling the `File::open` function. Then we handle the `Result` value returned with a `match` similar to the `match` in Listing 9-4, only instead of calling `panic!` in the `Err` case, we return early from this function and pass the error value from `File::open` back to the calling code as this function’s error value. If `File::open` succeeds, we store the file handle in the variable `f` and continue.\n\nThen we create a new `String` in variable `s` and call the `read_to_string` method on the file handle in `f` to read the contents of the file into `s`. The `read_to_string` method also returns a `Result` because it might fail, even though `File::open` succeeded. So we need another `match` to handle that `Result`: if `read_to_string` succeeds, then our function has succeeded, and we return the username from the file that’s now in `s` wrapped in an `Ok`. If `read_to_string` fails, we return the error value in the same way that we returned the error value in the `match` that handled the return value of `File::open`. However, we don’t need to explicitly say `return`, because this is the last expression in the function.\n\nThe code that calls this code will then handle getting either an `Ok` value that contains a username or an `Err` value that contains an `io::Error`. We don’t know what the calling code will do with those values. If the calling code gets an `Err` value, it could call `panic!` and crash the program, use a default username, or look up the username from somewhere other than a file, for example. We don’t have enough information on what the calling code is actually trying to do, so we propagate all the success or error information upward for it to handle appropriately.\n\nThis pattern of propagating errors is so common in Rust that Rust provides the question mark operator `?` to make this easier.\n\n#### A Shortcut for Propagating Errors: the ? Operator\n\nListing 9-7 shows an implementation of `read_username_from_file` that has the same functionality as it had in Listing 9-6, but this implementation uses the `?` operator.\n\n```rust\n    use std::io;\n    use std::io::Read;\n    use std::fs::File;\n\n    fn read_username_from_file() -> Result<String, io::Error> {\n        let mut f = File::open(\"hello.txt\")?;\n        let mut s = String::new();\n        f.read_to_string(&mut s)?;\n        Ok(s)\n    }\n```\n\n##### Listing 9-7: A function that returns errors to the calling code using the ? operator\n\nThe `?` placed after a `Result` value is defined to work in almost the same way as the `match` expressions we defined to handle the `Result` values in Listing 9-6. If the value of the `Result` is an `Ok`, the value inside the `Ok` will get returned from this expression, and the program will continue. If the value is an `Err`, the `Err` will be returned from the whole function as if we had used the `return` keyword so the error value gets propagated to the calling code.\n\nThere is a difference between what the `match` expression from Listing 9-6 and the `?` operator do: error values that have the `?` operator called on them go through the `from` function, defined in the `From` trait in the standard library, which is used to convert errors from one type into another. When the `?` operator calls the `from` function, the error type received is converted into the error type defined in the return type of the current function. This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons. As long as each error type implements the `from` function to define how to convert itself to the returned error type, the `?` operator takes care of the conversion automatically.\n\nIn the context of Listing 9-7, the `?` at the end of the `File::open` call will return the value inside an `Ok` to the variable `f`. If an error occurs, the `?` operator will return early out of the whole function and give any `Err` value to the calling code. The same thing applies to the `?` at the end of the `read_to_string` call.\n\nThe `?` operator eliminates a lot of boilerplate and makes this function’s implementation simpler. We could even shorten this code further by chaining method calls immediately after the `?`, as shown in Listing 9-8.\n\n```rust\n    use std::io;\n    use std::io::Read;\n    use std::fs::File;\n\n    fn read_username_from_file() -> Result<String, io::Error> {\n        let mut s = String::new();\n\n        File::open(\"hello.txt\")?.read_to_string(&mut s)?;\n\n        Ok(s)\n    }\n```\n\n##### Listing 9-8: Chaining method calls after the ? operator\n\nWe’ve moved the creation of the new `String` in `s` to the beginning of the function; that part hasn’t changed. Instead of creating a variable `f`, we’ve chained the call to `read_to_string` directly onto the result of `File::open(\"hello.txt\")?`. We still have a `?` at the end of the `read_to_string` call, and we still return an `Ok` value containing the username in `s` when both `File::open` and `read_to_string` succeed rather than returning errors. The functionality is again the same as in Listing 9-6 and Listing 9-7; this is just a different, more ergonomic way to write it.\n\nSpeaking of different ways to write this function, Listing 9-9 shows that there’s a way to make this even shorter.\n\n```rust\n    use std::io;\n    use std::fs;\n\n    fn read_username_from_file() -> Result<String, io::Error> {\n        fs::read_to_string(\"hello.txt\")\n    }\n```\n\n##### Listing 9-9: Using fs::read_to_string instead of opening and then reading the file\n\nReading a file into a string is a fairly common operation, so Rust provides the convenient `fs::read_to_string` function that opens the file, creates a new `String`, reads the contents of the file, puts the contents into that `String`, and returns it. Of course, using `fs::read_to_string` doesn’t give us the opportunity to explain all the error handling, so we did it the longer way first.\n\n#### The ? Operator Can Only Be Used in Functions That Return Result\n\nThe `?` operator can only be used in functions that have a return type of `Result`, because it is defined to work in the same way as the `match` expression we defined in Listing 9-6\\. The part of the `match` that requires a return type of `Result` is `return Err(e)`, so the return type of the function must be a `Result` to be compatible with this `return`.\n\nLet’s look at what happens if we use the `?` operator in the `main` function, which you’ll recall has a return type of `()`:\n\n```rust\n    use std::fs::File;\n\n    fn main() {\n        let f = File::open(\"hello.txt\")?;\n    }\n```\n\nWhen we compile this code, we get the following error message:\n\n```text\n    error[E0277]: the `?` operator can only be used in a function that returns\n    `Result` or `Option` (or another type that implements `std::ops::Try`)\n     --> src/main.rs:4:13\n      |\n    4 |     let f = File::open(\"hello.txt\")?;\n      |             ^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a\n      function that returns `()`\n      |\n      = help: the trait `std::ops::Try` is not implemented for `()`\n      = note: required by `std::ops::Try::from_error`\n```\n\nThis error points out that we’re only allowed to use the `?` operator in a function that returns `Result<T, E>`. When you’re writing code in a function that doesn’t return `Result<T, E>`, and you want to use `?` when you call other functions that return `Result<T, E>`, you have two choices to fix this problem. One technique is to change the return type of your function to be `Result<T, E>` if you have no restrictions preventing that. The other technique is to use a `match` or one of the `Result<T, E>` methods to handle the `Result<T, E>` in whatever way is appropriate.\n\nThe `main` function is special, and there are restrictions on what its return type must be. One valid return type for main is `()`, and conveniently, another valid return type is `Result<T, E>`, as shown here:\n\n```rust\n    use std::error::Error;\n    use std::fs::File;\n\n    fn main() -> Result<(), Box<dyn Error>> {\n        let f = File::open(\"hello.txt\")?;\n\n        Ok(())\n    }\n```\n\nThe `Box<dyn Error>` type is called a _trait object_, which we’ll talk about in the [“Using Trait Objects that Allow for Values of Different Types”](ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) section in Chapter 17\\. For now, you can read `Box<dyn Error>` to mean “any kind of error.” Using `?` in a `main` function with this return type is allowed.\n\nNow that we’ve discussed the details of calling `panic!` or returning `Result`, let’s return to the topic of how to decide which is appropriate to use in which cases.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Recoverable Errors with Result](https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#recoverable-errors-with-result)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Generic Data Types",
          "files" : {
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// put code of your task here\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"generic_data_types\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## Generic Data Types\n\nWe can use generics to create definitions for items like function signatures or structs, which we can then use with many different concrete data types. Let’s first look at how to define functions, structs, enums, and methods using generics. Then we’ll discuss how generics affect code performance.\n\n### In Function Definitions\n\nWhen defining a function that uses generics, we place the generics in the signature of the function where we would usually specify the data types of the parameters and return value. Doing so makes our code more flexible and provides more functionality to callers of our function while preventing code duplication.\n\nContinuing with our `largest` function, Listing 10-4 shows two functions that both find the largest value in a slice.\n\n```rust\n    fn largest_i32(list: &[i32]) -> i32 {\n        let mut largest = list[0];\n\n        for &item in list.iter() {\n            if item > largest {\n                largest = item;\n            }\n        }\n\n        largest\n    }\n\n    fn largest_char(list: &[char]) -> char {\n        let mut largest = list[0];\n\n        for &item in list.iter() {\n            if item > largest {\n                largest = item;\n            }\n        }\n\n        largest\n    }\n\n    fn main() {\n        let number_list = vec![34, 50, 25, 100, 65];\n\n        let result = largest_i32(&number_list);\n        println!(\"The largest number is {}\", result);\n\n        let char_list = vec!['y', 'm', 'a', 'q'];\n\n        let result = largest_char(&char_list);\n        println!(\"The largest char is {}\", result);\n    }\n```\n\n##### Listing 10-4: Two functions that differ only in their names and the types in their signatures\n\nThe `largest_i32` function is the one we extracted in Listing 10-3 that finds the largest `i32` in a slice. The `largest_char` function finds the largest `char` in a slice. The function bodies have the same code, so let’s eliminate the duplication by introducing a generic type parameter in a single function.\n\nTo parameterize the types in the new function we’ll define, we need to name the type parameter, just as we do for the value parameters to a function. You can use any identifier as a type parameter name. But we’ll use `T` because, by convention, parameter names in Rust are short, often just a letter, and Rust’s type-naming convention is CamelCase. Short for “type,” `T` is the default choice of most Rust programmers.\n\nWhen we use a parameter in the body of the function, we have to declare the parameter name in the signature so the compiler knows what that name means. Similarly, when we use a type parameter name in a function signature, we have to declare the type parameter name before we use it. To define the generic `largest` function, place type name declarations inside angle brackets, `<>`, between the name of the function and the parameter list, like this:\n\n```rust\n    fn largest<T>(list: &[T]) -> T {\n```\n\nWe read this definition as: the function `largest` is generic over some type `T`. This function has one parameter named `list`, which is a slice of values of type `T`. The `largest` function will return a value of the same type `T`.\n\nListing 10-5 shows the combined `largest` function definition using the generic data type in its signature. The listing also shows how we can call the function with either a slice of `i32` values or `char` values. Note that this code won’t compile yet, but we’ll fix it later in this chapter.\n\n```rust\n    fn largest<T>(list: &[T]) -> T {\n        let mut largest = list[0];\n\n        for &item in list.iter() {\n            if item > largest {\n                largest = item;\n            }\n        }\n\n        largest\n    }\n\n    fn main() {\n        let number_list = vec![34, 50, 25, 100, 65];\n\n        let result = largest(&number_list);\n        println!(\"The largest number is {}\", result);\n\n        let char_list = vec!['y', 'm', 'a', 'q'];\n\n        let result = largest(&char_list);\n        println!(\"The largest char is {}\", result);\n    }\n```\n\n##### Listing 10-5: A definition of the largest function that uses generic type parameters but doesn’t compile yet\n\nIf we compile this code right now, we’ll get this error:\n\n```text\n    error[E0369]: binary operation `>` cannot be applied to type `T`\n     --> src/main.rs:5:12\n      |\n    5 |         if item > largest {\n      |            ^^^^^^^^^^^^^^\n      |\n      = note: an implementation of `std::cmp::PartialOrd` might be missing for `T`\n```\n\nThe note mentions `std::cmp::PartialOrd`, which is a _trait_. We’ll talk about traits in the next section. For now, this error states that the body of `largest` won’t work for all possible types that `T` could be. Because we want to compare values of type `T` in the body, we can only use types whose values can be ordered. To enable comparisons, the standard library has the `std::cmp::PartialOrd` trait that you can implement on types (see Appendix C for more on this trait). You’ll learn how to specify that a generic type has a particular trait in the [“Traits as Parameters”](ch10-02-traits.html#traits-as-parameters) section, but let’s first explore other ways of using generic type parameters.\n\n### In Struct Definitions\n\nWe can also define structs to use a generic type parameter in one or more fields using the `<>` syntax. Listing 10-6 shows how to define a `Point<T>` struct to hold `x` and `y` coordinate values of any type.\n\n```rust\n    struct Point<T> {\n        x: T,\n        y: T,\n    }\n\n    fn main() {\n        let integer = Point { x: 5, y: 10 };\n        let float = Point { x: 1.0, y: 4.0 };\n    }\n```\n\n##### Listing 10-6: A Point<T> struct that holds x and y values of type T\n\nThe syntax for using generics in struct definitions is similar to that used in function definitions. First, we declare the name of the type parameter inside angle brackets just after the name of the struct. Then we can use the generic type in the struct definition where we would otherwise specify concrete data types.\n\nNote that because we’ve used only one generic type to define `Point<T>`, this definition says that the `Point<T>` struct is generic over some type `T`, and the fields `x` and `y` are _both_ that same type, whatever that type may be. If we create an instance of a `Point<T>` that has values of different types, as in Listing 10-7, our code won’t compile.\n\n```rust\n    struct Point<T> {\n        x: T,\n        y: T,\n    }\n\n    fn main() {\n        let wont_work = Point { x: 5, y: 4.0 };\n    }\n```\n\n##### Listing 10-7: The fields x and y must be the same type because both have the same generic data type T.\n\nIn this example, when we assign the integer value 5 to `x`, we let the compiler know that the generic type `T` will be an integer for this instance of `Point<T>`. Then when we specify 4.0 for `y`, which we’ve defined to have the same type as `x`, we’ll get a type mismatch error like this:\n\n```text\n    error[E0308]: mismatched types\n     --> src/main.rs:7:38\n      |\n    7 |     let wont_work = Point { x: 5, y: 4.0 };\n      |                                      ^^^ expected integral variable, found\n    floating-point variable\n      |\n      = note: expected type `{integer}`\n                 found type `{float}`\n```\n\nTo define a `Point` struct where `x` and `y` are both generics but could have different types, we can use multiple generic type parameters. For example, in Listing 10-8, we can change the definition of `Point` to be generic over types `T` and `U` where `x` is of type `T` and `y` is of type `U`.\n\n```rust\n    struct Point<T, U> {\n        x: T,\n        y: U,\n    }\n\n    fn main() {\n        let both_integer = Point { x: 5, y: 10 };\n        let both_float = Point { x: 1.0, y: 4.0 };\n        let integer_and_float = Point { x: 5, y: 4.0 };\n    }\n```\n\n##### Listing 10-8: A Point<T, U> generic over two types so that x and y can be values of different types\n\nNow all the instances of `Point` shown are allowed! You can use as many generic type parameters in a definition as you want, but using more than a few makes your code hard to read. When you need lots of generic types in your code, it could indicate that your code needs restructuring into smaller pieces.\n\n### In Enum Definitions\n\nAs we did with structs, we can define enums to hold generic data types in their variants. Let’s take another look at the `Option<T>` enum that the standard library provides, which we used in Chapter 6:\n\n```rust\n    enum Option<T> {\n        Some(T),\n        None,\n    }\n```\n\nThis definition should now make more sense to you. As you can see, `Option<T>` is an enum that is generic over type `T` and has two variants: `Some`, which holds one value of type `T`, and a `None` variant that doesn’t hold any value. By using the `Option<T>` enum, we can express the abstract concept of having an optional value, and because `Option<T>` is generic, we can use this abstraction no matter what the type of the optional value is.\n\nEnums can use multiple generic types as well. The definition of the `Result` enum that we used in Chapter 9 is one example:\n\n```rust\n    enum Result<T, E> {\n        Ok(T),\n        Err(E),\n    }\n```\n\nThe `Result` enum is generic over two types, `T` and `E`, and has two variants: `Ok`, which holds a value of type `T`, and `Err`, which holds a value of type `E`. This definition makes it convenient to use the `Result` enum anywhere we have an operation that might succeed (return a value of some type `T`) or fail (return an error of some type `E`). In fact, this is what we used to open a file in Listing 9-3, where `T` was filled in with the type `std::fs::File` when the file was opened successfully and `E` was filled in with the type `std::io::Error` when there were problems opening the file.\n\nWhen you recognize situations in your code with multiple struct or enum definitions that differ only in the types of the values they hold, you can avoid duplication by using generic types instead.\n\n### In Method Definitions\n\nWe can implement methods on structs and enums (as we did in Chapter 5) and use generic types in their definitions, too. Listing 10-9 shows the `Point<T>` struct we defined in Listing 10-6 with a method named `x` implemented on it.\n\n```rust\n    struct Point<T> {\n        x: T,\n        y: T,\n    }\n\n    impl<T> Point<T> {\n        fn x(&self) -> &T {\n            &self.x\n        }\n    }\n\n    fn main() {\n        let p = Point { x: 5, y: 10 };\n\n        println!(\"p.x = {}\", p.x());\n    }\n```\n\n##### Listing 10-9: Implementing a method named x on the Point<T> struct that will return a reference to the x field of type T\n\nHere, we’ve defined a method named `x` on `Point<T>` that returns a reference to the data in the field `x`.\n\nNote that we have to declare `T` just after `impl` so we can use it to specify that we’re implementing methods on the type `Point<T>`. By declaring `T` as a generic type after `impl`, Rust can identify that the type in the angle brackets in `Point` is a generic type rather than a concrete type.\n\nWe could, for example, implement methods only on `Point<f32>` instances rather than on `Point<T>` instances with any generic type. In Listing 10-10 we use the concrete type `f32`, meaning we don’t declare any types after `impl`.\n\n```rust\n    impl Point<f32> {\n        fn distance_from_origin(&self) -> f32 {\n            (self.x.powi(2) + self.y.powi(2)).sqrt()\n        }\n    }\n```\n\n##### Listing 10-10: An impl block that only applies to a struct with a particular concrete type for the generic type parameter T\n\nThis code means the type `Point<f32>` will have a method named `distance_from_origin` and other instances of `Point<T>` where `T` is not of type `f32` will not have this method defined. The method measures how far our point is from the point at coordinates (0.0, 0.0) and uses mathematical operations that are available only for floating point types.\n\nGeneric type parameters in a struct definition aren’t always the same as those you use in that struct’s method signatures. For example, Listing 10-11 defines the method `mixup` on the `Point<T, U>` struct from Listing 10-8\\. The method takes another `Point` as a parameter, which might have different types from the `self` `Point` we’re calling `mixup` on. The method creates a new `Point` instance with the `x` value from the `self` `Point` (of type `T`) and the `y` value from the passed-in `Point` (of type `W`).\n\n```rust\n    struct Point<T, U> {\n        x: T,\n        y: U,\n    }\n\n    impl<T, U> Point<T, U> {\n        fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {\n            Point {\n                x: self.x,\n                y: other.y,\n            }\n        }\n    }\n\n    fn main() {\n        let p1 = Point { x: 5, y: 10.4 };\n        let p2 = Point { x: \"Hello\", y: 'c'};\n\n        let p3 = p1.mixup(p2);\n\n        println!(\"p3.x = {}, p3.y = {}\", p3.x, p3.y);\n    }\n```\n\n##### Listing 10-11: A method that uses different generic types from its struct’s definition\n\nIn `main`, we’ve defined a `Point` that has an `i32` for `x` (with value `5`) and an `f64` for `y` (with value `10.4`). The `p2` variable is a `Point` struct that has a string slice for `x` (with value `\"Hello\"`) and a `char` for `y` (with value `c`). Calling `mixup` on `p1` with the argument `p2` gives us `p3`, which will have an `i32` for `x`, because `x` came from `p1`. The `p3` variable will have a `char` for `y`, because `y` came from `p2`. The `println!` macro call will print `p3.x = 5, p3.y = c`.\n\nThe purpose of this example is to demonstrate a situation in which some generic parameters are declared with `impl` and some are declared with the method definition. Here, the generic parameters `T` and `U` are declared after `impl`, because they go with the struct definition. The generic parameters `V` and `W` are declared after `fn mixup`, because they’re only relevant to the method.\n\n### Performance of Code Using Generics\n\nYou might be wondering whether there is a runtime cost when you’re using generic type parameters. The good news is that Rust implements generics in such a way that your code doesn’t run any slower using generic types than it would with concrete types.\n\nRust accomplishes this by performing monomorphization of the code that is using generics at compile time. _Monomorphization_ is the process of turning generic code into specific code by filling in the concrete types that are used when compiled.\n\nIn this process, the compiler does the opposite of the steps we used to create the generic function in Listing 10-5: the compiler looks at all the places where generic code is called and generates code for the concrete types the generic code is called with.\n\nLet’s look at how this works with an example that uses the standard library’s `Option<T>` enum:\n\n```rust\n    let integer = Some(5);\n    let float = Some(5.0);\n```\n\nWhen Rust compiles this code, it performs monomorphization. During that process, the compiler reads the values that have been used in `Option<T>` instances and identifies two kinds of `Option<T>`: one is `i32` and the other is `f64`. As such, it expands the generic definition of `Option<T>` into `Option_i32` and `Option_f64`, thereby replacing the generic definition with the specific ones.\n\nThe monomorphized version of the code looks like the following. The generic `Option<T>` is replaced with the specific definitions created by the compiler:\n\n```rust\n    enum Option_i32 {\n        Some(i32),\n        None,\n    }\n\n    enum Option_f64 {\n        Some(f64),\n        None,\n    }\n\n    fn main() {\n        let integer = Option_i32::Some(5);\n        let float = Option_f64::Some(5.0);\n    }\n```\n\nBecause Rust compiles generic code into code that specifies the type in each instance, we pay no runtime cost for using generics. When the code runs, it performs just as it would if we had duplicated each definition by hand. The process of monomorphization makes Rust’s generics extremely efficient at runtime.\n\nYou can refer to the following chapter in the Rust Programming Language Book: _[Generic Data Types](https://doc.rust-lang.org/book/ch10-01-syntax.html#generic-data-types)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Errors 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"errors1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "pub fn generate_nametag_text(name: String) -> Option<String> {\n    if name.len() > 0 {\n        Some(format!(\"Hi! My name is {}\", name))\n    } else {\n        // Empty names aren't allowed.\n        None\n    }\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use errors1::generate_nametag_text;\n\n#[test]\nfn generates_nametag_text_for_a_nonempty_name() {\n    assert_eq!(\n        generate_nametag_text(\"Beyoncé\".into()),\n        Some(\"Hi! My name is Beyoncé\".into())\n    );\n}\n\n#[test]\nfn explains_why_generating_nametag_text_fails() {\n    assert_eq!(\n        generate_nametag_text(\"\".into()),\n        Err(\"`name` was empty; it must be nonempty.\".into())\n    );\n}\n"
            }
          },
          "description_text" : "## Task 1\n\nThis function refuses to generate text to be printed on a nametag if you pass it an empty string.\nIt'd be nicer if it explained what the problem was, instead of just sometimes returning `None`.\nThe 2nd test currently does not compile or pass, but it illustrates the behavior we would like this function to have.\n\n<div class=\"hint\">\n  `Err` is one of the variants of `Result`, so what the 2nd test is saying is that `generate_nametag_text` should return a `Result` instead of an `Option`.\n\n  To make this change, you'll need to:\n  - update the return type in the function signature to be a Result that could be the variants `Ok(String)` and `Err(String)`\n  - change the body of the function to return `Ok(stuff)` where it currently returns `Some(stuff)`\n  - change the body of the function to return `Err(error message)` where it currently returns `None`\n  - change the first test to expect `Ok(stuff)` where it currently expects `Some(stuff)`.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Errors 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"errors2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "use std::num::ParseIntError;\n\npub fn total_cost(item_quantity: &str) -> Result<i32, ParseIntError> {\n    let processing_fee = 1;\n    let cost_per_item = 5;\n    let qty = item_quantity.parse::<i32>();\n\n    Ok(qty * cost_per_item + processing_fee)\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use errors2::total_cost;\n\n#[test]\nfn item_quantity_is_a_valid_number() {\n    assert_eq!(total_cost(\"34\"), Ok(171));\n}\n\n#[test]\nfn item_quantity_is_an_invalid_number() {\n    assert_eq!(\n        total_cost(\"beep boop\").unwrap_err().to_string(),\n        \"invalid digit found in string\"\n    );\n}\n"
            }
          },
          "description_text" : "## Task 2\n\nSay we're writing a game where you can buy items with tokens.\nAll items cost 5 tokens, and whenever you purchase items there is a processing fee of 1 token.\nA player of the game will type in how many items they want to buy, and the `total_cost` function will calculate the total number of tokens.\nSince the player typed in the quantity, though, we get it as a string -- and they might have typed anything, not just numbers!\n\nRight now, this function isn't handling the error case at all (and isn't handling the success case properly either).\nWhat we want to do is: if we call the `parse` function on a string that is not a number, that function will return a `ParseIntError`, and in that case, we want to immediately return that error from our function and not try to multiply and add.\n\nThere are at least two ways to implement this that are both correct -- but one is a lot shorter!\nScroll down for hints to both ways.\n\n<div class=\"hint\">\n  One way to handle this is using a `match` statement on `item_quantity.parse::<i32>()` where the cases are `Ok(something)` and `Err(something)`.\n  This pattern is very common in Rust, though, so there's a `?` operator that does pretty much what you would make that match statement do for you!\n  Take a look at this section of the Error Handling chapter:\n  https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\n  and give it a try!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Errors 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"errors3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "use std::num::ParseIntError;\n\nfn main() {\n    let mut tokens = 100;\n    let pretend_user_input = \"8\";\n\n    let cost = total_cost(pretend_user_input)?;\n\n    if cost > tokens {\n        println!(\"You can't afford that many!\");\n    } else {\n        tokens -= cost;\n        println!(\"You now have {} tokens.\", tokens);\n    }\n}\n\nfn total_cost(item_quantity: &str) -> Result<i32, ParseIntError> {\n    let processing_fee = 1;\n    let cost_per_item = 5;\n    let qty = item_quantity.parse::<i32>()?;\n\n    Ok(qty * cost_per_item + processing_fee)\n}\n"
            }
          },
          "description_text" : "## Task 3\n\nThis is a program that is trying to use a completed version of the `total_cost` function from the previous exercise.\nIt's not working though -- we can't use the `?` operator in the `main()` function! Why not?\n\n<div class=\"hint\">\n  Since the `?` operator returns an `Err` early if the thing it's trying to do fails, you can only use the `?` operator in functions that have a `Result` as their return type.\n\n  Hence the error that you get if you run this code is:\n\n  ```\n  error[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n  ```\n\n  So we have to use another way of handling a `Result` within `main`.\n\n  Decide what we should do if `pretend_user_input` has a string value that does not parse to an integer, and implement that instead of using the `?` operator.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Errors n",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"errorsn\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "use std::error;\nuse std::fmt;\nuse std::io;\n\n// PositiveNonzeroInteger is a struct defined below the tests.\npub fn read_and_validate(b: &mut io::BufRead) -> Result<PositiveNonzeroInteger, ???> {\n    let mut line = String::new();\n    b.read_line(&mut line);\n    let num: i64 = line.trim().parse();\n    let answer = PositiveNonzeroInteger::new(num);\n    answer\n}\n\n// This is a test helper function that turns a &str into a BufReader.\npub fn test_with_str(s: &str) -> Result<PositiveNonzeroInteger, Box<error::Error>> {\n    let mut b = io::BufReader::new(s.as_bytes());\n    read_and_validate(&mut b)\n}\n\n#[derive(PartialEq, Debug)]\npub struct PositiveNonzeroInteger(u64);\n\nimpl PositiveNonzeroInteger {\n    pub fn new(value: i64) -> Result<PositiveNonzeroInteger, CreationError> {\n        if value == 0 {\n            Err(CreationError::Zero)\n        } else if value < 0 {\n            Err(CreationError::Negative)\n        } else {\n            Ok(PositiveNonzeroInteger(value as u64))\n        }\n    }\n}\n\n#[derive(PartialEq, Debug)]\npub enum CreationError {\n    Negative,\n    Zero,\n}\n\nimpl fmt::Display for CreationError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.write_str((self as &error::Error).description())\n    }\n}\n\nimpl error::Error for CreationError {\n    fn description(&self) -> &str {\n        match *self {\n            CreationError::Negative => \"Negative\",\n            CreationError::Zero => \"Zero\",\n        }\n    }\n}"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use errorsn::{read_and_validate, test_with_str, CreationError, PositiveNonzeroInteger};\nuse std::error;\nuse std::io;\n\n#[test]\nfn test_success() {\n    let x = test_with_str(\"42\\n\");\n    assert_eq!(PositiveNonzeroInteger(42), x.unwrap());\n}\n\n#[test]\nfn test_not_num() {\n    let x = test_with_str(\"eleven billion\\n\");\n    assert!(x.is_err());\n}\n\n#[test]\nfn test_non_positive() {\n    let x = test_with_str(\"-40\\n\");\n    assert!(x.is_err());\n}\n\n#[test]\nfn test_ioerror() {\n    struct Broken;\n    impl io::Read for Broken {\n        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {\n            Err(io::Error::new(io::ErrorKind::BrokenPipe, \"uh-oh!\"))\n        }\n    }\n    let mut b = io::BufReader::new(Broken);\n    assert!(read_and_validate(&mut b).is_err());\n    assert_eq!(\"uh-oh!\", read_and_validate(&mut b).unwrap_err().to_string());\n}\n\n#[test]\nfn test_positive_nonzero_integer_creation() {\n    assert!(PositiveNonzeroInteger::new(10).is_ok());\n    assert_eq!(\n        Err(CreationError::Negative),\n        PositiveNonzeroInteger::new(-10)\n    );\n    assert_eq!(Err(CreationError::Zero), PositiveNonzeroInteger::new(0));\n}\n"
            }
          },
          "description_text" : "## Task 4\n\nThis is a bigger error exercise than the previous ones!\nYou can do it! :)\n\nEdit the `read_and_validate` function so that it compiles and passes the tests... so many things could go wrong!\n\n- Reading from stdin could produce an io::Error\n- Parsing the input could produce a num::ParseIntError\n- Validating the input could produce a CreationError (defined below)\n\nHow can we lump these errors into one general error?\nThat is, what type goes where the question marks are, and how do we return that type from the body of read_and_validate?\n\n<div class=\"hint\">\n  To figure out what type should go where the ??? is, take a look at the test helper function `test_with_str`, since it returns whatever `read_and_validate` returns and`test_with_str` has its signature fully specified.\n</div>\n\n<div class=\"hint\">\n  There are three places in `read_and_validate` that we call a function that returns a `Result` (that is, the functions might fail).\n\n  Apply the `?` operator on those calls so that we return immediately from `read_and_validate` if those function calls fail.\n</div>\n\n<div class=\"hint\">\n  Under the hood, the `?` operator calls `From::from` on the error value to convert it to a boxed trait object, a Box<error::Error>, which is polymorphic -- that means that lots of different kinds of errors can be returned from the same function because all errors act the same since they all implement the `error::Error` trait.\n\n  Check out this section of the book:\n  https://doc.rust-lang.org/stable/book/second-edition/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\n</div>\n\n<div class=\"hint\">\n  Note that because the `?` operator returns the *unwrapped* value in the `Ok` case, if we want to return a `Result` from `read_and_validate` for *its* success case, we'll have to rewrap a value that we got from the return value of a `?`ed call in an `Ok` -- this will look like `Ok(something)`.\n</div>\n\n<div class=\"hint\">\n  `Result`s must be \"used\", that is, you'll get a warning if you don't handle a `Result` that you get in your function.\n\n  Read more about that in the `std::result` module docs:\n  https://doc.rust-lang.org/std/result/#results-must-be-used\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Option 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"option1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let mut list = vec![3];\n\n    let last = list.pop().unwrap();\n    println!(\"The last item in the list is {:?}\", last);\n\n    let second_to_last = list.pop().unwrap();\n    println!(\n        \"The second-to-last item in the list is {:?}\",\n        second_to_last\n    );\n}\n"
            }
          },
          "description_text" : "## Task 5\n\nThis example panics because the second time it calls `pop`, the `vec` is empty, so `pop` returns `None`, and `unwrap` panics if it's called on `None`.\nHandle this in a more graceful way than calling `unwrap`!\n\n<div class=\"hint\">\n  Try using a `match` statement where the arms are `Some(thing)` and `None`.\n  Or set a default value to print out if you get `None` by using the function `unwrap_or`.\n  Or use an `if let` statement on the result of `pop()` to both destructure a `Some` value and only print out something if we have a value!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Result 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"result1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#[derive(PartialEq, Debug)]\npub struct PositiveNonzeroInteger(u64);\n\n#[derive(PartialEq, Debug)]\npub enum CreationError {\n    Negative,\n    Zero,\n}\n\nimpl PositiveNonzeroInteger {\n    pub fn new(value: i64) -> Result<PositiveNonzeroInteger, CreationError> {\n        Ok(PositiveNonzeroInteger(value as u64))\n    }\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use result1::{CreationError, PositiveNonzeroInteger};\n\n#[test]\nfn test_creation() {\n    assert!(PositiveNonzeroInteger::new(10).is_ok());\n    assert_eq!(\n        Err(CreationError::Negative),\n        PositiveNonzeroInteger::new(-10)\n    );\n    assert_eq!(Err(CreationError::Zero), PositiveNonzeroInteger::new(0));\n}\n"
            }
          },
          "description_text" : "## Task 6\n\nMake this test pass!\n\n<div class=\"hint\">\n  `PositiveNonzeroInteger::new` is always creating a new instance and returning an `Ok` result.\n  It should be doing some checking, returning an `Err` result if those checks fail, and only returning an `Ok` result if those checks determine that everything is... okay :)\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Threads",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "# Fearless Concurrency\n\nHandling concurrent programming safely and efficiently is another of Rust’s major goals. _Concurrent programming_, where different parts of a program execute independently, and _parallel programming_, where different parts of a program execute at the same time, are becoming increasingly important as more computers take advantage of their multiple processors. Historically, programming in these contexts has been difficult and error prone: Rust hopes to change that.\n\nInitially, the Rust team thought that ensuring memory safety and preventing concurrency problems were two separate challenges to be solved with different methods. Over time, the team discovered that the ownership and type systems are a powerful set of tools to help manage memory safety _and_ concurrency problems! By leveraging ownership and type checking, many concurrency errors are compile-time errors in Rust rather than runtime errors. Therefore, rather than making you spend lots of time trying to reproduce the exact circumstances under which a runtime concurrency bug occurs, incorrect code will refuse to compile and present an error explaining the problem. As a result, you can fix your code while you’re working on it rather than potentially after it has been shipped to production. We’ve nicknamed this aspect of Rust _fearless_ _concurrency_. Fearless concurrency allows you to write code that is free of subtle bugs and is easy to refactor without introducing new bugs.\n\n> Note: For simplicity’s sake, we’ll refer to many of the problems as _concurrent_ rather than being more precise by saying _concurrent and/or parallel_. If this book were about concurrency and/or parallelism, we’d be more specific. For this chapter, please mentally substitute _concurrent and/or parallel_ whenever we use _concurrent_.\n\nMany languages are dogmatic about the solutions they offer for handling concurrent problems. For example, Erlang has elegant functionality for message-passing concurrency but has only obscure ways to share state between threads. Supporting only a subset of possible solutions is a reasonable strategy for higher-level languages, because a higher-level language promises benefits from giving up some control to gain abstractions. However, lower-level languages are expected to provide the solution with the best performance in any given situation and have fewer abstractions over the hardware. Therefore, Rust offers a variety of tools for modeling problems in whatever way is appropriate for your situation and requirements.\n\nHere are the topics we’ll cover in this chapter:\n\n*   How to create threads to run multiple pieces of code at the same time\n*   _Message-passing_ concurrency, where channels send messages between threads\n*   _Shared-state_ concurrency, where multiple threads have access to some piece of data\n*   The `Sync` and `Send` traits, which extend Rust’s concurrency guarantees to user-defined types as well as types provided by the standard library\n\n## Using Threads to Run Code Simultaneously\n\nIn most current operating systems, an executed program’s code is run in a _process_, and the operating system manages multiple processes at once. Within your program, you can also have independent parts that run simultaneously. The features that run these independent parts are called _threads_.\n\nSplitting the computation in your program into multiple threads can improve performance because the program does multiple tasks at the same time, but it also adds complexity. Because threads can run simultaneously, there’s no inherent guarantee about the order in which parts of your code on different threads will run. This can lead to problems, such as:\n\n*   Race conditions, where threads are accessing data or resources in an inconsistent order\n*   Deadlocks, where two threads are waiting for each other to finish using a resource the other thread has, preventing both threads from continuing\n*   Bugs that happen only in certain situations and are hard to reproduce and fix reliably\n\nRust attempts to mitigate the negative effects of using threads, but programming in a multithreaded context still takes careful thought and requires a code structure that is different from that in programs running in a single thread.\n\nProgramming languages implement threads in a few different ways. Many operating systems provide an API for creating new threads. This model where a language calls the operating system APIs to create threads is sometimes called _1:1_, meaning one operating system thread per one language thread.\n\nMany programming languages provide their own special implementation of threads. Programming language-provided threads are known as _green_ threads, and languages that use these green threads will execute them in the context of a different number of operating system threads. For this reason, the green-threaded model is called the _M:N_ model: there are `M` green threads per `N` operating system threads, where `M` and `N` are not necessarily the same number.\n\nEach model has its own advantages and trade-offs, and the trade-off most important to Rust is runtime support. _Runtime_ is a confusing term and can have different meanings in different contexts.\n\nIn this context, by _runtime_ we mean code that is included by the language in every binary. This code can be large or small depending on the language, but every non-assembly language will have some amount of runtime code. For that reason, colloquially when people say a language has “no runtime,” they often mean “small runtime.” Smaller runtimes have fewer features but have the advantage of resulting in smaller binaries, which make it easier to combine the language with other languages in more contexts. Although many languages are okay with increasing the runtime size in exchange for more features, Rust needs to have nearly no runtime and cannot compromise on being able to call into C to maintain performance.\n\nThe green-threading M:N model requires a larger language runtime to manage threads. As such, the Rust standard library only provides an implementation of 1:1 threading. Because Rust is such a low-level language, there are crates that implement M:N threading if you would rather trade overhead for aspects such as more control over which threads run when and lower costs of context switching, for example.\n\nNow that we’ve defined threads in Rust, let’s explore how to use the thread-related API provided by the standard library.\n\n### Creating a New Thread with spawn\n\nTo create a new thread, we call the `thread::spawn` function and pass it a closure (we talked about closures in Chapter 13) containing the code we want to run in the new thread. The example in Listing 16-1 prints some text from a main thread and other text from a new thread:\n\n```rust\n    use std::thread;\n    use std::time::Duration;\n\n    fn main() {\n        thread::spawn(|| {\n            for i in 1..10 {\n                println!(\"hi number {} from the spawned thread!\", i);\n                thread::sleep(Duration::from_millis(1));\n            }\n        });\n\n        for i in 1..5 {\n            println!(\"hi number {} from the main thread!\", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    }\n```\n\n##### Listing 16-1: Creating a new thread to print one thing while the main thread prints something else\n\nNote that with this function, the new thread will be stopped when the main thread ends, whether or not it has finished running. The output from this program might be a little different every time, but it will look similar to the following:\n\n```text\n    hi number 1 from the main thread!\n    hi number 1 from the spawned thread!\n    hi number 2 from the main thread!\n    hi number 2 from the spawned thread!\n    hi number 3 from the main thread!\n    hi number 3 from the spawned thread!\n    hi number 4 from the main thread!\n    hi number 4 from the spawned thread!\n    hi number 5 from the spawned thread!\n```\n\nThe calls to `thread::sleep` force a thread to stop its execution for a short duration, allowing a different thread to run. The threads will probably take turns, but that isn’t guaranteed: it depends on how your operating system schedules the threads. In this run, the main thread printed first, even though the print statement from the spawned thread appears first in the code. And even though we told the spawned thread to print until `i` is 9, it only got to 5 before the main thread shut down.\n\nIf you run this code and only see output from the main thread, or don’t see any overlap, try increasing the numbers in the ranges to create more opportunities for the operating system to switch between the threads.\n\n### Waiting for All Threads to Finish Using join Handles\n\nThe code in Listing 16-1 not only stops the spawned thread prematurely most of the time due to the main thread ending, but also can’t guarantee that the spawned thread will get to run at all. The reason is that there is no guarantee on the order in which threads run!\n\nWe can fix the problem of the spawned thread not getting to run, or not getting to run completely, by saving the return value of `thread::spawn` in a variable. The return type of `thread::spawn` is `JoinHandle`. A `JoinHandle` is an owned value that, when we call the `join` method on it, will wait for its thread to finish. Listing 16-2 shows how to use the `JoinHandle` of the thread we created in Listing 16-1 and call `join` to make sure the spawned thread finishes before `main` exits:\n\n```rust\n    use std::thread;\n    use std::time::Duration;\n\n    fn main() {\n        let handle = thread::spawn(|| {\n            for i in 1..10 {\n                println!(\"hi number {} from the spawned thread!\", i);\n                thread::sleep(Duration::from_millis(1));\n            }\n        });\n\n        for i in 1..5 {\n            println!(\"hi number {} from the main thread!\", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n\n        handle.join().unwrap();\n    }\n```\n\n##### Listing 16-2: Saving a JoinHandle from thread::spawn to guarantee the thread is run to completion\n\nCalling `join` on the handle blocks the thread currently running until the thread represented by the handle terminates. _Blocking_ a thread means that thread is prevented from performing work or exiting. Because we’ve put the call to `join` after the main thread’s `for` loop, running Listing 16-2 should produce output similar to this:\n\n```text\n    hi number 1 from the main thread!\n    hi number 2 from the main thread!\n    hi number 1 from the spawned thread!\n    hi number 3 from the main thread!\n    hi number 2 from the spawned thread!\n    hi number 4 from the main thread!\n    hi number 3 from the spawned thread!\n    hi number 4 from the spawned thread!\n    hi number 5 from the spawned thread!\n    hi number 6 from the spawned thread!\n    hi number 7 from the spawned thread!\n    hi number 8 from the spawned thread!\n    hi number 9 from the spawned thread!\n```\n\nThe two threads continue alternating, but the main thread waits because of the call to `handle.join()` and does not end until the spawned thread is finished.\n\nBut let’s see what happens when we instead move `handle.join()` before the `for` loop in `main`, like this:\n\n```rust\n    use std::thread;\n    use std::time::Duration;\n\n    fn main() {\n        let handle = thread::spawn(|| {\n            for i in 1..10 {\n                println!(\"hi number {} from the spawned thread!\", i);\n                thread::sleep(Duration::from_millis(1));\n            }\n        });\n\n        handle.join().unwrap();\n\n        for i in 1..5 {\n            println!(\"hi number {} from the main thread!\", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    }\n```\n\nThe main thread will wait for the spawned thread to finish and then run its `for` loop, so the output won’t be interleaved anymore, as shown here:\n\n```text\n    hi number 1 from the spawned thread!\n    hi number 2 from the spawned thread!\n    hi number 3 from the spawned thread!\n    hi number 4 from the spawned thread!\n    hi number 5 from the spawned thread!\n    hi number 6 from the spawned thread!\n    hi number 7 from the spawned thread!\n    hi number 8 from the spawned thread!\n    hi number 9 from the spawned thread!\n    hi number 1 from the main thread!\n    hi number 2 from the main thread!\n    hi number 3 from the main thread!\n    hi number 4 from the main thread!\n```\n\nSmall details, such as where `join` is called, can affect whether or not your threads run at the same time.\n\n### Using move Closures with Threads\n\nThe `move` closure is often used alongside `thread::spawn` because it allows you to use data from one thread in another thread.\n\nIn Chapter 13, we mentioned we can use the `move` keyword before the parameter list of a closure to force the closure to take ownership of the values it uses in the environment. This technique is especially useful when creating new threads in order to transfer ownership of values from one thread to another.\n\nNotice in Listing 16-1 that the closure we pass to `thread::spawn` takes no arguments: we’re not using any data from the main thread in the spawned thread’s code. To use data from the main thread in the spawned thread, the spawned thread’s closure must capture the values it needs. Listing 16-3 shows an attempt to create a vector in the main thread and use it in the spawned thread. However, this won’t yet work, as you’ll see in a moment.\n\n```rust\n    use std::thread;\n\n    fn main() {\n        let v = vec![1, 2, 3];\n\n        let handle = thread::spawn(|| {\n            println!(\"Here's a vector: {:?}\", v);\n        });\n\n        handle.join().unwrap();\n    }\n```\n\n##### Listing 16-3: Attempting to use a vector created by the main thread in another thread\n\nThe closure uses `v`, so it will capture `v` and make it part of the closure’s environment. Because `thread::spawn` runs this closure in a new thread, we should be able to access `v` inside that new thread. But when we compile this example, we get the following error:\n\n```text\n    error[E0373]: closure may outlive the current function, but it borrows `v`,\n    which is owned by the current function\n     --> src/main.rs:6:32\n      |\n    6 |     let handle = thread::spawn(|| {\n      |                                ^^ may outlive borrowed value `v`\n    7 |         println!(\"Here's a vector: {:?}\", v);\n      |                                           - `v` is borrowed here\n      |\n    help: to force the closure to take ownership of `v` (and any other referenced\n    variables), use the `move` keyword\n      |\n    6 |     let handle = thread::spawn(move || {\n      |                                ^^^^^^^\n```\n\nRust _infers_ how to capture `v`, and because `println!` only needs a reference to `v`, the closure tries to borrow `v`. However, there’s a problem: Rust can’t tell how long the spawned thread will run, so it doesn’t know if the reference to `v` will always be valid.\n\nListing 16-4 provides a scenario that’s more likely to have a reference to `v` that won’t be valid:\n\n```rust\n    use std::thread;\n\n    fn main() {\n        let v = vec![1, 2, 3];\n\n        let handle = thread::spawn(|| {\n            println!(\"Here's a vector: {:?}\", v);\n        });\n\n        drop(v); // oh no!\n\n        handle.join().unwrap();\n    }\n```\n\n##### Listing 16-4: A thread with a closure that attempts to capture a reference to `v` from a main thread that drops v\n\nIf we were allowed to run this code, there’s a possibility the spawned thread would be immediately put in the background without running at all. The spawned thread has a reference to `v` inside, but the main thread immediately drops `v`, using the `drop` function we discussed in Chapter 15\\. Then, when the spawned thread starts to execute, `v` is no longer valid, so a reference to it is also invalid. Oh no!\n\nTo fix the compiler error in Listing 16-3, we can use the error message’s advice:\n\n```text\n    help: to force the closure to take ownership of `v` (and any other referenced\n    variables), use the `move` keyword\n      |\n    6 |     let handle = thread::spawn(move || {\n      |                                ^^^^^^^\n```\n\nBy adding the `move` keyword before the closure, we force the closure to take ownership of the values it’s using rather than allowing Rust to infer that it should borrow the values. The modification to Listing 16-3 shown in Listing 16-5 will compile and run as we intend:\n\n```rust\n    use std::thread;\n\n    fn main() {\n        let v = vec![1, 2, 3];\n\n        let handle = thread::spawn(move || {\n            println!(\"Here's a vector: {:?}\", v);\n        });\n\n        handle.join().unwrap();\n    }\n```\n\n##### Listing 16-5: Using the move keyword to force a closure to take ownership of the values it uses\n\nWhat would happen to the code in Listing 16-4 where the main thread called `drop` if we use a `move` closure? Would `move` fix that case? Unfortunately, no; we would get a different error because what Listing 16-4 is trying to do isn’t allowed for a different reason. If we added `move` to the closure, we would move `v` into the closure’s environment, and we could no longer call `drop` on it in the main thread. We would get this compiler error instead:\n\n```text\n    error[E0382]: use of moved value: `v`\n      --> src/main.rs:10:10\n       |\n    6  |     let handle = thread::spawn(move || {\n       |                                ------- value moved (into closure) here\n    ...\n    10 |     drop(v); // oh no!\n       |          ^ value used here after move\n       |\n       = note: move occurs because `v` has type `std::vec::Vec<i32>`, which does\n       not implement the `Copy` trait\n```\n\nRust’s ownership rules have saved us again! We got an error from the code in Listing 16-3 because Rust was being conservative and only borrowing `v` for the thread, which meant the main thread could theoretically invalidate the spawned thread’s reference. By telling Rust to move ownership of `v` to the spawned thread, we’re guaranteeing Rust that the main thread won’t use `v` anymore. If we change Listing 16-4 in the same way, we’re then violating the ownership rules when we try to use `v` in the main thread. The `move` keyword overrides Rust’s conservative default of borrowing; it doesn’t let us violate the ownership rules.\n\nWith a basic understanding of threads and the thread API, let’s look at what we can _do_ with threads.\n\nYou can refer to the following chapter in the Rust Programming Language Book:\n[Using Threads to Run Code Simultaneously](https://doc.rust-lang.org/book/ch16-01-threads.html#using-threads-to-run-code-simultaneously)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Using Message Passing to Transfer Data Between Threads",
          "files" : {
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// put code of your task here\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"using_message_passing_to_transfer_data_between_threads\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## Using Message Passing to Transfer Data Between Threads\n\nOne increasingly popular approach to ensuring safe concurrency is _message passing_, where threads or actors communicate by sending each other messages containing data. Here’s the idea in a slogan from [the Go language documentation](http://golang.org/doc/effective_go.html): “Do not communicate by sharing memory; instead, share memory by communicating.”\n\nOne major tool Rust has for accomplishing message-sending concurrency is the _channel_, a programming concept that Rust’s standard library provides an implementation of. You can imagine a channel in programming as being like a channel of water, such as a stream or a river. If you put something like a rubber duck or boat into a stream, it will travel downstream to the end of the waterway.\n\nA channel in programming has two halves: a transmitter and a receiver. The transmitter half is the upstream location where you put rubber ducks into the river, and the receiver half is where the rubber duck ends up downstream. One part of your code calls methods on the transmitter with the data you want to send, and another part checks the receiving end for arriving messages. A channel is said to be _closed_ if either the transmitter or receiver half is dropped.\n\nHere, we’ll work up to a program that has one thread to generate values and send them down a channel, and another thread that will receive the values and print them out. We’ll be sending simple values between threads using a channel to illustrate the feature. Once you’re familiar with the technique, you could use channels to implement a chat system or a system where many threads perform parts of a calculation and send the parts to one thread that aggregates the results.\n\nFirst, in Listing 16-6, we’ll create a channel but not do anything with it. Note that this won’t compile yet because Rust can’t tell what type of values we want to send over the channel.\n\n```rust\n    use std::sync::mpsc;\n\n    fn main() {\n        let (tx, rx) = mpsc::channel();\n    }\n```\n\n##### Listing 16-6: Creating a channel and assigning the two halves to tx and rx\n\nWe create a new channel using the `mpsc::channel` function; `mpsc` stands for _multiple producer, single consumer_. In short, the way Rust’s standard library implements channels means a channel can have multiple _sending_ ends that produce values but only one _receiving_ end that consumes those values. Imagine multiple streams flowing together into one big river: everything sent down any of the streams will end up in one river at the end. We’ll start with a single producer for now, but we’ll add multiple producers when we get this example working.\n\nThe `mpsc::channel` function returns a tuple, the first element of which is the sending end and the second element is the receiving end. The abbreviations `tx` and `rx` are traditionally used in many fields for _transmitter_ and _receiver_ respectively, so we name our variables as such to indicate each end. We’re using a `let` statement with a pattern that destructures the tuples; we’ll discuss the use of patterns in `let` statements and destructuring in Chapter 18\\. Using a `let` statement this way is a convenient approach to extract the pieces of the tuple returned by `mpsc::channel`.\n\nLet’s move the transmitting end into a spawned thread and have it send one string so the spawned thread is communicating with the main thread, as shown in Listing 16-7\\. This is like putting a rubber duck in the river upstream or sending a chat message from one thread to another.\n\n```rust\n    use std::thread;\n    use std::sync::mpsc;\n\n    fn main() {\n        let (tx, rx) = mpsc::channel();\n\n        thread::spawn(move || {\n            let val = String::from(\"hi\");\n            tx.send(val).unwrap();\n        });\n    }\n```\n\n##### Listing 16-7: Moving tx to a spawned thread and sending “hi”\n\nAgain, we’re using `thread::spawn` to create a new thread and then using `move` to move `tx` into the closure so the spawned thread owns `tx`. The spawned thread needs to own the transmitting end of the channel to be able to send messages through the channel.\n\nThe transmitting end has a `send` method that takes the value we want to send. The `send` method returns a `Result<T, E>` type, so if the receiving end has already been dropped and there’s nowhere to send a value, the send operation will return an error. In this example, we’re calling `unwrap` to panic in case of an error. But in a real application, we would handle it properly: return to Chapter 9 to review strategies for proper error handling.\n\nIn Listing 16-8, we’ll get the value from the receiving end of the channel in the main thread. This is like retrieving the rubber duck from the water at the end of the river or like getting a chat message.\n\n```rust\n    use std::thread;\n    use std::sync::mpsc;\n\n    fn main() {\n        let (tx, rx) = mpsc::channel();\n\n        thread::spawn(move || {\n            let val = String::from(\"hi\");\n            tx.send(val).unwrap();\n        });\n\n        let received = rx.recv().unwrap();\n        println!(\"Got: {}\", received);\n    }\n```\n\n##### Listing 16-8: Receiving the value “hi” in the main thread and printing it\n\nThe receiving end of a channel has two useful methods: `recv` and `try_recv`. We’re using `recv`, short for _receive_, which will block the main thread’s execution and wait until a value is sent down the channel. Once a value is sent, `recv` will return it in a `Result<T, E>`. When the sending end of the channel closes, `recv` will return an error to signal that no more values will be coming.\n\nThe `try_recv` method doesn’t block, but will instead return a `Result<T, E>` immediately: an `Ok` value holding a message if one is available and an `Err` value if there aren’t any messages this time. Using `try_recv` is useful if this thread has other work to do while waiting for messages: we could write a loop that calls `try_recv` every so often, handles a message if one is available, and otherwise does other work for a little while until checking again.\n\nWe’ve used `recv` in this example for simplicity; we don’t have any other work for the main thread to do other than wait for messages, so blocking the main thread is appropriate.\n\nWhen we run the code in Listing 16-8, we’ll see the value printed from the main thread:\n\n```text\n    Got: hi\n```\n\nPerfect!\n\n### Channels and Ownership Transference\n\nThe ownership rules play a vital role in message sending because they help you write safe, concurrent code. Preventing errors in concurrent programming is the advantage of thinking about ownership throughout your Rust programs. Let’s do an experiment to show how channels and ownership work together to prevent problems: we’ll try to use a `val` value in the spawned thread _after_ we’ve sent it down the channel. Try compiling the code in Listing 16-9 to see why this code isn’t allowed:\n\n```rust\n    use std::thread;\n    use std::sync::mpsc;\n\n    fn main() {\n        let (tx, rx) = mpsc::channel();\n\n        thread::spawn(move || {\n            let val = String::from(\"hi\");\n            tx.send(val).unwrap();\n            println!(\"val is {}\", val);\n        });\n\n        let received = rx.recv().unwrap();\n        println!(\"Got: {}\", received);\n    }\n```\n\n##### Listing 16-9: Attempting to use val after we’ve sent it down the channel\n\nHere, we try to print `val` after we’ve sent it down the channel via `tx.send`. Allowing this would be a bad idea: once the value has been sent to another thread, that thread could modify or drop it before we try to use the value again. Potentially, the other thread’s modifications could cause errors or unexpected results due to inconsistent or nonexistent data. However, Rust gives us an error if we try to compile the code in Listing 16-9:\n\n```text\n    error[E0382]: use of moved value: `val`\n      --> src/main.rs:10:31\n       |\n    9  |         tx.send(val).unwrap();\n       |                 --- value moved here\n    10 |         println!(\"val is {}\", val);\n       |                               ^^^ value used here after move\n       |\n       = note: move occurs because `val` has type `std::string::String`, which does\n    not implement the `Copy` trait\n```\n\nOur concurrency mistake has caused a compile time error. The `send` function takes ownership of its parameter, and when the value is moved, the receiver takes ownership of it. This stops us from accidentally using the value again after sending it; the ownership system checks that everything is okay.\n\n### Sending Multiple Values and Seeing the Receiver Waiting\n\nThe code in Listing 16-8 compiled and ran, but it didn’t clearly show us that two separate threads were talking to each other over the channel. In Listing 16-10 we’ve made some modifications that will prove the code in Listing 16-8 is running concurrently: the spawned thread will now send multiple messages and pause for a second between each message.\n\n```rust\n    use std::thread;\n    use std::sync::mpsc;\n    use std::time::Duration;\n\n    fn main() {\n        let (tx, rx) = mpsc::channel();\n\n        thread::spawn(move || {\n            let vals = vec![\n                String::from(\"hi\"),\n                String::from(\"from\"),\n                String::from(\"the\"),\n                String::from(\"thread\"),\n            ];\n\n            for val in vals {\n                tx.send(val).unwrap();\n                thread::sleep(Duration::from_secs(1));\n            }\n        });\n\n        for received in rx {\n            println!(\"Got: {}\", received);\n        }\n    }\n```\n\n##### Listing 16-10: Sending multiple messages and pausing between each\n\nThis time, the spawned thread has a vector of strings that we want to send to the main thread. We iterate over them, sending each individually, and pause between each by calling the `thread::sleep` function with a `Duration` value of 1 second.\n\nIn the main thread, we’re not calling the `recv` function explicitly anymore: instead, we’re treating `rx` as an iterator. For each value received, we’re printing it. When the channel is closed, iteration will end.\n\nWhen running the code in Listing 16-10, you should see the following output with a 1-second pause in between each line:\n\n```text\n    Got: hi\n    Got: from\n    Got: the\n    Got: thread\n```\n\nBecause we don’t have any code that pauses or delays in the `for` loop in the main thread, we can tell that the main thread is waiting to receive values from the spawned thread.\n\n### Creating Multiple Producers by Cloning the Transmitter\n\nEarlier we mentioned that `mpsc` was an acronym for _multiple producer, single consumer_. Let’s put `mpsc` to use and expand the code in Listing 16-10 to create multiple threads that all send values to the same receiver. We can do so by cloning the transmitting half of the channel, as shown in Listing 16-11:\n\n```rust\n    // --snip--\n\n    let (tx, rx) = mpsc::channel();\n\n    let tx1 = mpsc::Sender::clone(&tx);\n    thread::spawn(move || {\n        let vals = vec![\n            String::from(\"hi\"),\n            String::from(\"from\"),\n            String::from(\"the\"),\n            String::from(\"thread\"),\n        ];\n\n        for val in vals {\n            tx1.send(val).unwrap();\n            thread::sleep(Duration::from_secs(1));\n        }\n    });\n\n    thread::spawn(move || {\n        let vals = vec![\n            String::from(\"more\"),\n            String::from(\"messages\"),\n            String::from(\"for\"),\n            String::from(\"you\"),\n        ];\n\n        for val in vals {\n            tx.send(val).unwrap();\n            thread::sleep(Duration::from_secs(1));\n        }\n    });\n\n    for received in rx {\n        println!(\"Got: {}\", received);\n    }\n\n    // --snip--\n```\n\n##### Listing 16-11: Sending multiple messages from multiple producers</span>\n\nThis time, before we create the first spawned thread, we call `clone` on the sending end of the channel. This will give us a new sending handle we can pass to the first spawned thread. We pass the original sending end of the channel to a second spawned thread. This gives us two threads, each sending different messages to the receiving end of the channel.\n\nWhen you run the code, your output should look something like this:\n\n    Got: hi\n    Got: more\n    Got: from\n    Got: messages\n    Got: for\n    Got: the\n    Got: thread\n    Got: you\n\nYou might see the values in another order; it depends on your system. This is what makes concurrency interesting as well as difficult. If you experiment with `thread::sleep`, giving it various values in the different threads, each run will be more nondeterministic and create different output each time.\n\nNow that we’ve looked at how channels work, let’s look at a different method of concurrency.\n\n</main>",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Threads 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"threads1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "use std::sync::Arc;\nuse std::thread;\nuse std::time::Duration;\n\nstruct JobStatus {\n    jobs_completed: u32,\n}\n\nfn main() {\n    let status = Arc::new(JobStatus { jobs_completed: 0 });\n    let status_shared = status.clone();\n    thread::spawn(move || {\n        for _ in 0..10 {\n            thread::sleep(Duration::from_millis(250));\n            status_shared.jobs_completed += 1;\n        }\n    });\n    while status.jobs_completed < 10 {\n        println!(\"waiting... \");\n        thread::sleep(Duration::from_millis(500));\n    }\n}\n"
            }
          },
          "description_text" : "Make this compile!\n\nThe idea is the thread spawned on line 12 is completing jobs while the main thread is monitoring progress until 10 jobs are completed.\nIf you see 6 lines of \"waiting...\" and the program ends without timing out the playground, you've got it :)\n\n<div class=\"hint\">\n  `Arc` is an Atomic Reference Counted pointer that allows safe, shared access to **immutable** data. But we want to *change* the number of `jobs_completed` so we'll need to also use another type that will only allow one thread to mutate the data at a time.\n  Take a look at this section of the book:\n  https://doc.rust-lang.org/stable/book/second-edition/ch16-03-shared-state.html#atomic-reference-counting-with-arct\n  and keep scrolling if you'd like more hints :)\n</div>\n\n<div class=\"hint\">\n  Do you now have an `Arc` `Mutex` `JobStatus` at the beginning of main? Like:\n\n  ```rust\n  let status = Arc::new(Mutex::new(JobStatus { jobs_completed: 0 }));\n  ```\n  Similar to the code in the example in the book that happens after the text that says \"We can use Arc<T> to fix this.\".\n  If not, give that a try!\n  If you do and would like more hints, keep scrolling!!\n</div>\n\n<div class=\"hint\">\n  Make sure neither of your threads are holding onto the lock of the mutex while they are sleeping, since this will prevent the other thread from being allowed to get the lock. Locks are automatically released when they go out of scope.\n</div>\n\n<div class=\"hint\">\n  Ok, so, real talk, this was actually tricky for *me* to do too.\n  And I could see a lot of different problems you might run into, so at this point I'm not sure which one you've hit :)\n  Please see a few possible answers on https://github.com/carols10cents/rustlings/issues/3 -- mine is a little more complicated because I decided I wanted to see the number of jobs currently done when I was checking the status.\n\n  Please open an issue if you're still running into a problem that these hints are not helping you with, or if you've looked at the sample answers and don't understand why they work and yours doesn't.\n\n  If you've learned from the sample solutions, I encourage you to come back to this exercise and try it again in a few days to reinforce what you've learned :)\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Standard Library Types",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "For the Arc exercise check out the chapter [Shared-State Concurrency](https://doc.rust-lang.org/book/2018-edition/ch16-03-shared-state.html) of the Rust Book.\n\nFor the Iterator exercise check out the chapters [Iterator](https://doc.rust-lang.org/book/2018-edition/ch13-02-iterators.html) of the Rust Book and the [Iterator documentation](https://doc.rust-lang.org/stable/std/iter/trait.Iterator.htmlj).\n\nDo not adjust your monitors -- iterators 1 and 2 are indeed missing. Iterator 3 is a bit challenging so we're leaving space for some exercises to lead up to it!\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Arc 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"arc1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 124,
                  "length" : 9,
                  "possible_answer" : "_________",
                  "placeholder_text" : "type here"
                }
              ],
              "is_visible" : true,
              "text" : "use std::sync::Arc;\nuse std::thread;\n\nfn main() {\n    let numbers: Vec<_> = (0..100u32).collect();\n    let shared_numbers = type here;\n    let mut joinhandles = Vec::new();\n\n    for offset in 0..8 {\n        joinhandles.push(\n            thread::spawn(move || {\n                let mut i = offset;\n                let mut sum = 0;\n                while i < child_numbers.len() {\n                    sum += child_numbers[i];\n                    i += 5;\n                }\n                println!(\"Sum of offset {} is {}\", offset, sum);\n            }));\n    }\n    for handle in joinhandles.into_iter() {\n        handle.join().unwrap();\n    }\n}\n"
            }
          },
          "description_text" : "Make this code compile by filling in a value for `shared_numbers` and creating an initial binding for `child_numbers` somewhere.\nTry not to create any copies of the `numbers` Vec!\n\n<div class=\"hint\">\n  Make `shared_numbers` be an `Arc` from the numbers vector.\n  Then, in order to avoid creating a copy of `numbers`, you'll need to create `child_numbers` inside the loop but still in the main thread.\n\n  `child_numbers` should be a clone of the Arc of the numbers instead of a thread-local copy of the numbers.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Iterator 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"iterator3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#[derive(Debug, PartialEq, Eq)]\npub enum DivisionError {\n    NotDivisible(NotDivisibleError),\n    DivideByZero,\n}\n\n#[derive(Debug, PartialEq, Eq)]\npub struct NotDivisibleError {\n    dividend: i32,\n    divisor: i32,\n}\n\n// This function should calculate `a` divided by `b` if `a` is evenly divisible by b.\n// Otherwise, it should return a suitable error.\npub fn divide(a: i32, b: i32) -> Result<i32, DivisionError> {\n\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    // Iterator exercises using your `divide` function\n\n    #[test]\n    fn result_with_list() {\n        let numbers = vec![27, 297, 38502, 81];\n        let division_results = numbers.into_iter().map(|n| divide(n, 27));\n        let x //... Fill in here!\n        assert_eq!(format!(\"{:?}\", x), \"Ok([1, 11, 1426, 3])\");\n    }\n    #[test]\n    fn list_of_results() {\n        let numbers = vec![27, 297, 38502, 81];\n        let division_results = numbers.into_iter().map(|n| divide(n, 27));\n        let x //... Fill in here!\n        assert_eq!(format!(\"{:?}\", x), \"[Ok(1), Ok(11), Ok(1426), Ok(3)]\");\n    }\n}"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use iterator3::{divide, DivisionError, NotDivisibleError};\n\n#[test]\nfn test_success() {\n    assert_eq!(divide(81, 9), Ok(9));\n}\n\n#[test]\nfn test_not_divisible() {\n    assert_eq!(\n        divide(81, 6),\n        Err(DivisionError::NotDivisible(NotDivisibleError {\n            dividend: 81,\n            divisor: 6\n        }))\n    );\n}\n\n#[test]\nfn test_divide_by_0() {\n    assert_eq!(divide(81, 0), Err(DivisionError::DivideByZero));\n}\n\n#[test]\nfn test_divide_0_by_something() {\n    assert_eq!(divide(0, 81), Ok(0));\n}\n"
            }
          },
          "description_text" : "This is a bigger exercise than most of the others!\nYou can do it!\n\nHere is your mission, should you choose to accept it:\n1. Complete the divide function to get the first four tests to pass\n2. Uncomment the last two tests and get them to pass by filling in values for `x` using `division_results`.\n\nScroll down for a minor hint for part 2, and scroll down further for a major hint.\nHave fun :-)\n\n<div class=\"hint\">\n  In each of the two cases in the match in main, you can create x with either a 'turbofish' or by hinting the type of x to the compiler.\n  You may try both.\n</div>\n\n<div class=\"hint\">\n  Have a look at the Iter trait and at the explanation of its collect function.\n  Especially the part about Result is interesting.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Iterators 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"iterators4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "pub fn factorial(num: u64) -> u64 {}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use iterators4::factorial;\n\n#[test]\nfn factorial_of_1() {\n    assert_eq!(1, factorial(1));\n}\n\n#[test]\nfn factorial_of_2() {\n    assert_eq!(2, factorial(2));\n}\n\n#[test]\nfn factorial_of_4() {\n    assert_eq!(24, factorial(4));\n}\n"
            }
          },
          "description_text" : "Complete this function to return factorial of num.\n\nDo not use:\n- `return`\n\nFor extra fun don't use:\n- imperative style loops (`for`, `while`)\n- additional variables\n\nFor the most fun don't use:\n- recursion\n\n<div class=\"hint\">\n  In an imperative language you might write a for loop to iterate through multiply the values into a mutable variable.\n  Or you might write code more functionally with recursion and a match clause.\n  But you can also use ranges and iterators to solve this in rust.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "LICENSE",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "MIT License\n\nCopyright (c) 2019 Mikhail Chernyavsky\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
    },
    {
      "name" : "README.md",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# rustlings \uD83E\uDD80❤️\n\nGreetings and welcome to `rustlings`.\nThis project contains small exercises to get you used to reading and writing Rust code.\nThis includes reading and responding to compiler messages!\n\n## Credits\n\n`rustlings` was originally written by [Carol](https://github.com/carols10cents)!\n"
    }
  ],
  "version" : 11
}
{
  "summary" : "Small exercises to get you used to reading and writing Rust code!",
  "title" : "Rustlings",
  "programming_language" : "Rust",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "Getting started",
      "task_list" : [
        {
          "name" : "Installation",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"installation\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Getting Started\n\nLet’s start your Rust journey! There’s a lot to learn, but every journey starts somewhere. In this lesson, we’ll discuss:\n\n* Verification of Rust installation\n* Writing a program that prints Hello, world!\n\n### Command Line Notation\n\nIn this lesson and throughout the course, we’ll show some commands used in the terminal. Lines that you should enter in a terminal all start with `$`. You don’t need to type in the `$` character; it indicates the start of each command. Lines that don’t start with `$` typically show the output of the previous command. Additionally, PowerShell-specific examples will use `>` rather than `$`.\n     \n### Verification of Rust installation\n\nSince you joined this course, we can assume that `rustup` has been installed already but let's double-check this.\n\nIf you’re using Linux or macOS, open a terminal by going to **View | Tool Windows | Terminal** or pressing **⌥ F12** or **Alt F12** and enter the following command:\n\n```text\n$ rustc --version\n```\nYou should see the version number, commit hash, and commit date for the latest stable version that has been released in the following format:\n```text\n\nrustc x.y.z (abcabcabc yyyy-mm-dd)\n```\n\nIf you see this information, you have installed Rust successfully! If you don’t see this information and you’re on Windows, check that Rust is in your `%PATH%` system variable.\n\n### Linker\n\nAdditionally, you’ll need a linker of some kind. It’s likely one is already installed, but when you try to compile a Rust program and get errors indicating that a linker could not execute, that means a linker isn’t installed on your system and you’ll need to install one manually. C compilers usually come with the correct linker. Check your platform’s documentation for how to install a C compiler. Also, some common Rust packages depend on C code and will need a C compiler. Therefore, it might be worth installing one now.\n\nFor Windows you’ll also need the C++ build tools for Visual Studio 2013 or later. The easiest way to acquire the build tools is to install [Build Tools for Visual Studio 2017](https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017). The tools are in the Other Tools and Frameworks section.\n\n### Updating and Uninstalling\n\nAfter you’ve installed Rust via `rustup`, updating to the latest version is easy. From your shell, run the following update script:\n\n```text\n$ rustup update\n```\n\nTo uninstall Rust and 'rustup', run the following uninstall script from your shell:\n\n```text\n$ rustup self uninstall\n```\n\n### Local Documentation\n\nThe installer also includes a copy of the documentation locally, so you can read it offline. Run `rustup doc` to open the local documentation in your browser.\n\nAny time a type or function is provided by the standard library and you’re not sure what it does or how to use it, use the application programming interface (API) documentation to find out!\n\n_You can refer to the following chapter in the Rust Programming Language book: [Installation](https://doc.rust-lang.org/stable/book/ch01-01-installation.html)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Hello World",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## Hello, World!\n\nNow that you’ve installed Rust, let’s write your first Rust program. It’s traditional when learning a new language to write a little program that prints the text `Hello, world!` to the screen, so we’ll do the same here!\n\nYou can see the **Editor** window in the left. This is your sandbox and you can test your code here.\nThe `main.rs` file has the following lines:\n\n```rust\nfn main() {\n    // put you code here to launch it\n}\n\n``` \nNow let's replace these lines with the code in Listing 1-1:\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n##### Listing 1-1: A program that prints Hello, world!\n\nTo run this code click on **Run** button in the **Task Description** window.\n\nIf `Hello, world!` did print, congratulations! You’ve officially written a Rust program. That makes you a Rust programmer—welcome!\n\n### Anatomy of a Rust Program\n\nLet’s review in detail what just happened in your Hello, world! program. Here’s the first piece of the puzzle:\n\n```rust\n\nfn main() {\n\n}\n```\n\nThese lines define a function in Rust. The `main` function is special: it is always the first code that runs in every executable Rust program. The first line declares a function named `main` that has no parameters and returns nothing. If there were parameters, they would go inside the parentheses, `()`.\n\nAlso, note that the function body is wrapped in curly brackets, `{}`. Rust requires these around all function bodies. It’s good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.\n\nAt the time of this writing, an automatic formatter tool called `rustfmt` is under development. If you want to stick to a standard style across Rust projects, `rustfmt` will format your code in a particular style. The Rust team plans to eventually include this tool with the standard Rust distribution, like `rustc`. So depending on when you read this book, it might already be installed on your computer! Check the online documentation for more details.\n\nInside the `main` function is the following code:\n\n```rust\n    println!(\"Hello, world!\");\n```\n\nThis line does all the work in this little program: it prints text to the screen. There are four important details to notice here. First, Rust style is to indent with four spaces, not a tab.\n\nSecond, println! calls a Rust macro. If it called a function instead, it would be entered as `println` (without the `!`). We’ll discuss Rust macros in more detail a bit later. For now, you just need to know that using a `!` means that you’re calling a macro instead of a normal function.\n\nThird, you see the `\"Hello, world!\"` string. We pass this string as an argument to `println!`, and the string is printed to the screen.\n\nFourth, we end the line with a semicolon (`;`), which indicates that this expression is over and the next one is ready to begin. Most lines of Rust code end with a semicolon.\n\n_You can refer to the following chapter in the Rust Programming Language book: [Hello, World!](https://doc.rust-lang.org/stable/book/ch01-02-hello-world.html)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Programming a Guessing Game",
      "task_list" : [
        {
          "name" : "Programming a Guesssing Game",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 31,
                  "possible_answer" : "_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________",
                  "placeholder_text" : "Put your code here to launch it"
                }
              ],
              "is_visible" : true,
              "text" : "Put your code here to launch it"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"processing_a_guess\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "Let’s jump into Rust by working through a hands-on project together! This chapter introduces you to a few common Rust concepts by showing you how to use them in a real program. You’ll learn about `let`, `match`, methods, associated functions, using external crates, and more! The following lessons will explore these ideas in more detail. In this lesson, you’ll practice the fundamentals.\n\nWe’ll implement a classic beginner programming problem: a guessing game. Here’s how it works: the program will generate a random integer between 1 and 100. It will then prompt the player to enter a guess. After a guess is entered, the program will indicate whether the guess is too low or too high. If the guess is correct, the game will print a congratulatory message and exit.\n\n### Processing a Guess\n\nThe first part of the guessing game program will ask for user input, process that input, and check that the input is in the expected form. To start, we’ll allow the player to input a guess. Enter the code in Listing 2-1 into _src/main.rs_.\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin().read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\n##### Listing 2-1: Code that gets a guess from the user and prints it\n\nThis code contains a lot of information, so let’s go over it line by line. To obtain user input and then print the result as output, we need to bring the `io` (input/output) library into scope. The `io` library comes from the standard library (which is known as `std`):\n\n```rust\nuse std::io;\n```\n\nBy default, Rust brings only a few types into the scope of every program in _[the prelude](https://doc.rust-lang.org/stable/std/prelude/index.html)_. If a type you want to use isn’t in the prelude, you have to bring that type into scope explicitly with a `use` statement. Using the `std::io` library provides you with a number of useful features, including the ability to accept user input.\n\nAs you saw in Lesson 1, the main function is the entry point into the program:\n\n```rust\nfn main() {\n```\n\nThe `fn` syntax declares a new function, the parentheses, `()`, indicate there are no parameters, and the curly bracket, `{`, starts the body of the function.\n\nAs you also learned in Lesson 1, `println!` is a macro that prints a string to the screen:\n\n```rust\nprintln!(\"Guess the number!\");\n\nprintln!(\"Please input your guess.\");\n```\n\nThis code is printing a prompt stating what the game is and requesting input from the user.\n\nYou can refer to the following chapter in the Rust Programming Language Book: [Processing a Guess](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#processing-a-guess)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Generating a Secret Number",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 31,
                  "dependency" : {
                    "lesson" : "Programming a Guessing Game",
                    "task" : "Storing Values with Variables",
                    "file" : "src/main.rs",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________",
                  "placeholder_text" : "Put your code here to launch it"
                }
              ],
              "is_visible" : true,
              "text" : "Put your code here to launch it"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"processing_a_guess\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[dependencies]\n\nrand = \"0.3.14\""
            }
          },
          "description_text" : "Next, we need to generate a secret number that the user will try to guess. The secret number should be different every time so the game is fun to play more than once. Let’s use a random number between 1 and 100 so the game isn’t too difficult. Rust doesn’t yet include random number functionality in its standard library. However, the Rust team does provide a 'rand' [crate](https://crates.io/crates/rand).\n\n### Using a Crate to Get More Functionality\n\nRemember that a crate is a collection of Rust source code files. The project we’ve been building is a _binary crate_, which is an executable. The `rand` crate is a library crate, which contains code intended to be used in other programs.\n\nCargo’s use of external crates is where it really shines. Before we can write code that uses `rand`, we need to modify the _Cargo.toml_ file to include the `rand` crate as a dependency. Open that file now and add the following line to the bottom beneath the `[dependencies]` section header that Cargo created for you:\n\n```toml\n[dependencies]\n\nrand = \"0.3.14\"\n```\n\nIn the _Cargo.toml_ file, everything that follows a header is part of a section that continues until another section starts. The `[dependencies]` section is where you tell Cargo which external crates your project depends on and which versions of those crates you require. In this case, we’ll specify the `rand` crate with the semantic version specifier `0.3.14`. Cargo understands [Semantic Versioning](http://semver.org/) (sometimes called _SemVer_), which is a standard for writing version numbers. The number 0.3.14 is actually shorthand for `^0.3.14`, which means “any version that has a public API compatible with version 0.3.14.”\n\nNow, without changing any of the code, let’s build the project, as shown in Listing 2-2.\n\n```text\n$ cargo build\n    Updating registry `https://github.com/rust-lang/crates.io-index`\n Downloading rand v0.3.14\n Downloading libc v0.2.14\n   Compiling libc v0.2.14\n   Compiling rand v0.3.14\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n```\n\n##### Listing 2-2: The output from running cargo build after adding the rand crate as a dependency\n\nYou may see different version numbers (but they will all be compatible with the code, thanks to SemVer!), and the lines may be in a different order.\n\nNow that we have an external dependency, Cargo fetches the latest versions of everything from the _registry_, which is a copy of data from [Crates.io](https://crates.io/). Crates.io is where people in the Rust ecosystem post their open source Rust projects for others to use.\n\nAfter updating the registry, Cargo checks the `[dependencies]` section and downloads any crates you don’t have yet. In this case, although we only listed `rand` as a dependency, Cargo also grabbed a copy of `libc`, because rand depends on `libc` to work. After downloading the crates, Rust compiles them and then compiles the project with the dependencies available.\n\nIf you immediately run `cargo build` again without making any changes, you won’t get any output aside from the `Finished` line. Cargo knows it has already downloaded and compiled the dependencies, and you haven’t changed anything about them in your _Cargo.toml_ file. Cargo also knows that you haven’t changed anything about your code, so it doesn’t recompile that either. With nothing to do, it simply exits.\n\nIf you open up the _src/main.rs_ file, make a trivial change, and then save it and build again, you’ll only see two lines of output:\n\n```text\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n```\n\nThese lines show Cargo only updates the build with your tiny change to the _src/main.rs_ file. Your dependencies haven’t changed, so Cargo knows it can reuse what it has already downloaded and compiled for those. It just rebuilds your part of the code.\n\n### Ensuring Reproducible Builds with the Cargo.lock File\n\nCargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, what happens if next week version 0.3.15 of the `rand` crate comes out and contains an important bug fix but also contains a regression that will break your code?\n\nThe answer to this problem is the Cargo.lock file, which was created the first time you ran `cargo build` and is now in your guessing_game directory. When you build a project for the first time, Cargo figures out all the versions of the dependencies that fit the criteria and then writes them to the _Cargo.lock_ file. When you build your project in the future, Cargo will see that the _Cargo.lock_ file exists and use the versions specified there rather than doing all the work of figuring out versions again. This lets you have a reproducible build automatically. In other words, your project will remain at `0.3.14` until you explicitly upgrade, thanks to the _Cargo.lock_ file.\n\n### Updating a Crate to Get a New Version\n\nWhen you _do_ want to update a crate, Cargo provides another command, `update`, which will ignore the _Cargo.lock_ file and figure out all the latest versions that fit your specifications in _Cargo.toml_. If that works, Cargo will write those versions to the _Cargo.lock_ file.\n\nBut by default, Cargo will only look for versions greater than `0.3.0` and less than `0.4.0`. If the `rand` crate has released two new versions, `0.3.15` and `0.4.0`, you would see the following if you ran `cargo update`:\n\n$ cargo update\n    Updating registry `https://github.com/rust-lang/crates.io-index`\n    Updating rand v0.3.14 -> v0.3.15\n\nAt this point, you would also notice a change in your Cargo.lock file noting that the version of the rand crate you are now using is `0.3.15`.\n\nIf you wanted to use rand version `0.4.0` or any version in the `0.4.x` series, you’d have to update the _Cargo.toml_ file to look like this instead:\n\n```toml\n[dependencies]\n\nrand = \"0.4.0\"\n```\n\nThe next time you run `cargo build`, Cargo will update the registry of crates available and reevaluate your `rand` requirements according to the new version you have specified.\n\nThere’s a lot more to say about [Cargo](http://doc.crates.io/) and [its ecosystem](http://doc.crates.io/crates-io.html), but for now, that’s all you need to know. Cargo makes it very easy to reuse libraries, so Rustaceans are able to write smaller projects that are assembled from a number of packages.\n\n### Generating a Random Number\n\nNow that you’ve added the `rand` crate to _Cargo.toml_, let’s start using `rand`. The next step is to update src/main.rs, as shown in Listing 2-3.\n\n```rust\n\nuse std::io;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n    println!(\"The secret number is: {}\", secret_number);\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin().read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\n##### Listing 2-3: Adding code to generate a random number\n\nFirst, we add a `use` line: `use rand::Rng`. The `Rng` trait defines methods that random number generators implement, and this trait must be in scope for us to use those methods.\n\nNext, we’re adding two lines in the middle. The `rand::thread_rng` function will give us the particular random number generator that we’re going to use: one that is local to the current thread of execution and seeded by the operating system. Then we call the `gen_range` method on the random number generator. This method is defined by the `Rng` trait that we brought into scope with the `use rand::Rng` statement. The gen_range method takes two numbers as arguments and generates a random number between them. It’s inclusive on the lower bound but exclusive on the upper bound, so we need to specify `1` and `101` to request a number between 1 and 100.\n\n  > Note: You won’t just know which traits to use and which methods and functions to call from a crate. Instructions for using a crate are in each crate’s documentation. Another neat feature of Cargo is that you can run the cargo doc --open command, which will build documentation provided by all of your dependencies locally and open it in your browser. If you’re interested in other functionality in the rand crate, for example, run cargo doc --open and click rand in the sidebar on the left.\n\nThe second line that we added to the middle of the code prints the secret number. This is useful while we’re developing the program to be able to test it, but we’ll delete it from the final version. It’s not much of a game if the program prints the answer as soon as it starts!\n\nTry running the program a few times:\n\n```text\nFinished dev [unoptimized + debuginfo] target(s) in 0.08s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nThe secret number is: 3\nPlease input your guess.\n2\nYou guessed: 2\n\nFinished dev [unoptimized + debuginfo] target(s) in 0.08s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nThe secret number is: 11\nPlease input your guess.\n7\nYou guessed: 7\n```\n\nYou should get different random numbers, and they should all be numbers between 1 and 100. Great job!\n\nYou can refer to the following chapter in the Rust Programming Language Book:[Generating a Secret Number](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#generating-a-secret-number)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Comparing the Guess to the Secret Number",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 31,
                  "dependency" : {
                    "lesson" : "Programming a Guessing Game",
                    "task" : "Generating a Secret Number",
                    "file" : "src/main.rs",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer
                  "placeholder_text" : "Put your code here to launch it"
                }
              ],
              "is_visible" : true,
              "text" : "Put your code here to launch it"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"processing_a_guess\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[dependencies]\n\nrand = \"0.3.14\""
            }
          },
          "description_text" : "Now that we have user input and a random number, we can compare them. That step is shown in Listing 2-4. Note that this code won’t compile quite yet, as we will explain.\n\n```rust\nuse std::io;\nuse std::cmp::Ordering;\nuse rand::Rng;\n\nfn main() {\n\n    // ---snip---\n\n    println!(\"You guessed: {}\", guess);\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\n##### Listing 2-4: Handling the possible return values of comparing two numbers\n\nThe first new bit here is another `use` statement, bringing a type called `std::cmp::Ordering` into scope from the standard library. Like `Result`, `Ordering` is another enum, but the variants for `Ordering` are `Less`, `Greater`, and `Equal`. These are the three outcomes that are possible when you compare two values.\n\nThen we add five new lines at the bottom that use the `Ordering` type. The `cmp` method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it’s comparing the `guess` to the `secret_number`. Then it returns a variant of the `Ordering` enum we brought into scope with the `use` statement. We use a `match` expression to decide what to do next based on which variant of `Ordering` was returned from the call to `cmp` with the values in `guess` and `secret_number`.\n\nA `match` expression is made up of _arms_. An arm consists of a _pattern_ and the code that should be run if the value given to the beginning of the `match` expression fits that arm’s pattern. Rust takes the value given to `match` and looks through each arm’s pattern in turn. The `match` construct and patterns are powerful features in Rust that let you express a variety of situations your code might encounter and make sure that you handle them all. \n\nLet’s walk through an example of what would happen with the `match` expression used here. Say that the user has guessed 50 and the randomly generated secret number this time is 38. When the code compares 50 to 38, the `cmp` method will return `Ordering::Greater`, because 50 is greater than 38. The `match` expression gets the `Ordering::Greater` value and starts checking each arm’s pattern. It looks at the first arm’s pattern, `Ordering::Less`, and sees that the value `Ordering::Greater` does not match `Ordering::Less`, so it ignores the code in that arm and moves to the next arm. The next arm’s pattern, `Ordering::Greater`, does match `Ordering::Greater`! The associated code in that arm will execute and print `Too big!` to the screen. The match expression ends because it has no need to look at the last arm in this scenario.\n\nHowever, the code in Listing 2-4 won’t compile yet. Let’s try it:\n\n```text\nerror[E0308]: mismatched types\n  --> src/main.rs:21:21\n   |\n21 |     match guess.cmp(&secret_number) {\n   |                     ^^^^^^^^^^^^^^ expected struct `std::string::String`, found integer\n   |\n   = note: expected type `&std::string::String`\n              found type `&{integer}`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: Could not compile `processing_a_guess`\n```\n\nThe core of the error states that there are _mismatched types_. Rust has a strong, static type system. However, it also has type inference. When we wrote `let mut guess = String::new()`, Rust was able to infer that `guess` should be a `String` and didn’t make us write the type. The `secret_number`, on the other hand, is a number type. A few number types can have a value between 1 and 100: `i32`, a 32-bit number; `u32`, an unsigned 32-bit number; `i64`, a 64-bit number; as well as others. Rust defaults to an `i32`, which is the type of `secret_number` unless you add type information elsewhere that would cause Rust to infer a different numerical type. The reason for the error is that Rust cannot compare a string and a number type.\n\nUltimately, we want to convert the `String` the program reads as input into a real number type so we can compare it numerically to the secret number. We can do that by adding the following two lines to the `main` function body:\n\n```rust\n// --snip--\n\n    let mut guess = String::new();\n\n    io::stdin().read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    let guess: u32 = guess.trim().parse()\n        .expect(\"Please type a number!\");\n\n    println!(\"You guessed: {}\", guess);\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\nThe two new lines are:\n\n```rust\nlet guess: u32 = guess.trim().parse()\n    .expect(\"Please type a number!\");\n```\n\nWe create a variable named `guess`. But wait, doesn’t the program already have a variable named `guess`? It does, but Rust allows us to _shadow_ the previous value of guess with a new one. This feature is often used in situations in which you want to convert a value from one type to another type. Shadowing lets us reuse the `guess` variable name rather than forcing us to create two unique variables, such as `guess_str` and `guess` for example. (Section 3 covers shadowing in more detail.)\n\nWe bind `guess` to the expression `guess.trim().parse()`. The `guess` in the expression refers to the original `guess` that was a String with the input in it. The `trim` method on a String instance will eliminate any whitespace at the beginning and end. Although `u32` can contain only numerical characters, the user must press enter to satisfy `read_line`. When the user presses enter, a newline character is added to the string. For example, if the user types 5 and presses enter, `guess` looks like this: `5\\n`. The `\\n` represents “newline,” the result of pressing enter. The `trim` method eliminates `\\n`, resulting in just `5`.\n\nThe `parse` [method on strings](https://doc.rust-lang.org/stable/std/primitive.str.html#method.parse) parses a string into some kind of number. Because this method can parse a variety of number types, we need to tell Rust the exact number type we want by using `let guess: u32`. The colon `(:)` after `guess` tells Rust we’ll annotate the variable’s type. Rust has a few built-in number types; the `u32` seen here is an unsigned, 32-bit integer. It’s a good default choice for a small positive number. You’ll learn about other number types in Section 3. Additionally, the `u32` annotation in this example program and the comparison with `secret_number` means that Rust will infer that `secret_number` should be a `u32` as well. So now the comparison will be between two values of the same type!\n\nThe call to `parse` could easily cause an error. If, for example, the string contained `A★%`, there would be no way to convert that to a number. Because it might fail, the `parse` method returns a `Result` type, much as the `read_line` method does (discussed earlier in [“Handling Potential Failure with the Result Type”](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-the-result-type)). We’ll treat this `Result` the same way by using the `expect` method again. If `parse` returns an `Err` `Result` variant because it couldn’t create a number from the string, the `expect` call will crash the game and print the message we give it. If `parse` can successfully convert the string to a number, it will return the `Ok` variant of `Result`, and `expect` will return the number that we want from the `Ok` value.\n\nLet’s run the program now!\n\n```text\n    Finished dev [unoptimized + debuginfo] target(s) in 0.08s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nThe secret number is: 93\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\n```\n\nNice! Even though spaces were added before the guess, the program still figured out that the user guessed 76. Run the program a few times to verify the different behavior with different kinds of input: guess the number correctly, guess a number that is too high, and guess a number that is too low.\n\nWe have most of the game working now, but the user can make only one guess. Let’s change that by adding a loop!\n\nYou can refer to the following chapter in the Rust Programming Language Book:\n[Generating a Secret Number](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#generating-a-secret-number)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Allowing Multiple Guesses with Looping",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 31,
                  "dependency" : {
                    "lesson" : "Programming a Guessing Game",
                    "task" : "Comparing the Guess to the Secret Number",
                    "file" : "src/main.rs",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer
                  "placeholder_text" : "Put your code here to launch it"
                }
              ],
              "is_visible" : true,
              "text" : "Put your code here to launch it"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"processing_a_guess\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[dependencies]\n\nrand = \"0.3.14\""
            }
          },
          "description_text" : "The 'loop' keyword creates an infinite loop. We’ll add that now to give users more chances at guessing the number:\n\n```rust\n// --snip--\n\n    println!(\"The secret number is: {}\", secret_number);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => println!(\"You win!\"),\n        }\n    }\n}\n```\n\nAs you can see, we’ve moved everything into a loop from the guess input prompt onward. Be sure to indent the lines inside the loop another four spaces each and run the program again. Notice that there is a new problem because the program is doing exactly what we told it to do: ask for another guess forever! It doesn’t seem like the user can quit!\n\nThe user could always interrupt the program by using the keyboard shortcut ⌘F2 or Ctrl F2. But there’s another way to escape this insatiable monster, as mentioned in the `parse` discussion in [“Comparing the Guess to the Secret Number”](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number): if the user enters a non-number answer, the program will crash. The user can take advantage of that in order to quit, as shown here:\n\n```text\n    Finished dev [unoptimized + debuginfo] target(s) in 0.10s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n11\nYou guessed: 11\nToo small!\nPlease input your guess.\n92\nYou guessed: 92\nToo big!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/libcore/result.rs:997:5\nProcess finished with exit code 101\n```\n\nTyping `quit` actually quits the game, but so will any other non-number input. However, this is suboptimal to say the least. We want the game to automatically stop when the correct number is guessed.\n\n### Quitting After a Correct Guess\n\nLet’s program the game to quit when the user wins by adding a `break` statement:\n\n```rust\n// --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nAdding the `break` line after `You win!` makes the program exit the loop when the user guesses the secret number correctly. Exiting the loop also means exiting the program, because the loop is the last part of `main`.\n\n### Handling Invalid Input\n\nTo further refine the game’s behavior, rather than crashing the program when the user inputs a non-number, let’s make the game ignore a non-number so the user can continue guessing. We can do that by altering the line where `guess` is converted from a `String` to a `u32`, as shown in Listing 2-5.\n\n```rust\n// --snip--\n\nio::stdin().read_line(&mut guess)\n    .expect(\"Failed to read line\");\n\nlet guess: u32 = match guess.trim().parse() {\n    Ok(num) => num,\n    Err(_) => continue,\n};\n\nprintln!(\"You guessed: {}\", guess);\n\n// --snip--\n```\n\n##### Listing 2-5: Ignoring a non-number guess and asking for another guess instead of crashing the program\n\nSwitching from an `expect` call to a `match` expression is how you generally move from crashing on an error to handling the error. Remember that `parse` returns a `Result` type and `Result` is an enum that has the variants `Ok` or `Err`. We’re using a `match` expression here, as we did with the `Ordering` result of the `cmp` method.\n\nIf `parse` is able to successfully turn the string into a number, it will return an `Ok` value that contains the resulting number. That `Ok` value will match the first arm’s pattern, and the `match` expression will just return the `num` value that `parse` produced and put inside the `Ok` value. That number will end up right where we want it in the new `guess` variable we’re creating.\n\nIf `parse` is not able to turn the string into a number, it will return an `Err` value that contains more information about the error. The `Err` value does not match the `Ok(num)` pattern in the first match arm, but it does match the `Err(_)` pattern in the second arm. The underscore,`_`, is a catchall value; in this example, we’re saying we want to match all `Err` values, no matter what information they have inside them. So the program will execute the second arm’s code, `continue`, which tells the program to go to the next iteration of the `loop` and ask for another guess. So, effectively, the program ignores all errors that `parse` might encounter!\n\nNow everything in the program should work as expected. Let’s try it:\n\n```text\n    Finished dev [unoptimized + debuginfo] target(s) in 0.41s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nThe secret number is: 42\nPlease input your guess.\n33\nYou guessed: 33\nToo small!\nPlease input your guess.\n51\nYou guessed: 51\nToo big!\nPlease input your guess.\n42\nYou guessed: 42\nYou win!\n\nProcess finished with exit code 0\n```\n\nAwesome! With one tiny final tweak, we will finish the guessing game. Recall that the program is still printing the secret number. That worked well for testing, but it ruins the game. Let’s delete the println! that outputs the secret number. Listing 2-6 shows the final code.\n\n```rust\nuse std::io;\nuse std::cmp::Ordering;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin().read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {}\", guess);\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\n##### Listing 2-6: Complete guessing game code\n\n### Summary\n\nAt this point, you’ve successfully built the guessing game. Congratulations!\n\nThis project was a hands-on way to introduce you to many new Rust concepts: `let`, `match`, methods, associated functions, the use of external crates, and more. In the next few chapters, you’ll learn about these concepts in more detail. Section 3 covers concepts that most programming languages have, such as variables, data types, and functions, and shows how to use them in Rust. Section 4 explores ownership, a feature that makes Rust different from other languages. Section 5 discusses structs and method syntax, and Section 6 explains how enums work.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Storing Values with Variables",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 0,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Programming a Guessing Game",
                    "task" : "Programming a Guesssing Game",
                    "file" : "src/main.rs",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "TODO"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"processing_a_guess\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "Next, we’ll create a place to store the user input, like this:\n\n```rust\nlet mut guess = String::new();\n```\n\nNow the program is getting interesting! There’s a lot going on in this little line. Notice that this is a `let` statement, which is used to create a _variable_. Here’s another example:\n\n```rust\nlet foo = bar;\n```\n\nThis line creates a new variable named `foo` and binds it to the value of the `bar` variable. In Rust, variables are immutable by default. We’ll be discussing this concept in detail in the [“Variables and Mutability”](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html#variables-and-mutability) lesson. The following example shows how to use `mut` before the variable name to make a variable mutable:\n\n```rust\nlet foo = 5; // immutable\nlet mut bar = 5; // mutable\n```\n\n>Note: The // syntax starts a comment that continues until the end of the line. Rust ignores everything in comments, which are discussed in more detail in Section 3.\n\nLet’s return to the guessing game program. You now know that `let mut guess` will introduce a mutable variable named `guess`. On the other side of the equal sign `(=)` is the value that `guess` is bound to, which is the result of calling `String::new`, a function that returns a new instance of a `String`. `String` is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text.\n\nThe `::` syntax in the `::new` line indicates that `new` is an _associated function_ of the `String` type. An associated function is implemented on a type, in this case `String`, rather than on a particular instance of a String. Some languages call this a _static method_.\n\nThis `new` function creates a new, empty string. You’ll find a `new` function on many types, because it’s a common name for a function that makes a new value of some kind.\n\nTo summarize, the `let mut guess = String::new();` line has created a mutable variable that is currently bound to a new, empty instance of a `String`. Whew!\n\nRecall that we included the input/output functionality from the standard library with `use std::io;` on the first line of the program. Now we’ll call the `stdin` function from the io module:\n\n```rust\nio::stdin().read_line(&mut guess)\n    .expect(\"Failed to read line\");\n```\n\nIf we hadn’t listed the use `std::io` line at the beginning of the program, we could have written this function call as `std::io::stdin`. The `stdin` function returns an instance of `std::io::Stdin`, which is a type that represents a handle to the standard input for your terminal.\n\nThe next part of the code, `.read_line(&mut guess)`, calls the `read_line` method on the standard input handle to get input from the user. We’re also passing one argument to `read_line`: `&mut guess`.\n\nThe job of `read_line` is to take whatever the user types into standard input and place that into a string, so it takes that string as an argument. The string argument needs to be mutable so the method can change the string’s content by adding the user input.\n\nThe & indicates that this argument is a reference, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times. References are a complex feature, and one of Rust’s major advantages is how safe and easy it is to use references. You don’t need to know a lot of those details to finish this program. For now, all you need to know is that like variables, references are immutable by default. Hence, you need to write `&mut guess` rather than `&guess` to make it mutable.\n\n### Handling Potential Failure with the Result Type\n\nWe’re not quite done with this line of code. Although what we’ve discussed so far is a single line of text, it’s only the first part of the single logical line of code. The second part is this method:\n\n```rust\n.expect(\"Failed to read line\");\n```\n\nWhen you call a method with the `.foo()` syntax, it’s often wise to introduce a newline and other whitespace to help break up long lines. We could have written this code as:\n\n```rust\nio::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n```\n\nHowever, one long line is difficult to read, so it’s best to divide it: two lines for two method calls. Now let’s discuss what this line does.\n\nAs mentioned earlier, `read_line` puts what the user types into the string we’re passing it, but it also returns a value—in this case, an `io::Result`. Rust has a number of types named `Result` in its standard library: a generic `Result` as well as specific versions for submodules, such as `io::Result`.\n\nThe `Result` types are _[enumerations](https://doc.rust-lang.org/stable/book/ch06-00-enums.html)_, often referred to as _enums_. An enumeration is a type that can have a fixed set of values, and those values are called the enum’s _variants_.\n\nFor `Result`, the variants are `Ok` or `Err`. The `Ok` variant indicates the operation was successful, and inside `Ok` is the successfully generated value. The `Err` variant means the operation failed, and `Err` contains information about how or why the operation failed.\n\nThe purpose of these `Result` types is to encode error-handling information. Values of the `Result` type, like values of any type, have methods defined on them. An instance of `io::Result` has an `expect` [method](https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.expect) that you can call. If this instance of `io::Result` is an `Err` value, `expect` will cause the program to crash and display the message that you passed as an argument to `expect`. If the `read_line` method returns an `Err`, it would likely be the result of an error coming from the underlying operating system. If this instance of `io::Result` is an `Ok` value, `expect` will take the return value that `Ok` is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in what the user entered into standard input.\n\nIf you don’t call `expect`, the program will compile, but you’ll get a warning:\n\n```text\nCompiling processing_a_guess v0.1.0 (/private/var/folders/jz/nfzs7rnd5zl_7r7x3t_8yvdh0000gp/T/rustlings-course/Programming a Guessing Game/task)\nwarning: unused `std::result::Result` that must be used\n  --> src/main.rs:10:5\n   |\n10 |     io::stdin().read_line(&mut guess);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: #[warn(unused_must_use)] on by default\n   = note: this `Result` may be an `Err` variant, which should be handled\n```\n\nRust warns that you haven’t used the `Result` value returned from `read_line`, indicating that the program hasn’t handled a possible error.\n\nThe right way to suppress the warning is to actually write error handling, but because you just want to crash this program when a problem occurs, you can use `expect`.\n\n### Printing Values with println! Placeholders\n\nAside from the closing curly brackets, there’s only one more line to discuss in the code added so far, which is the following:\n\n```rust\nprintln!(\"You guessed: {}\", guess);\n```\n\nThis line prints the string we saved the user’s input in. The set of curly brackets, `{}`, is a placeholder: think of `{}` as little crab pincers that hold a value in place. You can print more than one value using curly brackets: the first set of curly brackets holds the first value listed after the format string, the second set holds the second value, and so on. Printing multiple values in one call to `println!` would look like this:\n\n```rust\nlet x = 5;\nlet y = 10;\n\nprintln!(\"x = {} and y = {}\", x, y);\n```\n\nThis code would print `x = 5 and y = 10`.\n\n### Testing the First Part\n\nLet’s test the first part of the guessing game. Check the code by clicking **Check** button in Task Description window and run it by clicking the green play button in the left gutter:\n\n```text\n   Compiling processing_a_guess v0.1.0 (/private/var/folders/jz/nfzs7rnd5zl_7r7x3t_8yvdh0000gp/T/rustlings-course/Programming a Guessing Game/task)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/processing_a_guess`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n```\n\nAt this point, the first part of the game is done: we’re getting input from the keyboard and then printing it.\n\nYou can refer to the following chapters in the Rust Programming Language Book:_[Storing Values with Variables](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#storing-values-with-variables) and [Handling Potential Failure with the Result Type](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-the-result-type)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "framework"
    },
    {
      "title" : "Variables",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "## Common Programming Concepts\n \nIn this section, we’ll discuss common programming concepts such as:\n\n* Variables and Mutability\n* Data Types\n* Functions\n* Comments\n* Control Flow\n\nThis section covers concepts that appear in almost every programming language and how they work in Rust. Many programming languages have much in common at their core. None of the concepts presented in this chapter are unique to Rust, but we’ll discuss them in the context of Rust and explain the conventions around using these concepts.\n\nSpecifically, you’ll learn about variables, basic types, functions, comments, and control flow. These foundations will be in every Rust program, and learning them early will give you a strong core to start from.\n\n### Keywords\n\nThe Rust language has a set of keywords that are reserved for use by the language only, much as in other languages. Keep in mind that you cannot use these words as names of variables or functions. Most of the keywords have special meanings, and you’ll be using them to do various tasks in your Rust programs; a few have no current functionality associated with them but have been reserved for functionality that might be added to Rust in the future. You can find a list of the keywords in [Appendix A](https://doc.rust-lang.org/stable/book/appendix-01-keywords.html).",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Variables and Mutability",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"variables_and_mutability\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Variables and Mutability\n\nLet's talk about simple variables.\n\nIn Rust, by default variables are immutable. This is one of many nudges Rust gives you to write your code in a way that takes advantage of the safety and easy concurrency that Rust offers. However, you still have the option to make your variables mutable. Let’s explore how and why Rust encourages you to favor immutability and why sometimes you might want to opt out.\n\nWhen a variable is immutable, once a value is bound to a name, you can’t change that value. To illustrate this, let’s modify the main.rs file by replacing its code with the following code that won’t compile just yet:\n\n```rust\nfn main() {\n       let x = 5;\n       println!(\"The value of x is: {}\", x);\n       x = 6;\n       println!(\"The value of x is: {}\", x);\n   }\n```\n\nRun the program by clicking **Run** button.\n\nYou should receive an error message, as shown in this output:\n\n```text\nerror[E0384]: cannot assign twice to immutable variable `x`\n --> src/main.rs:4:5\n  |\n2 |     let x = 5;\n  |         - first assignment to `x`\n3 |     println!(\"The value of x is: {}\", x);\n4 |     x = 6;\n  |     ^^^^^ cannot assign twice to immutable variable\n```\n\nThis example shows how the compiler helps you find errors in your programs. Even though compiler errors can be frustrating, they only mean your program isn’t safely doing what you want it to do yet; they do not mean that you’re not a good programmer! Experienced Rustaceans still get compiler errors.\n\nThe error message indicates that the cause of the error is that you `cannot assign twice to immutable variable x`, because you tried to assign a second value to the immutable x variable.\n\nIt’s important that we get compile-time errors when we attempt to change a value that we previously designated as immutable because this very situation can lead to bugs. If one part of our code operates on the assumption that a value will never change and another part of our code changes that value, it’s possible that the first part of the code won’t do what it was designed to do. The cause of this kind of bug can be difficult to track down after the fact, especially when the second piece of code changes the value only sometimes.\n\nIn Rust, the compiler guarantees that when you state that a value won’t change, it really won’t change. That means that when you’re reading and writing code, you don’t have to keep track of how and where a value might change. Your code is thus easier to reason through.\n\nBut mutability can be very useful. Variables are immutable only by default; you can make them mutable by adding `mut` in front of the variable name. In addition to allowing this value to change, `mut` conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable value.\n\nFor example, let’s change _src/main.rs_ to the following:\n\n```rust\n\nfn main() {\n    let mut x = 5;\n    println!(\"The value of x is: {}\", x);\n    x = 6;\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nWhen we run the program now, we get this:\n\n```text\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30 secs\n     Running `target/debug/variables`\nThe value of x is: 5\nThe value of x is: 6\n```\n\nWe’re allowed to change the value that `x` binds to from `5` to `6` when mut is used. In some cases, you’ll want to make a variable mutable because it makes the code more convenient to write than if it had only immutable variables.\n\nThere are multiple trade-offs to consider in addition to the prevention of bugs. For example, in cases where you’re using large data structures, mutating an instance in place may be faster than copying and returning newly allocated instances. With smaller data structures, creating new instances and writing in a more functional programming style may be easier to think through, so lower performance might be a worthwhile penalty for gaining that clarity.\n\n_You can refer to the following chapter in the Rust Programming Language book: [Variables and Mutability](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html)_\n\nNow let's go ahead to the practice task.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Variables 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"variables1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 16,
                  "length" : 4,
                  "possible_answer" : "___",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    TODO x = 5;\n    println!(\"x has the value {}\", x);\n}"
            }
          },
          "description_text" : "## Task 1\nThe declaration on line 2 is missing a keyword that is needed in Rust to create a new variable binding.\n\n<div class=\"hint\">\nJust replace the <b>TODO</b> placeholder with the needed keyword.\n</div>",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Differences Between Variables and Constants",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"differences_between_variables_and_constants\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Differences Between Variables and Constants\n\nBeing unable to change the value of a variable might have reminded you of another programming concept that most other languages have: constants. Like immutable variables, constants are values that are bound to a name and are not allowed to change, but there are a few differences between constants and variables.\n\nFirst, you aren’t allowed to use `mut` with constants. Constants aren’t just immutable by default—they’re always immutable.\n\nYou declare constants using the `const` keyword instead of the `let` keyword, and the type of the value must be annotated. We’re about to cover types and type annotations in the next section, [Data Types](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#data-types), so don’t worry about the details right now. Just know that you must always annotate the type.\n\nConstants can be declared in any scope, including the global scope, which makes them useful for values that many parts of code need to know about.\n\nThe last difference is that constants may be set only to a constant expression, not the result of a function call or any other value that could only be computed at runtime.\n\nHere’s an example of a constant declaration where the constant’s name is MAX_POINTS and its value is set to 100,000. (Rust’s naming convention for constants is to use all uppercase with underscores between words, and underscores can be inserted in numeric literals to improve readability):\n\n```\nconst MAX_POINTS: u32 = 100_000;\n```\n\nConstants are valid for the entire time a program runs, within the scope they were declared in, making them a useful choice for values in your application domain that multiple parts of the program might need to know about, such as the maximum number of points any player of a game is allowed to earn or the speed of light.\n\nNaming hardcoded values used throughout your program as constants is useful in conveying the meaning of that value to future maintainers of the code. It also helps to have only one place in your code you would need to change if the hardcoded value needed to be updated in the future.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Differences Between Variables and Constants](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Shadowing",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"shadowing\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Shadowing\n\nIn Rust, you can declare a new variable with the same name as a previous variable, and the new variable shadows the previous variable. Rustaceans say that the first variable is _shadowed_ by the second, which means that the second variable’s value is what appears when the variable is used. We can shadow a variable by using the same variable’s name and repeating the use of the `let` keyword as follows:\n\n```rust\nfn main() {\n    let x = 5;\n\n    let x = x + 1;\n\n    let x = x * 2;\n\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nThis program first binds `x` to a value of `5`. Then it shadows `x` by repeating `let x =`, taking the original value and adding `1` so the value of `x` is then `6`. The third `let` statement also shadows `x`, multiplying the previous value by `2` to give `x` a final value of `12`. When we run this program, it will output the following:\n\n```text\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/variables`\nThe value of x is: 12\n```\n\nShadowing is different from marking a variable as `mut`, because we’ll get a compile-time error if we accidentally try to reassign to this variable without using the `let` keyword. By using `let`, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.\n\nThe other difference between `mut` and shadowing is that because we’re effectively creating a new variable when we use the `let` keyword again, we can change the type of the value but reuse the same name. For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, but we really want to store that input as a number:\n\n\nlet spaces = \"   \";\nlet spaces = spaces.len();\n\nThis construct is allowed because the first `spaces` variable is a string type and the second `spaces` variable, which is a brand-new variable that happens to have the same name as the first one, is a number type. Shadowing thus spares us from having to come up with different names, such as `spaces_str` and `spaces_num`; instead, we can reuse the simpler spaces name. However, if we try to use mut for this, as shown here, we’ll get a compile-time error:\n\n```rust\nlet mut spaces = \"   \";\nspaces = spaces.len();\n```\n\nThe error says we’re not allowed to mutate a variable’s type:\n\n```text\nerror[E0308]: mismatched types\n --> src/main.rs:3:14\n  |\n3 |     spaces = spaces.len();\n  |              ^^^^^^^^^^^^ expected &str, found usize\n  |\n  = note: expected type `&str`\n             found type `usize`\n```\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Shadowing](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html#shadowing)_\n\nNow that we’ve explored how variables work, let's apply our knowledge in practice.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Variables 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"variables2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let x;\n    if x == 10 {\n        println!(\"Ten!\");\n    } else {\n        println!(\"Not ten!\");\n    }\n}"
            }
          },
          "description_text" : "## Task 2\n\n  The compiler message is saying that Rust cannot infer the type that the variable binding `x` has with what is given here.\n\n  What happens if you annotate line 2 with a type annotation?\n\n  What if you give `x` a value?\n\n  What if you do both?\n\n  What type should `x` be, anyway?\n\n  What if `x` is the same type as 10? What if it's a different type?",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Variables 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"variables3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 20,
                  "length" : 4,
                  "possible_answer" : "___",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let TODO x = 3;\n    println!(\"Number {}\", x);\n    x = 5;\n    println!(\"Number {}\", x);\n}\n"
            }
          },
          "description_text" : "## Task 3\n\nAs we remember, in Rust variable bindings are immutable by default.\n But here we're trying to reassign a different value to `x`!\n There's a keyword we can use to make a variable binding mutable instead.\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Variables 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"variables4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 21,
                  "length" : 4,
                  "possible_answer" : "_____",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let xTODO;\n    println!(\"Number {}\", x);\n}"
            }
          },
          "description_text" : "## Task 4\n\nOops! In this exercise, we have a variable binding that we've created on line 2, and we're trying to use it on line 3, but we haven't given it a value.\n  We can't print out something that isn't there; try giving x a value!\n  This is an error that can cause bugs that's very easy to make in any programming language -- thankfully the Rust compiler has caught this for us!\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Data Types",
      "task_list" : [
        {
          "name" : "Scalar Types",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"scalar_types\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "## Data Types\n\nEvery value in Rust is of a certain _data type_, which tells Rust what kind of data is being specified so it knows how to work with that data. We’ll look at two data type subsets: scalar and compound.\n\nKeep in mind that Rust is a _statically typed language_, which means that it must know the types of all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it. In cases when many types are possible, such as when we converted a `String` to a numeric type using `parse` in the [“Comparing the Guess to the Secret Number”](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number) task in lesson 2, we must add a type annotation, like this:\n\n```rust\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n```\n\nIf we don’t add the type annotation here, Rust will display the following error, which means the compiler needs more information from us to know which type we want to use:\n\n```text\nerror[E0282]: type annotations needed\n --> src/main.rs:2:9\n  |\n2 |     let guess = \"42\".parse().expect(\"Not a number!\");\n  |         ^^^^^\n  |         |\n  |         cannot infer type for `_`\n  |         consider giving `guess` a type\n```\n\nYou’ll see different type annotations for other data types.\n\n### Scalar Types\n\nA _scalar_ type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters. You may recognize these from other programming languages. Let’s jump into how they work in Rust.\n\n#### Integer Types\n\nAn _integer_ is a number without a fractional component. We used one integer type in Lesson 2, the `u32` type. This type declaration indicates that the value it’s associated with should be an unsigned integer (signed integer types start with `i`, instead of `u`) that takes up 32 bits of space. Table 3-1 shows the built-in integer types in Rust. Each variant in the Signed and Unsigned columns (for example, i16) can be used to declare the type of an integer value.\n\n| Length  | Signed | Unsigned |\n|---------|--------|----------|\n| 8-bit   | i8     | u8       |\n| 16-bit  | i16    | u16      |\n| 32-bit  | i32    | u32      |\n| 64-bit  | i64    | u64      |\n| 128-bit | i128   | u128     |\n| arch    | isize  | usize    |\n\n##### Table 3-1: Integer Types in Rust\n\nEach variant can be either signed or unsigned and has an explicit size. _Signed_ and _unsigned_ refer to whether it’s possible for the number to be negative or positive—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned). It’s like writing numbers on paper: when the sign matters, a number is shown with a plus sign or a minus sign; however, when it’s safe to assume the number is positive, it’s shown with no sign. Signed numbers are stored using [two’s complement](https://en.wikipedia.org/wiki/Two%27s_complement) representation.\n\nEach signed variant can store numbers from -($2^{n-1}$) to $2^{n - 1}$-1 inclusive, where _n_ is the number of bits that variant uses. So an `i8` can store numbers from -($2^7$) to $2^7$-1, which equals -128 to 127. Unsigned variants can store numbers from 0 to $2^n$-1, so a `u8` can store numbers from 0 to $2^8$-1, which equals 0 to 255.\n\nAdditionally, the `isize` and `usize` types depend on the kind of computer your program is running on: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.\n\nYou can write integer literals in any of the forms shown in Table 3-2. Note that all number literals except the byte literal allow a type suffix, such as `57u8`, and `_` as a visual separator, such as `1_000`.\n\n|Number literals|\tExample  |\n|---------------|------------|\n|Decimal        |  98_222    |\n|Hex \t        |   0xff     |\n|Octal \t        |   0o77     |\n|Binary \t    | 0b1111_0000|\n|Byte (u8 only) |\tb'A'     |\n\n##### Table 3-2: Integer Literals in Rust\n\nSo how do you know which type of integer to use? If you’re unsure, Rust’s defaults are generally good choices, and integer types default to `i32`: this type is generally the fastest, even on 64-bit systems. The primary situation in which you’d use `isize` or `usize` is when indexing some sort of collection.\n\n#### Integer Overflow\n\n  Let’s say you have a variable of type `u8` that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, _integer overflow_ will occur. Rust has some interesting rules involving this behavior. When you’re compiling in debug mode, Rust includes checks for integer overflow that cause your program to _panic_ at runtime if this behavior occurs. Rust uses the term panicking when a program exits with an error; we’ll discuss panics in more depth in the [“Unrecoverable Errors with panic!”](https://doc.rust-lang.org/stable/book/ch09-01-unrecoverable-errors-with-panic.html) section in Chapter 9 of the Rust Programming Language Book.\n\n When you’re compiling in release mode with the `--release` flag, Rust does _not_ include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs _two’s complement wrapping_. In short, values greater than the maximum value the type can hold “wrap around” to the minimum of the values the type can hold. In the case of a `u8`, 256 becomes 0, 257 becomes 1, and so on. The program won’t panic, but the variable will have a value that probably isn’t what you were expecting it to have. Relying on integer overflow’s wrapping behavior is considered an error. If you want to wrap explicitly, you can use the standard library type `Wrapping`.\n\n#### Floating-Point Types\n\nRust also has two primitive types for `floating-point numbers`, which are numbers with decimal points. Rust’s floating-point types are `f32` and `f64`, which are 32 bits and 64 bits in size, respectively. The default type is `f64` because on modern CPUs it’s roughly the same speed as `f32` but is capable of more precision.\n\nHere’s an example that shows floating-point numbers in action:\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\nFloating-point numbers are represented according to the IEEE-754 standard. The `f32` type is a single-precision float, and `f64` has double precision.\n\n#### Numeric Operations\n\nRust supports the basic mathematical operations you’d expect for all of the number types: addition, subtraction, multiplication, division, and remainder. The following code shows how you’d use each one in a `let` statement:\n\n```rust\nfn main() {\n    // addition\n    let sum = 5 + 10;\n\n    // subtraction\n    let difference = 95.5 - 4.3;\n\n    // multiplication\n    let product = 4 * 30;\n\n    // division\n    let quotient = 56.7 / 32.2;\n\n    // remainder\n    let remainder = 43 % 5;\n}\n```\n\nEach expression in these statements uses a mathematical operator and evaluates to a single value, which is then bound to a variable. Appendix B contains a list of all operators that Rust provides.\n\n#### The Boolean Type\n\nAs in most other programming languages, a Boolean type in Rust has two possible values: `true` and `false`. Booleans are one byte in size. The Boolean type in Rust is specified using `bool`. For example:\n\n```rust\nfn main() {\n    let t = true;\n\n    let f: bool = false; // with explicit type annotation\n}\n```\n\nThe main way to use Boolean values is through conditionals, such as an `if` expression. We’ll cover how `if` expressions work in Rust in the [“Control Flow”](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#control-flow) section.\n\n#### The Character Type\n\nSo far we’ve worked only with numbers, but Rust supports letters too. Rust’s `char` type is the language’s most primitive alphabetic type, and the following code shows one way to use it. (Note that `char` literals are specified with single quotes, as opposed to string literals, which use double quotes.)\n\n```rust\nfn main() {\n    let c = 'z';\n    let z = 'ℤ';\n    let heart_eyed_cat = '\uD83D\uDE3B';\n}\n```\n\nRust’s `char` type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid `char` values in Rust. Unicode Scalar Values range from `U+0000` to `U+D7FF` and `U+E000` to `U+10FFFF` inclusive. However, a “character” isn’t really a concept in Unicode, so your human intuition for what a “character” is may not match up with what a `char` is in Rust. We’ll discuss this topic in detail in [“Storing UTF-8 Encoded Text with Strings”](https://doc.rust-lang.org/stable/book/ch08-02-strings.html#storing-utf-8-encoded-text-with-strings) in Chapter 8.\n\n_You can refer to the following chapter in the Rust Programming Language Book:[Scalar Types](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#scalar-types)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Primitive Types 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // Booleans (`bool`)\n\n    let is_morning = true;\n    if is_morning {\n        println!(\"Good morning!\");\n    }\n\n    let // Finish the rest of this line like the example! Or make it be false!\n    if is_evening {\n        println!(\"Good evening!\");\n    }\n}\n"
            }
          },
          "description_text" : "## Task 1\n\nFill in the rest of the line that has code missing!\n\nNo hints, there's no tricks, just get used to typing these :)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Primitive Types 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // Characters (`char`)\n\n    let my_first_initial = 'C';\n    if my_first_initial.is_alphabetic() {\n        println!(\"Alphabetical!\");\n    } else if my_first_initial.is_numeric() {\n        println!(\"Numerical!\");\n    } else {\n        println!(\"Neither alphabetic nor numeric!\");\n    }\n\n    let // Finish this line like the example! What's your favorite character?\n    // Try a letter, try a number, try a special character, try a character\n    // from a different language than your own, try an emoji!\n    if your_character.is_alphabetic() {\n        println!(\"Alphabetical!\");\n    } else if your_character.is_numeric() {\n        println!(\"Numerical!\");\n    } else {\n        println!(\"Neither alphabetic nor numeric!\");\n    }\n}\n"
            }
          },
          "description_text" : "## Task 2\n\nFill in the rest of the line that has code missing!\n\nNo hints, there's no tricks, just get used to typing these :)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Compound Types",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"compound_types\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Compound Types\n\n_Compound types_ can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.\n\n#### The Tuple Type\n\nA tuple is a general way of grouping together some number of other values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.\n\nWe create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same. We’ve added optional type annotations in this example:\n\n```rust\nfn main() {\n    let tup: (i32, f64, u8) = (500, 6.4, 1);\n}\n```\n\nThe variable `tup` binds to the entire tuple, because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:\n\n```rust\nfn main() {\n    let tup = (500, 6.4, 1);\n\n    let (x, y, z) = tup;\n\n    println!(\"The value of y is: {}\", y);\n}\n```\n\nThis program first creates a tuple and binds it to the variable `tup`. It then uses a pattern with `let` to take `tup` and turn it into three separate variables, `x`, `y`, and `z`. This is called _destructuring_, because it breaks the single tuple into three parts. Finally, the program prints the value of `y`, which is `6.4`.\n\nIn addition to destructuring through pattern matching, we can access a tuple element directly by using a period `(.)` followed by the index of the value we want to access. For example:\n\n```rust\nfn main() {\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n\n    let five_hundred = x.0;\n\n    let six_point_four = x.1;\n\n    let one = x.2;\n}\n```\n\nThis program creates a tuple, `x`, and then makes new variables for each element by using their index. As with most programming languages, the first index in a tuple is 0.\n\n#### The Array Type\n\nAnother way to have a collection of multiple values is with an _array_. Unlike a tuple, every element of an array must have the same type. Arrays in Rust are different from arrays in some other languages because arrays in Rust have a fixed length, like tuples.\n\nIn Rust, the values going into an array are written as a comma-separated list inside square brackets:\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n}\n```\n\nArrays are useful when you want your data allocated on the stack rather than the heap (we will discuss the stack and the heap more in Chapter 4) or when you want to ensure you always have a fixed number of elements. An array isn’t as flexible as the vector type, though. A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size. If you’re unsure whether to use an array or a vector, you should probably use a vector. Chapter 8 discusses vectors in more detail.\n\nAn example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It’s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 items:\n\n```rust\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\n```\n\nYou would write an array’s type by using square brackets, and within the brackets include the type of each element, a semicolon, and then the number of elements in the array, like so:\n\n```rust\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\n```\n\nHere, `i32` is the type of each element. After the semicolon, the number `5` indicates the element contains five items.\n\nWriting an array’s type this way looks similar to an alternative syntax for initializing an array: if you want to create an array that contains the same value for each element, you can specify the initial value, followed by a semicolon, and then the length of the array in square brackets, as shown here:\n\n```rust\nlet a = [3; 5];\n```\n\nThe array named `a` will contain `5` elements that will all be set to the value `3` initially. This is the same as writing `let a = [3, 3, 3, 3, 3];` but in a more concise way.\n\n#### Accessing Array Elements\n\nAn array is a single chunk of memory allocated on the stack. You can access elements of an array using indexing, like this:\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    let first = a[0];\n    let second = a[1];\n}\n```\n\nIn this example, the variable named `first` will get the value `1`, because that is the value at index `[0]` in the array. The variable named `second` will get the value `2` from index `[1]` in the array.\n\n#### Invalid Array Element Access\n\nWhat happens if you try to access an element of an array that is past the end of the array? Say you change the example to the following code, which will compile but exit with an error when it runs:\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n    let index = 10;\n\n    let element = a[index];\n\n    println!(\"The value of element is: {}\", element);\n}\n```\n\nRunning this code using cargo run produces the following result:\n\n```text\n   Finished dev [unoptimized + debuginfo] target(s) in 0.05s\n   Running `target/debug/Test_Rust_Project`\nthread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10', src/main.rs:5:19\n```\n\nThe compilation didn’t produce any errors, but the program resulted in a _runtime_ error and didn’t exit successfully. When you attempt to access an element using indexing, Rust will check that the index you’ve specified is less than the array length. If the index is greater than or equal to the array length, Rust will panic.\n\nThis is the first example of Rust’s safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing. Chapter 9 discusses more of Rust’s error handling.\n\n_You can refer to the following chapter in the Rust Programming Language Book:[Compound Types](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#compound-types)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Primitive Types 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 24,
                  "length" : 9,
                  "possible_answer" : "_________",
                  "placeholder_text" : "type here"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let a = type here;\n\n    if a.len() >= 100 {\n        println!(\"Wow, that's a big array!\");\n    } else {\n        println!(\"Meh, I eat arrays like that for breakfast.\");\n    }\n}\n"
            }
          },
          "description_text" : "## Task 3\n\nCreate an array with at least 100 elements.\n\n<div class=\"hint\">\n  There's a shorthand to initialize Arrays with a certain size that does not require you to type in 100 items (but you certainly can if you want!).\n\n  For example, you can do:\n  ```rust\n  let array = [\"Are we there yet?\"; 10];\n  ```\n</div>\n\nBonus: what are some other things you could have that would return true for `a.len() >= 100`?\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Primitive Types 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 63,
                  "length" : 4,
                  "possible_answer" : "________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    let nice_slice = TODO;\n\n    if nice_slice == [2, 3, 4] {\n        println!(\"Nice slice!\");\n    } else {\n        println!(\"Not quite what I was expecting... I see: {:?}\", nice_slice);\n    }\n}\n"
            }
          },
          "description_text" : "## Task 4\n\nGet a slice out of Array so that the `if` statement returns `true`.\n\n<div class=\"hint\">\n  Take a look at the Understanding Ownership -> Slices -> Other Slices section of the book:\n  https://doc.rust-lang.org/book/ch04-03-slices.html\n  and use the starting and ending indices of the items in the Array that you want to end up in the slice.\n\n  If you're curious why the right hand of the `==` comparison does not have an ampersand for a reference since the left hand side is a reference, take a look at the Deref coercions section of the book:\n  https://doc.rust-lang.org/book/ch15-02-deref.html\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Primitive Types 5",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types5\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 59,
                  "length" : 4,
                  "possible_answer" : "___________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let cat = (\"Furry McFurson\", 3.5);\n    let TODO = cat;\n\n    println!(\"{} is {} years old.\", name, age);\n}"
            }
          },
          "description_text" : "## Task 5\n\nDestructure the `cat` tuple so that the println will work.\n\n<div class=\"hint\">\n  Take a look at the Data Types -> The Tuple Type section of the book:\n  https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#the-tuple-type\n\n  Particularly the part about destructuring (second to last example in the section).\n\n  You'll need to make a pattern to bind `name` and `age` to the appropriate parts of the tuple. You can do it!!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Primitive Types 6",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"primitive_types6\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 81,
                  "length" : 4,
                  "possible_answer" : "_________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    let numbers = (1, 2, 3);\n    println!(\"The second number is {}\", TODO);\n}"
            }
          },
          "description_text" : "## Task 6\n\nUse a tuple index to access the second element of `numbers`.\n\nYou can put this right into the `println!`.\n\n<div class=\"hint\">\n  While you could use a destructuring `let` for the tuple here, try indexing into it instead, as explained in the last example of the Data Types -> The Tuple Type section of the book:\n  https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#the-tuple-type\n\n  Now you have another tool in your toolbox!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Functions",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    call_me();\n}\n"
            }
          },
          "description_text" : "### Functions\n\nFunctions are pervasive in Rust code. You’ve already seen one of the most important functions in the language: the `main` function, which is the entry point of many programs. You’ve also seen the `fn` keyword, which allows you to declare new functions.\n\nRust code uses _snake case_ as the conventional style for function and variable names. In snake case, all letters are lowercase and underscores separate words. Here’s a program that contains an example function definition:\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n\n    another_function();\n}\n\nfn another_function() {\n    println!(\"Another function.\");\n}\n```\n\nFunction definitions in Rust start with `fn` and have a set of parentheses after the function name. The curly brackets tell the compiler where the function body begins and ends.\n\nWe can call any function we’ve defined by entering its name followed by a set of parentheses. Because `another_function` is defined in the program, it can be called from inside the `main` function. Note that we defined `another_function` _after_ the `main` function in the source code; we could have defined it before as well. Rust doesn’t care where you define your functions, only that they’re defined somewhere.\n\nLet’s run the code from listing above to explore functions further. Place the another_function example in src/main.rs and run it. You should see the following output:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28 secs\n     Running `target/debug/functions`\nHello, world!\nAnother function.\n```\n\nThe lines execute in the order in which they appear in the `main` function. First, the “Hello, world!” message prints, and then `another_function` is called and its message is printed.\n\n### Function Parameters\n   \n   Functions can also be defined to have _parameters_, which are special variables that are part of a function’s signature. When a function has parameters, you can provide it with concrete values for those parameters. Technically, the concrete values are called _arguments_, but in casual conversation, people tend to use the words _parameter_ and _argument_ interchangeably for either the variables in a function’s definition or the concrete values passed in when you call a function.\n   \n   The following rewritten version of `another_function` shows what parameters look like in Rust:\n   \n```rust\n   fn main() {\n       another_function(5);\n   }\n   \n   fn another_function(x: i32) {\n       println!(\"The value of x is: {}\", x);\n   }\n```   \n\n   Try running this program; you should get the following output:\n   \n```text\n   $ cargo run\n      Compiling functions v0.1.0 (file:///projects/functions)\n       Finished dev [unoptimized + debuginfo] target(s) in 1.21 secs\n        Running `target/debug/functions`\n   The value of x is: 5\n```\n   \n   The declaration of `another_function` has one parameter named `x`. The type of `x` is specified as `i32`. When `5` is passed to `another_function`, the `println!` macro puts `5` where the pair of curly brackets were in the format string.\n   \n   In function signatures, you _must_ declare the type of each parameter. This is a deliberate decision in Rust’s design: requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what you mean.\n   \n   When you want a function to have multiple parameters, separate the parameter declarations with commas, like this:\n   \n```rust\n   fn main() {\n       another_function(5, 6);\n   }\n   \n   fn another_function(x: i32, y: i32) {\n       println!(\"The value of x is: {}\", x);\n       println!(\"The value of y is: {}\", y);\n   }\n```   \n   This example creates a function with two parameters, both of which are `i32` types. The function then prints the values in both of its parameters. Note that function parameters don’t all need to be the same type, they just happen to be in this example.\n   \n   Let’s try running this code. Replace the program currently in your functions project’s src/main.rs file with the preceding example and run it:\n   \n```text\n   $ cargo run\n      Compiling functions v0.1.0 (file:///projects/functions)\n       Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n        Running `target/debug/functions`\n   The value of x is: 5\n   The value of y is: 6\n```\n\n   Because we called the function with `5` as the value for `x` and `6` is passed as the value for `y`, the two strings are printed with these values.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [How Functions Work](https://doc.rust-lang.org/stable/book/ch03-03-how-functions-work.html)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Statements and Expressions",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"statements_and_expressions\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Function Bodies Contain Statements and Expressions\n\nFunction bodies are made up of a series of statements optionally ending in an expression. So far, we’ve only covered functions without an ending expression, but you have seen an expression as part of a statement. Because Rust is an expression-based language, this is an important distinction to understand. Other languages don’t have the same distinctions, so let’s look at what statements and expressions are and how their differences affect the bodies of functions.\n\nWe’ve actually already used statements and expressions. _Statements_ are instructions that perform some action and do not return a value. _Expressions_ evaluate to a resulting value. Let’s look at some examples.\n\nCreating a variable and assigning a value to it with the `let` keyword is a statement. In listing below, `let y = 6;` is a statement.\n\n```rust\nfn main() {\n    let y = 6;\n}\n```\n##### Listing 3-1: A main function declaration containing one statement\n\nFunction definitions are also statements; the entire preceding example is a statement in itself.\n\nStatements do not return values. Therefore, you can’t assign a `let` statement to another variable, as the following code tries to do; you’ll get an error:\n\n```rust\nfn main() {\n    let x = (let y = 6);\n}\n```\n\nWhen you run this program, the error you’ll get looks like this:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror: expected expression, found statement (`let`)\n --> src/main.rs:2:14\n  |\n2 |     let x = (let y = 6);\n  |              ^^^\n  |\n  = note: variable declaration using `let` is a statement\n```\n\nThe `let y = 6` statement does not return a value, so there isn’t anything for `x` to bind to. This is different from what happens in other languages, such as C and Ruby, where the assignment returns the value of the assignment. In those languages, you can write `x = y = 6` and have both `x` and `y` have the value `6`; that is not the case in Rust.\n\nExpressions evaluate to something and make up most of the rest of the code that you’ll write in Rust. Consider a simple math operation, such as `5 + 6`, which is an expression that evaluates to the value `11`. Expressions can be part of statements: in Listing 3-1, the `6` in the statement `let y = 6`; is an expression that evaluates to the value `6`. Calling a function is an expression. Calling a macro is an expression. The block that we use to create new scopes, `{}`, is an expression, for example:\n\n```rust\nfn main() {\n    let x = 5;\n\n    let y = {\n        let x = 3;\n        x + 1\n    };\n\n    println!(\"The value of y is: {}\", y);\n}\n```\n\nThis expression:\n\n```rust\n{\n    let x = 3;\n    x + 1\n}\n```\n\nis a block that, in this case, evaluates to `4`. That value gets bound to y as part of the let statement. Note the `x + 1` line without a semicolon at the end, which is unlike most of the lines you’ve seen so far. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value. Keep this in mind as you explore function return values and expressions next.\n\n### Functions with Return Values\n\nFunctions can return values to the code that calls them. We don’t name return values, but we do declare their type after an arrow `(->)`. In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return early from a function by using the `return` keyword and specifying a value, but most functions return the last expression implicitly. Here’s an example of a function that returns a value:\n\n```rust\nfn five() -> i32 {\n    5\n}\n\nfn main() {\n    let x = five();\n\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nThere are no function calls, macros, or even `let` statements in the `five` function—just the number 5 by itself. That’s a perfectly valid function in Rust. Note that the function’s return type is specified too, as `-> i32`. Try running this code; the output should look like this:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30 secs\n     Running `target/debug/functions`\nThe value of x is: 5\n```\n\nThe `5` in `five` is the function’s return value, which is why the return type is `i32`. Let’s examine this in more detail. There are two important bits: first, the line `let x = five();` shows that we’re using the return value of a function to initialize a variable. Because the function `five` returns a `5`, that line is the same as the following:\n\n```rust\nlet x = 5;\n```\n\nSecond, the `five` function has no parameters and defines the type of the return value, but the body of the function is a lonely `5` with no semicolon because it’s an expression whose value we want to return.\n\nLet’s look at another example:\n\n```rust\nfn main() {\n    let x = plus_one(5);\n\n    println!(\"The value of x is: {}\", x);\n}\n\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\nRunning this code will print `The value of x is: 6`. But if we place a semicolon at the end of the line containing `x + 1`, changing it from an expression to a statement, we’ll get an error.\n\n```rust\nfn main() {\n    let x = plus_one(5);\n\n    println!(\"The value of x is: {}\", x);\n}\n\nfn plus_one(x: i32) -> i32 {\n    x + 1;\n}\n```\n\nCompiling this code produces an error, as follows:\n\n```text\nerror[E0308]: mismatched types\n --> src/main.rs:7:28\n  |\n7 |   fn plus_one(x: i32) -> i32 {\n  |  ____________________________^\n8 | |     x + 1;\n  | |          - help: consider removing this semicolon\n9 | | }\n  | |_^ expected i32, found ()\n  |\n  = note: expected type `i32`\n             found type `()`\n```\n\nThe main error message, “mismatched types,” reveals the core issue with this code. The definition of the function `plus_one` says that it will return an `i32`, but statements don’t evaluate to a value, which is expressed by `()`, an empty tuple. Therefore, nothing is returned, which contradicts the function definition and results in an error. In this output, Rust provides a message to possibly help rectify this issue: it suggests removing the semicolon, which would fix the error.\n\n_You can refer to the following chapters in the Rust Programming Language Book: [Function Bodies Contain Statements and Expressions](https://doc.rust-lang.org/stable/book/ch03-03-how-functions-work.html#function-bodies-contain-statements-and-expressions) and [Functions with Return Values](https://doc.rust-lang.org/stable/book/ch03-03-how-functions-work.html#functions-with-return-values)_\n\nLet's do some practice now.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Functions 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"functions1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 30,
                  "length" : 4,
                  "possible_answer" : "____________",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    call_me();\n}\n\nTODO {\n}"
            }
          },
          "description_text" : "### Task 1\n\n  This main function is calling a function that it expects to exist, but the function doesn't exist.\n  It expects this function to have the name `call_me`.\n  It expects this function to not take any arguments and not return a value.\n  Sounds a lot like `main`, doesn't it?\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Functions 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"functions2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 46,
                  "length" : 4,
                  "possible_answer" : "____",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    call_me(3);\n}\n\nfn call_me(num:TODO) {\n    for i in 0..num {\n        println!(\"Ring! Call number {}\", i + 1);\n    }\n}\n"
            }
          },
          "description_text" : "### Task 2\n\n  Rust requires that all parts of a function's signature have type annotations, but `call_me` is missing the type annotation of `num`.\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Functions 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"functions3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 24,
                  "length" : 4,
                  "possible_answer" : "_",
                  "placeholder_text" : "TODO"
                }
              ],
              "is_visible" : true,
              "text" : "fn main() {\n    call_me(TODO);\n}\n\nfn call_me(num: i32) {\n    for i in 0..num {\n        println!(\"Ring! Call number {}\", i + 1);\n    }\n}"
            }
          },
          "description_text" : "### Task 3\n\n  This time, the function *declaration* is okay, but there's something wrong with the place where we're calling the function.\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Functions 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"functions4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let original_price = 51;\n    println!(\"Your sale price is {}\", sale_price(original_price));\n}\n\nfn sale_price(price: i32) -> {\n    if is_even(price) {\n        price - 10\n    } else {\n        price - 3\n    }\n}\n\nfn is_even(num: i32) -> bool {\n    num % 2 == 0\n}"
            }
          },
          "description_text" : "### Task 4\n\nThis store is having a sale where if the price is an even number, you get 10 (money unit) off, but if it's an odd number, it's 3 (money unit) less.\n\n<div class=\"hint\">\n  The error message points to line 6 and says it expects a type after the `->`.\n  This is where the function's return type should be -- take a look at the `is_even` function for an example!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Functions 5",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"functions5\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let answer = square(3);\n    println!(\"The answer is {}\", answer);\n}\n\nfn square(num: i32) -> i32 {\n    num * num;\n}\n"
            }
          },
          "description_text" : "### Task 5\n\nMake me compile!\n\n<div class=\"hint\">\n  This is a really common error that can be fixed by removing one character.\n\n  It happens because Rust distinguishes between expressions and statements: expressions return a value based on its operand, and statements simply return a () type which behaves just like `void` in C/C++ language.\n\n  We want to return a value of `i32` type from the `square` function, but it is returning a `()` type...\n\n  They are not the same. There are two solutions:\n  1. Add a `return` ahead of `num * num;`\n  2. remove `;`, make it to be `num * num`\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Test 1",
      "task_list" : [
        {
          "name" : "Test 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"test1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use test1::calculateprice;\n\n#[test]\nfn verify_test() {\n    let price1 = calculateprice(55);\n    let price2 = calculateprice(40);\n\n    assert_eq!(price1, 55);\n    assert_eq!(price2, 80);\n}\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "pub fn calculateprice(/* TODO */) {\n    // TODO\n}\n"
            }
          },
          "description_text" : "##Test 1\n\nThis is a test for the following sections:\n- Variables\n- Functions\n\nMary is buying apples.\nOne apple usually costs 2 dollars, but if you buy more than 40 at once, each apple only costs 1!\nWrite a function that calculates the price of an order of apples given the order amount.\n\nNo hints this time!\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "If",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "### Control Flow\n\nDeciding whether or not to run some code depending on if a condition is true and deciding to run some code repeatedly while a condition is true are basic building blocks in most programming languages. The most common constructs that let you control the flow of execution of Rust code are `if` expressions and loops.\n\n### if Expressions\n\nAn `if` expression allows you to branch your code depending on conditions. You provide a condition and then state, “If this condition is met, run this block of code. If the condition is not met, do not run this block of code.”\n\nIn the _src/main.rs_ file, input the following:\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number < 5 {\n        println!(\"condition was true\");\n    } else {\n        println!(\"condition was false\");\n    }\n}\n```\n\nAll if expressions start with the keyword `if`, which is followed by a condition. In this case, the condition checks whether or not the variable `number` has a value less than 5. The block of code we want to execute if the condition is true is placed immediately after the condition inside curly brackets. Blocks of code associated with the conditions in `if` expressions are sometimes called arms, just like the arms in `match` expressions.\n\nOptionally, we can also include an `else` expression, which we chose to do here, to give the program an alternative block of code to execute should the condition evaluate to false. If you don’t provide an `else` expression and the condition is false, the program will just skip the `if` block and move on to the next bit of code.\n\nTry running this code; you should see the following output:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/branches`\ncondition was true\n```\n\nLet’s try changing the value of `number` to a value that makes the condition false to see what happens:\n\n```rust\nlet number = 7;\n```\n\nRun the program again, and look at the output:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/branches`\ncondition was false\n```\n\nIt’s also worth noting that the condition in this code must be a `bool`. If the condition isn’t a `bool`, we’ll get an error. For example, try running the following code:\n\n```rust\nfn main() {\n    let number = 3;\n\n   if number {\n        println!(\"number was three\");\n   }\n}\n```\n\nThe `if` condition evaluates to a value of `3` this time, and Rust throws an error:\n\n```text\nerror[E0308]: mismatched types\n --> src/main.rs:4:8\n  |\n4 |     if number {\n  |        ^^^^^^ expected bool, found integral variable\n  |\n  = note: expected type `bool`\n             found type `{integer}`\n```\n\nThe error indicates that Rust expected a `bool` but got an integer. Unlike languages such as Ruby and JavaScript, Rust will not automatically try to convert non-Boolean types to a Boolean. You must be explicit and always provide `if` with a Boolean as its condition. If we want the `if` code block to run only when a number is not equal to `0`, for example, we can change the `if` expression to the following:\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number != 0 {\n        println!(\"number was something other than zero\");\n    }\n}\n```\n\nRunning this code will print `number was something other than zero`.\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Control Flow - if Expressions](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#if-expressions)_\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "else if",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"else_if\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Handling Multiple Conditions with else if\n\nYou can have multiple conditions by combining `if` and `else` in an `else if` expression. For example:\n\n```rust\nfn main() {\n    let number = 6;\n\n    if number % 4 == 0 {\n        println!(\"number is divisible by 4\");\n    } else if number % 3 == 0 {\n        println!(\"number is divisible by 3\");\n    } else if number % 2 == 0 {\n        println!(\"number is divisible by 2\");\n    } else {\n        println!(\"number is not divisible by 4, 3, or 2\");\n    }\n}\n```\n\nThis program has four possible paths it can take. After running it, you should see the following output:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/branches`\nnumber is divisible by 3\n```\n\nWhen this program executes, it checks each `if` expression in turn and executes the first body for which the condition holds true. Note that even though 6 is divisible by 2, we don’t see the output 'number is divisible by 2', nor do we see the 'number is not divisible by 4, 3, or 2` text from the `else` block. That’s because Rust only executes the block for the first true condition, and once it finds one, it doesn’t even check the rest.\n\nUsing too many `else if` expressions can clutter your code, so if you have more than one, you might want to refactor your code. [Chapter 6](https://doc.rust-lang.org/stable/book/ch06-00-enums.html) describes a powerful Rust branching construct called `match` for these cases.\n\n### Using if in a let Statement\n\nBecause `if` is an expression, we can use it on the right side of a `let` statement, as in Listing 3-2:\n\n```rust\nfn main() {\n    let condition = true;\n    let number = if condition {\n        5\n    } else {\n        6\n    };\n\n    println!(\"The value of number is: {}\", number);\n}\n```\n##### Listing 3-2: Assigning the result of an if expression to a variable\n\nThe `number` variable will be bound to a value based on the outcome of the `if` expression. Run this code to see what happens:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30 secs\n     Running `target/debug/branches`\nThe value of number is: 5\n```\n\nRemember that blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions. In this case, the value of the whole `if` expression depends on which block of code executes. This means the values that have the potential to be results from each arm of the `if` must be the same type; in Listing 3-2, the results of both the `if` arm and the `else` arm were `i32` integers. If the types are mismatched, as in the following example, we’ll get an error:\n\n```rust\nfn main() {\n    let condition = true;\n\n    let number = if condition {\n        5\n    } else {\n        \"six\"\n    };\n\n    println!(\"The value of number is: {}\", number);\n}\n```\n\nWhen we try to compile this code, we’ll get an error. The `if` and `else` arms have value types that are incompatible, and Rust indicates exactly where to find the problem in the program:\n\n```text\nerror[E0308]: if and else have incompatible types\n --> src/main.rs:4:18\n  |\n4 |       let number = if condition {\n  |  __________________^\n5 | |         5\n6 | |     } else {\n7 | |         \"six\"\n8 | |     };\n  | |_____^ expected integral variable, found &str\n  |\n  = note: expected type `{integer}`\n             found type `&str`\n```\n\nThe expression in the `if` block evaluates to an integer, and the expression in the `else` block evaluates to a string. This won’t work because variables must have a single type. Rust needs to know at compile time what type the 'number' variable is, definitively, so it can verify at compile time that its type is valid everywhere we use 'number'. Rust wouldn’t be able to do that if the type of 'number' was only determined at runtime; the compiler would be more complex and would make fewer guarantees about the code if it had to keep track of multiple hypothetical types for any variable.\n\n_You can refer to the following chapters in the Rust Programming Language Book: [Handling Multiple Conditions with else if](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#handling-multiple-conditions-with-else-if) and [Using if in a let Statement](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#using-if-in-a-let-statement)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Repetition with Loops",
          "files" : {
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "#[test]\nfn test() {\n    assert!(false, \"Implement tests\");\n}\n"
            },
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "[package]\nname = \"repetition_with_loops\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            }
          },
          "description_text" : "### Repetition with Loops\n\nIt’s often useful to execute a block of code more than once. For this task, Rust provides several _loops_. A loop runs through the code inside the loop body to the end and then starts immediately back at the beginning. \n\nRust has three kinds of loops: `loop`, `while`, and `for`. Let’s try each one.\n\n### Repeating Code with loop\n\nThe `loop` keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.\n\nAs an example, change the src/main.rs file to look like this:\n\n```rust\nfn main() {\n     loop {\n         println!(\"again!\");\n     }\n }\n```\n\nWhen we run this program, we’ll see `again!` printed over and over continuously until we stop the program manually. Press ⌘F2 to interrupt a program that is stuck in a continual loop.\n\nFortunately, Rust provides another, more reliable way to break out of a loop. You can place the `break` keyword within the loop to tell the program when to stop executing the loop.\n\n### Returning Values from Loops\n\nOne of the uses of a `loop` is to retry an operation you know might fail, such as checking whether a thread has completed its job. However, you might need to pass the result of that operation to the rest of your code. To do this, you can add the value you want returned after the `break` expression you use to stop the loop; that value will be returned out of the loop so you can use it, as shown here:\n\n```rust\nfn main() {\n    let mut counter = 0;\n\n    let result = loop {\n        counter += 1;\n\n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n\n    println!(\"The result is {}\", result);\n}\n```\n\nBefore the loop, we declare a variable named `counter` and initialize it to `0`. Then we declare a variable named `result` to hold the value returned from the loop. On every iteration of the loop, we add `1` to the `counter` variable, and then check whether the counter is equal to `10`. When it is, we use the `break` keyword with the value `counter * 2`. After the loop, we use a semicolon to end the statement that assigns the value to `result`. Finally, we print the value in `result`, which in this case is 20.\n\n\n### Conditional Loops with while\n\nIt’s often useful for a program to evaluate a condition within a loop. While the condition is true, the loop runs. When the condition ceases to be true, the program calls `break`, stopping the loop. This loop type could be implemented using a combination of `loop`, `if`, `else`, and `break`; you could try that now in a program, if you’d like.\n\nHowever, this pattern is so common that Rust has a built-in language construct for it, called a `while` loop. Listing 3-3 uses while: the program loops three times, counting down each time, and then, after the loop, it prints another message and exits.\n\n```rust\nfn main() {\n    let mut number = 3;\n\n    while number != 0 {\n        println!(\"{}!\", number);\n\n        number -= 1;\n    }\n\n    println!(\"LIFTOFF!!!\");\n}\n```\n##### Listing 3-3: Using a while loop to run code while a condition holds true\n\nThis construct eliminates a lot of nesting that would be necessary if you used `loop`, `if`, `else`, and `break`, and it’s clearer. While a condition holds true, the code runs; otherwise, it exits the loop.\n\n### Looping Through a Collection with for\n\nYou could use the `while` construct to loop over the elements of a collection, such as an array. For example, let’s look at Listing 3-4:\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n    let mut index = 0;\n\n    while index < 5 {\n        println!(\"the value is: {}\", a[index]);\n\n        index += 1;\n    }\n}\n```\n##### Listing 3-4: Looping through each element of a collection using a while loop\n\nHere, the code counts up through the elements in the array. It starts at index `0`, and then loops until it reaches the final index in the array (that is, when `index < 5` is no longer true). Running this code will print every element in the array:\n\n```text\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n     Running `target/debug/loops`\nthe value is: 10\nthe value is: 20\nthe value is: 30\nthe value is: 40\nthe value is: 50\n```\n\nAll five array values appear in the terminal, as expected. Even though `index` will reach a value of `5` at some point, the loop stops executing before trying to fetch a sixth value from the array.\n\nBut this approach is error prone; we could cause the program to panic if the index length is incorrect. It’s also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop.\n\nAs a more concise alternative, you can use a `for` loop and execute some code for each item in a collection. A for loop looks like the code in Listing 3-5:\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n\n    for element in a.iter() {\n        println!(\"the value is: {}\", element);\n    }\n}\n```\n##### Listing 3-5: Looping through each element of a collection using a for loop\n\nWhen we run this code, we’ll see the same output as in Listing 3-4. More importantly, we’ve now increased the safety of the code and eliminated the chance of bugs that might result from going beyond the end of the array or not going far enough and missing some items.\n\nFor example, in the code in Listing 3-4, if you removed an item from the `a` array but forgot to update the condition to `while index < 4`, the code would panic. Using the `for` loop, you wouldn’t need to remember to change any other code if you changed the number of values in the array.\n\nThe safety and conciseness of `for` loops make them the most commonly used loop construct in Rust. Even in situations in which you want to run some code a certain number of times, as in the countdown example that used a `while` loop in Listing 3-3, most Rustaceans would use a `for` loop. The way to do that would be to use a `Range`, which is a type provided by the standard library that generates all numbers in sequence starting from one number and ending before another number.\n\nHere’s what the countdown would look like using a `for` loop and another method we’ve not yet talked about, `rev`, to reverse the range:\n\n```rust\nfn main() {\n    for number in (1..4).rev() {\n        println!(\"{}!\", number);\n    }\n    println!(\"LIFTOFF!!!\");\n}\n```\n\nThis code is a bit nicer, isn’t it?\n\n_You can refer to the following chapter in the Rust Programming Language Book: [Repetition with Loops](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#repetition-with-loops)_",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "If 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"if1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use if1::bigger;\n\n#[test]\nfn ten_is_bigger_than_eight() {\n    assert_eq!(10, bigger(10, 8));\n}\n\n#[test]\nfn fortytwo_is_bigger_than_thirtytwo() {\n    assert_eq!(42, bigger(32, 42));\n}\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "pub fn bigger(a: i32, b:i32) -> i32 {\n\n    if a > b { a } else { b }\n}\n\nfn main() {\n    assert_eq!(10, bigger(10, 8));\n    assert_eq!(42, bigger(32, 42));\n}\n"
            }
          },
          "description_text" : "## Task 1\n\nComplete this function to return the bigger number!\n\nDo not use:\n\n* `return`\n* another function call\n* additional variables\n\n<div class=\"hint\">\n  It's possible to do this in one line if you would like!\n\n  Some similar examples from other languages:\n  - In C(++) this would be: `a > b ? a : b`\n  - In Python this would be:  `a if a > b else b`\n\n  Remember in Rust that:\n  - the `if` condition does not need to be surrounded by parentheses\n  - `if` / `else` conditionals are expressions\n  - Each condition is followed by a `{}` block.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Tests",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn larger_can_hold_smaller() {\n        let larger = Rectangle { width: 8, height: 7 };\n        let smaller = Rectangle { width: 5, height: 1 };\n\n        assert!(larger.can_hold(&smaller));\n    }\n}"
            }
          },
          "description_text" : "## How to Write Tests\n\nTests are Rust functions that verify that the non-test code is functioning in the expected manner. The bodies of test functions typically perform these three actions:\n\n1.  Set up any needed data or state.\n2.  Run the code you want to test.\n3.  Assert the results are what you expect.\n\nLet’s look at the features Rust provides specifically for writing tests that take these actions, which include the `test` attribute, a few macros, and the `should_panic` attribute.\n\n\n### The Anatomy of a Test Function\n\nAt its simplest, a test in Rust is a function that’s annotated with the `test` attribute. Attributes are metadata about pieces of Rust code; one example is the `derive` attribute we used with structs in Chapter 5\\. To change a function into a test function, add `#[test]` on the line before `fn`. When you run your tests with the `cargo test` command, Rust builds a test runner binary that runs the functions annotated with the `test` attribute and reports on whether each test function passes or fails.\n\nWhen we make a new library project with Cargo, a test module with a test function in it is automatically generated for us. This module helps you start writing your tests so you don’t have to look up the exact structure and syntax of test functions every time you start a new project. You can add as many additional test functions and as many test modules as you want!\n\nWe’ll explore some aspects of how tests work by experimenting with the template test generated for us without actually testing any code. Then we’ll write some real-world tests that call some code that we’ve written and assert that its behavior is correct.\n\nLet's modify the _src/lib.rs_ file. Its contents should look like Listing 11-1.\n\n```rust\n    #[cfg(test)]\n    mod tests {\n        #[test]\n        fn it_works() {\n            assert_eq!(2 + 2, 4);\n        }\n    }\n```\n\n##### Listing 11-1: The test module and function generated automatically by cargo new\n\nFor now, let’s ignore the top two lines and focus on the function to see how it works. Note the `#[test]` annotation before the `fn` line: this attribute indicates this is a test function, so the test runner knows to treat this function as a test. We could also have non-test functions in the `tests` module to help set up common scenarios or perform common operations, so we need to indicate which functions are tests by using the `#[test]` attribute.\n\nThe function body uses the `assert_eq!` macro to assert that 2 + 2 equals 4. This assertion serves as an example of the format for a typical test. Let’s run it to see that this test passes.\n\nRight-click on the 'Intro' task and choose **Open in Terminal** and run the `cargo test` command.\n You will see the same output as in Listing 11-2.\n\n```text\n   $ cargo test\n  Compiling intro v0.1.0\n Finished dev [unoptimized + debuginfo] target(s) in 0.38s\n     Running target/debug/deps/intro-c8e247c4dd65e48f\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\n##### Listing 11-2: The output from running the automatically generated test\n\nCargo compiled and ran the test. After the `Compiling`, `Finished`, and `Running` lines is the line `running 1 test`. The next line shows the name of the generated test function, called `it_works`, and the result of running that test, `ok`. The overall summary of running the tests appears next. The text `test result: ok.` means that all the tests passed, and the portion that reads `1 passed; 0 failed` totals the number of tests that passed or failed.\n\nBecause we don’t have any tests we’ve marked as ignored, the summary shows `0 ignored`. We also haven’t filtered the tests being run, so the end of the summary shows `0 filtered out`. We’ll talk about ignoring and filtering out tests in the next section, [“Controlling How Tests Are Run.”](ch11-02-running-tests.html#controlling-how-tests-are-run)\n\nThe `0 measured` statistic is for benchmark tests that measure performance. Benchmark tests are, as of this writing, only available in nightly Rust. See [the documentation about benchmark tests](../unstable-book/library-features/test.html) to learn more.\n\nThe next part of the test output, which starts with `Doc-tests adder`, is for the results of any documentation tests. We don’t have any documentation tests yet, but Rust can compile any code examples that appear in our API documentation. This feature helps us keep our docs and our code in sync! We’ll discuss how to write documentation tests in the [“Documentation Comments as Tests”](ch14-02-publishing-to-crates-io.html#documentation-comments-as-tests) section of Chapter 14\\. For now, we’ll ignore the `Doc-tests` output.\n\nLet’s change the name of our test to see how that changes the test output. Change the `it_works` function to a different name, such as `exploration`, like so:\n\n```rust\n    #[cfg(test)]\n    mod tests {\n        #[test]\n        fn exploration() {\n            assert_eq!(2 + 2, 4);\n        }\n    }\n```\n\nThen run `cargo test` again. The output now shows `exploration` instead of `it_works`:\n\n```text\nCompiling intro v0.1.0\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32s\n     Running target/debug/deps/intro-c8e247c4dd65e48f\n\nrunning 1 test\ntest tests::exploration ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nLet’s add another test, but this time we’ll make a test that fails! Tests fail when something in the test function panics. Each test is run in a new thread, and when the main thread sees that a test thread has died, the test is marked as failed. We talked about the simplest way to cause a panic in Chapter 9, which is to call the `panic!` macro. Enter the new test, `another`, so your _src/lib.rs_ file looks like Listing 11-3.\n\n```rust\n    #[cfg(test)]\n    mod tests {\n        #[test]\n        fn exploration() {\n            assert_eq!(2 + 2, 4);\n        }\n\n        #[test]\n        fn another() {\n            panic!(\"Make this test fail\");\n        }\n    }\n```\n\n##### Listing 11-3: Adding a second test that will fail because we call the panic! macro\n\nRun the tests again using `cargo test`. The output should look like Listing 11-4, which shows that our `exploration` test passed and `another` failed.\n```text\nCompiling intro v0.1.0\n    Finished dev [unoptimized + debuginfo] target(s) in 0.34s\n     Running target/debug/deps/intro-c8e247c4dd65e48f\n\nrunning 2 tests\ntest tests::exploration ... ok\ntest tests::another ... FAILED\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\n##### Listing 11-4: Test results when one test passes and one test fails\n\nInstead of `ok`, the line `test tests::another` shows `FAILED`. Two new sections appear between the individual results and the summary: the first section displays the detailed reason for each test failure. In this case, `another` failed because it `panicked at 'Make this test fail'`, which happened on line 10 in the _src/lib.rs_ file. The next section lists just the names of all the failing tests, which is useful when there are lots of tests and lots of detailed failing test output. We can use the name of a failing test to run just that test to more easily debug it; we’ll talk more about ways to run tests in the [“Controlling How Tests Are Run”](ch11-02-running-tests.html#controlling-how-tests-are-run) section.\n\nThe summary line displays at the end: overall, our test result is `FAILED`. We had one test pass and one test fail.\n\nNow that you’ve seen what the test results look like in different scenarios, let’s look at some macros other than `panic!` that are useful in tests.\n\n### Checking Results with the assert! Macro\n\nThe `assert!` macro, provided by the standard library, is useful when you want to ensure that some condition in a test evaluates to `true`. We give the `assert!` macro an argument that evaluates to a Boolean. If the value is `true`, `assert!` does nothing and the test passes. If the value is `false`, the `assert!` macro calls the `panic!` macro, which causes the test to fail. Using the `assert!` macro helps us check that our code is functioning in the way we intend.\n\nIn Chapter 5, Listing 5-15, we used a `Rectangle` struct and a `can_hold` method, which are repeated here in Listing 11-5\\. Let’s put this code in the _src/lib.rs_ file and write some tests for it using the `assert!` macro.\n\n```rust\n    #[derive(Debug)]\n    struct Rectangle {\n        width: u32,\n        height: u32,\n    }\n\n    impl Rectangle {\n        fn can_hold(&self, other: &Rectangle) -> bool {\n            self.width > other.width && self.height > other.height\n        }\n    }\n```\n\n##### Listing 11-5: Using the `Rectangle` struct and its `can_hold` method from Chapter 5\n\nThe `can_hold` method returns a Boolean, which means it’s a perfect use case for the `assert!` macro. In Listing 11-6, we write a test that exercises the `can_hold` method by creating a `Rectangle` instance that has a width of 8 and a height of 7 and asserting that it can hold another `Rectangle` instance that has a width of 5 and a height of 1.\n\n```rust\n   #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        fn larger_can_hold_smaller() {\n            let larger = Rectangle { width: 8, height: 7 };\n            let smaller = Rectangle { width: 5, height: 1 };\n\n            assert!(larger.can_hold(&smaller));\n        }\n    }\n```\n\n##### Listing 11-6: A test for `can_hold` that checks whether a larger rectangle can indeed hold a smaller rectangle\n\nNote that we’ve added a new line inside the `tests` module: `use super::*;`. The `tests` module is a regular module that follows the usual visibility rules we covered in Chapter 7 in the [“Modules as the Privacy Boundary”](ch07-02-defining-modules-to-control-scope-and-privacy.html) section. Because the `tests` module is an inner module, we need to bring the code under test in the outer module into the scope of the inner module. We use a glob here so anything we define in the outer module is available to this `tests` module.\n\nWe’ve named our test `larger_can_hold_smaller`, and we’ve created the two `Rectangle` instances that we need. Then we called the `assert!` macro and passed it the result of calling `larger.can_hold(&smaller)`. This expression is supposed to return `true`, so our test should pass. Let’s find out!\n\n```text\n    running 1 test\n    test tests::larger_can_hold_smaller ... ok\n\n    test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nIt does pass! Let’s add another test, this time asserting that a smaller rectangle cannot hold a larger rectangle:\n\n```rust\n    #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        fn larger_can_hold_smaller() {\n            // --snip--\n        }\n\n        #[test]\n        fn smaller_cannot_hold_larger() {\n            let larger = Rectangle { width: 8, height: 7 };\n            let smaller = Rectangle { width: 5, height: 1 };\n\n            assert!(!smaller.can_hold(&larger));\n        }\n    }\n```\n\nBecause the correct result of the `can_hold` function in this case is `false`, we need to negate that result before we pass it to the `assert!` macro. As a result, our test will pass if `can_hold` returns `false`:\n\n```text\n    running 2 tests\n    test tests::smaller_cannot_hold_larger ... ok\n    test tests::larger_can_hold_smaller ... ok\n\n    test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nTwo tests that pass! Now let’s see what happens to our test results when we introduce a bug in our code. Let’s change the implementation of the `can_hold` method by replacing the greater than sign with a less than sign when it compares the widths:\n\n```rust\n    # #[derive(Debug)]\n    # struct Rectangle {\n    #     width: u32,\n    #     height: u32,\n    # }\n    // --snip--\n\n    impl Rectangle {\n        fn can_hold(&self, other: &Rectangle) -> bool {\n            self.width < other.width && self.height > other.height\n        }\n    }\n```\n\nRunning the tests now produces the following:\n\n    running 2 tests\n    test tests::smaller_cannot_hold_larger ... ok\n    test tests::larger_can_hold_smaller ... FAILED\n\n    failures:\n\n    ---- tests::larger_can_hold_smaller stdout ----\n    thread 'tests::larger_can_hold_smaller' panicked at 'assertion failed:\n    larger.can_hold(&smaller)', src/lib.rs:22:9\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n    failures:\n        tests::larger_can_hold_smaller\n\n    test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nOur tests caught the bug! Because `larger.width` is 8 and `smaller.width` is 5, the comparison of the widths in `can_hold` now returns `false`: 8 is not less than 5.\n\n[\n\n### Testing Equality with the `assert_eq!` and `assert_ne!` Macros\n\n](ch11-01-writing-tests.html#testing-equality-with-the-assert_eq-and-assert_ne-macros)\n\nA common way to test functionality is to compare the result of the code under test to the value you expect the code to return to make sure they’re equal. You could do this using the `assert!` macro and passing it an expression using the `==` operator. However, this is such a common test that the standard library provides a pair of macros—`assert_eq!` and `assert_ne!`—to perform this test more conveniently. These macros compare two arguments for equality or inequality, respectively. They’ll also print the two values if the assertion fails, which makes it easier to see _why_ the test failed; conversely, the `assert!` macro only indicates that it got a `false` value for the `==` expression, not the values that lead to the `false` value.\n\nIn Listing 11-7, we write a function named `add_two` that adds `2` to its parameter and returns the result. Then we test this function using the `assert_eq!` macro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n<pre>\n\n    # fn main() {}\n    pub fn add_two(a: i32) -> i32 {\n        a + 2\n    }\n\n    #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        fn it_adds_two() {\n            assert_eq!(4, add_two(2));\n        }\n    }\n\n</pre>\n\n<span class=\"caption\">Listing 11-7: Testing the function `add_two` using the `assert_eq!` macro</span>\n\nLet’s check that it passes!\n\n    running 1 test\n    test tests::it_adds_two ... ok\n\n    test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\nThe first argument we gave to the `assert_eq!` macro, `4`, is equal to the result of calling `add_two(2)`. The line for this test is `test tests::it_adds_two ... ok`, and the `ok` text indicates that our test passed!\n\nLet’s introduce a bug into our code to see what it looks like when a test that uses `assert_eq!` fails. Change the implementation of the `add_two` function to instead add `3`:\n\n<pre>\n\n    # fn main() {}\n    pub fn add_two(a: i32) -> i32 {\n        a + 3\n    }\n\n</pre>\n\nRun the tests again:\n\n    running 1 test\n    test tests::it_adds_two ... FAILED\n\n    failures:\n\n    ---- tests::it_adds_two stdout ----\n    thread 'tests::it_adds_two' panicked at 'assertion failed: `(left == right)`\n      left: `4`,\n     right: `5`', src/lib.rs:11:9\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n    failures:\n        tests::it_adds_two\n\n    test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nOur test caught the bug! The `it_adds_two` test failed, displaying the message `assertion failed: `(left == right)`` and showing that `left` was `4` and `right` was `5`. This message is useful and helps us start debugging: it means the `left` argument to `assert_eq!` was `4` but the `right` argument, where we had `add_two(2)`, was `5`.\n\nNote that in some languages and test frameworks, the parameters to the functions that assert two values are equal are called `expected` and `actual`, and the order in which we specify the arguments matters. However, in Rust, they’re called `left` and `right`, and the order in which we specify the value we expect and the value that the code under test produces doesn’t matter. We could write the assertion in this test as `assert_eq!(add_two(2), 4)`, which would result in a failure message that displays `assertion failed: `(left == right)`` and that `left` was `5` and `right` was `4`.\n\nThe `assert_ne!` macro will pass if the two values we give it are not equal and fail if they’re equal. This macro is most useful for cases when we’re not sure what a value _will_ be, but we know what the value definitely _won’t_ be if our code is functioning as we intend. For example, if we’re testing a function that is guaranteed to change its input in some way, but the way in which the input is changed depends on the day of the week that we run our tests, the best thing to assert might be that the output of the function is not equal to the input.\n\nUnder the surface, the `assert_eq!` and `assert_ne!` macros use the operators `==` and `!=`, respectively. When the assertions fail, these macros print their arguments using debug formatting, which means the values being compared must implement the `PartialEq` and `Debug` traits. All the primitive types and most of the standard library types implement these traits. For structs and enums that you define, you’ll need to implement `PartialEq` to assert that values of those types are equal or not equal. You’ll need to implement `Debug` to print the values when the assertion fails. Because both traits are derivable traits, as mentioned in Listing 5-12 in Chapter 5, this is usually as straightforward as adding the `#[derive(PartialEq, Debug)]` annotation to your struct or enum definition. See Appendix C, [“Derivable Traits,”](appendix-03-derivable-traits.html) for more details about these and other derivable traits.\n\n[\n\n### Adding Custom Failure Messages\n\n](ch11-01-writing-tests.html#adding-custom-failure-messages)\n\nYou can also add a custom message to be printed with the failure message as optional arguments to the `assert!`, `assert_eq!`, and `assert_ne!` macros. Any arguments specified after the one required argument to `assert!` or the two required arguments to `assert_eq!` and `assert_ne!` are passed along to the `format!` macro (discussed in Chapter 8 in the [“Concatenation with the `+` Operator or the `format!` Macro”](ch08-02-strings.html#concatenation-with-the--operator-or-the-format-macro) section), so you can pass a format string that contains `{}` placeholders and values to go in those placeholders. Custom messages are useful to document what an assertion means; when a test fails, you’ll have a better idea of what the problem is with the code.\n\nFor example, let’s say we have a function that greets people by name and we want to test that the name we pass into the function appears in the output:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n<pre>\n\n    # fn main() {}\n    pub fn greeting(name: &str) -> String {\n        format!(\"Hello {}!\", name)\n    }\n\n    #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        fn greeting_contains_name() {\n            let result = greeting(\"Carol\");\n            assert!(result.contains(\"Carol\"));\n        }\n    }\n\n</pre>\n\nThe requirements for this program haven’t been agreed upon yet, and we’re pretty sure the `Hello` text at the beginning of the greeting will change. We decided we don’t want to have to update the test when the requirements change, so instead of checking for exact equality to the value returned from the `greeting` function, we’ll just assert that the output contains the text of the input parameter.\n\nLet’s introduce a bug into this code by changing `greeting` to not include `name` to see what this test failure looks like:\n\n<pre>\n\n    # fn main() {}\n    pub fn greeting(name: &str) -> String {\n        String::from(\"Hello!\")\n    }\n\n</pre>\n\nRunning this test produces the following:\n\n    running 1 test\n    test tests::greeting_contains_name ... FAILED\n\n    failures:\n\n    ---- tests::greeting_contains_name stdout ----\n    thread 'tests::greeting_contains_name' panicked at 'assertion failed:\n    result.contains(\"Carol\")', src/lib.rs:12:9\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n    failures:\n        tests::greeting_contains_name\n\nThis result just indicates that the assertion failed and which line the assertion is on. A more useful failure message in this case would print the value we got from the `greeting` function. Let’s change the test function, giving it a custom failure message made from a format string with a placeholder filled in with the actual value we got from the `greeting` function:\n\n    #[test]\n    fn greeting_contains_name() {\n        let result = greeting(\"Carol\");\n        assert!(\n            result.contains(\"Carol\"),\n            \"Greeting did not contain name, value was `{}`\", result\n        );\n    }\n\nNow when we run the test, we’ll get a more informative error message:\n\n    ---- tests::greeting_contains_name stdout ----\n    thread 'tests::greeting_contains_name' panicked at 'Greeting did not\n    contain name, value was `Hello!`', src/lib.rs:12:9\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\n\nWe can see the value we actually got in the test output, which would help us debug what happened instead of what we were expecting to happen.\n\n[\n\n### Checking for Panics with `should_panic`\n\n](ch11-01-writing-tests.html#checking-for-panics-with-should_panic)\n\nIn addition to checking that our code returns the correct values we expect, it’s also important to check that our code handles error conditions as we expect. For example, consider the `Guess` type that we created in Chapter 9, Listing 9-10\\. Other code that uses `Guess` depends on the guarantee that `Guess` instances will contain only values between 1 and 100\\. We can write a test that ensures that attempting to create a `Guess` instance with a value outside that range panics.\n\nWe do this by adding another attribute, `should_panic`, to our test function. This attribute makes a test pass if the code inside the function panics; the test will fail if the code inside the function doesn’t panic.\n\nListing 11-8 shows a test that checks that the error conditions of `Guess::new` happen when we expect them to.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n<pre>\n\n    # fn main() {}\n    pub struct Guess {\n        value: i32,\n    }\n\n    impl Guess {\n        pub fn new(value: i32) -> Guess {\n            if value < 1 || value > 100 {\n                panic!(\"Guess value must be between 1 and 100, got {}.\", value);\n            }\n\n            Guess {\n                value\n            }\n        }\n    }\n\n    #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        #[should_panic]\n        fn greater_than_100() {\n            Guess::new(200);\n        }\n    }\n\n</pre>\n\n<span class=\"caption\">Listing 11-8: Testing that a condition will cause a `panic!`</span>\n\nWe place the `#[should_panic]` attribute after the `#[test]` attribute and before the test function it applies to. Let’s look at the result when this test passes:\n\n    running 1 test\n    test tests::greater_than_100 ... ok\n\n    test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\nLooks good! Now let’s introduce a bug in our code by removing the condition that the `new` function will panic if the value is greater than 100:\n\n<pre>\n\n    # fn main() {}\n    # pub struct Guess {\n    #     value: i32,\n    # }\n    #\n    // --snip--\n\n    impl Guess {\n        pub fn new(value: i32) -> Guess {\n            if value < 1  {\n                panic!(\"Guess value must be between 1 and 100, got {}.\", value);\n            }\n\n            Guess {\n                value\n            }\n        }\n    }\n\n</pre>\n\nWhen we run the test in Listing 11-8, it will fail:\n\n    running 1 test\n    test tests::greater_than_100 ... FAILED\n\n    failures:\n\n    failures:\n        tests::greater_than_100\n\n    test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nWe don’t get a very helpful message in this case, but when we look at the test function, we see that it’s annotated with `#[should_panic]`. The failure we got means that the code in the test function did not cause a panic.\n\nTests that use `should_panic` can be imprecise because they only indicate that the code has caused some panic. A `should_panic` test would pass even if the test panics for a different reason from the one we were expecting to happen. To make `should_panic` tests more precise, we can add an optional `expected` parameter to the `should_panic` attribute. The test harness will make sure that the failure message contains the provided text. For example, consider the modified code for `Guess` in Listing 11-9 where the `new` function panics with different messages depending on whether the value is too small or too large.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n<pre>\n\n    # fn main() {}\n    # pub struct Guess {\n    #     value: i32,\n    # }\n    #\n    // --snip--\n\n    impl Guess {\n        pub fn new(value: i32) -> Guess {\n            if value < 1 {\n                panic!(\"Guess value must be greater than or equal to 1, got {}.\",\n                       value);\n            } else if value > 100 {\n                panic!(\"Guess value must be less than or equal to 100, got {}.\",\n                       value);\n            }\n\n            Guess {\n                value\n            }\n        }\n    }\n\n    #[cfg(test)]\n    mod tests {\n        use super::*;\n\n        #[test]\n        #[should_panic(expected = \"Guess value must be less than or equal to 100\")]\n        fn greater_than_100() {\n            Guess::new(200);\n        }\n    }\n\n</pre>\n\n<span class=\"caption\">Listing 11-9: Testing that a condition will cause a `panic!` with a particular panic message</span>\n\nThis test will pass because the value we put in the `should_panic` attribute’s `expected` parameter is a substring of the message that the `Guess::new` function panics with. We could have specified the entire panic message that we expect, which in this case would be `Guess value must be less than or equal to 100, got 200.` What you choose to specify in the expected parameter for `should_panic` depends on how much of the panic message is unique or dynamic and how precise you want your test to be. In this case, a substring of the panic message is enough to ensure that the code in the test function executes the `else if value > 100` case.\n\nTo see what happens when a `should_panic` test with an `expected` message fails, let’s again introduce a bug into our code by swapping the bodies of the `if value < 1` and the `else if value > 100` blocks:\n\n    if value < 1 {\n        panic!(\"Guess value must be less than or equal to 100, got {}.\", value);\n    } else if value > 100 {\n        panic!(\"Guess value must be greater than or equal to 1, got {}.\", value);\n    }\n\nThis time when we run the `should_panic` test, it will fail:\n\n    running 1 test\n    test tests::greater_than_100 ... FAILED\n\n    failures:\n\n    ---- tests::greater_than_100 stdout ----\n    thread 'tests::greater_than_100' panicked at 'Guess value must be\n    greater than or equal to 1, got 200.', src/lib.rs:11:13\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\n    note: Panic did not include expected string 'Guess value must be less than or\n    equal to 100'\n\n    failures:\n        tests::greater_than_100\n\n    test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nThe failure message indicates that this test did indeed panic as we expected, but the panic message did not include the expected string `'Guess value must be less than or equal to 100'`. The panic message that we did get in this case was `Guess value must be greater than or equal to 1, got 200.` Now we can start figuring out where our bug is!\n\n[\n\n### Using `Result<T, E>` in Tests\n\n](ch11-01-writing-tests.html#using-resultt-e-in-tests)\n\nSo far, we’ve written tests that panic when they fail. We can also write tests that use `Result<T, E>`! Here’s the test from Listing 11-1, rewritten to use `Result<T, E>` and return an `Err` instead of panicking:\n\n<pre>\n\n    # #![allow(unused_variables)]\n    #fn main() {\n    #[cfg(test)]\n    mod tests {\n        #[test]\n        fn it_works() -> Result<(), String> {\n            if 2 + 2 == 4 {\n                Ok(())\n            } else {\n                Err(String::from(\"two plus two does not equal four\"))\n            }\n        }\n    }\n    #}\n\n</pre>\n\nThe `it_works` function now has a return type, `Result<(), String>`. In the body of the function, rather than calling the `assert_eq!` macro, we return `Ok(())` when the test passes and an `Err` with a `String` inside when the test fails.\n\nWriting tests so they return a `Result<T, E>` enables you to use the question mark operator in the body of tests, which can be a convenient way to write tests that should fail if any operation within them returns an `Err` variant.\n\nYou can’t use the `#[should_panic]` annotation on tests that use `Result<T, E>`. Instead, you should return an `Err` value directly when the test should fail.\n\nNow that you know several ways to write tests, let’s look at what is happening when we run our tests and explore the different options we can use with `cargo test`.\n\n- [Writing Tests](https://doc.rust-lang.org/stable/book/ch11-01-writing-tests.html)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Tests 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"tests1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#[cfg(test)]\nmod tests {\n    #[test]\n    fn you_can_assert() {\n        assert!();\n    }\n}\n"
            }
          },
          "description_text" : "Tests are important to ensure that your code does what you think it should do.\n\nThis test has a problem with it -- make the test compile! Make the test pass!\nMake the test fail!\n\n<div class=\"hint\">\n  You don't even need to write any code to test -- you can just test values and run that, even though you wouldn't do that in real life :)\n  `assert!` is a macro that needs an argument.\n  Depending on the value of the argument, `assert!` will do nothing (in which case the test will pass) or `assert!` will panic (in which case the test will fail).\n  So try giving different values  to `assert!` and see which ones compile, which ones pass, and which ones fail :)\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Tests 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"tests2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#[cfg(test)]\nmod tests {\n    #[test]\n    fn you_can_assert_eq() {\n        assert_eq!();\n    }\n}\n"
            }
          },
          "description_text" : "This test has a problem with it -- make the test compile!\nMake the test pass!\nMake the test fail!\n\n<div class=\"hint\">\n  Like the previous exercise, you don't need to write any code to get this test to compile and run.\n  `assert_eq!` is a macro that takes two arguments and compares them.\n  Try giving it two values that are equal!\n  Try giving it two arguments that are different!\n  Try giving it two values that are of different types!\n  Try switching which argument comes first and which comes second!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Tests 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"tests3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "pub fn is_even(num: i32) -> bool {\n    num % 2 == 0\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn is_true_when_even() {\n        assert!();\n    }\n}\n"
            }
          },
          "description_text" : "This test isn't testing our function -- make it do that in such a way that the test passes.\nThen write a second test that tests whether we get the result we expect to get when we call `is_even(5)`.\n\n<div class=\"hint\">\n  You can call a function right where you're passing arguments to `assert!` -- so you could do something like `assert!(having_fun())`.\n  If you want to check that you indeed get false, you can negate the result of what you're doing using `!`, like `assert!(!having_fun())`.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Test 2",
      "task_list" : [
        {
          "name" : "Test 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"test2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "pub fn times_two(num: i32) -> i32 {\n    num * 2\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn returns_twice_of_positive_numbers() {\n        assert_eq!(times_two(4), ???);\n    }\n\n    #[test]\n    fn returns_twice_of_negative_numbers() {\n        // TODO write an assert for `times_two(-4)`\n    }\n}\n"
            }
          },
          "description_text" : "This is a test for the following sections:\n- Tests\n\nThis test isn't testing our function -- make it do that in such a way that the test passes.\nThen write a second test that tests that we get the result we expect to get when we call `times_two` with a negative number.\n\nNo hints, you can do this :)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Strings",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "### Strings\n\nRust has two string types, a string slice (`&str`) and an owned string (`String`).\nWe're not going to dictate when you should use which one, but we'll show you how\nto identify and create them, as well as use them.\n\n#### Book Sections\n\n- [Strings](https://doc.rust-lang.org/stable/book/ch08-02-strings.html)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Strings 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"strings1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let answer = current_favorite_color();\n    println!(\"My current favorite color is {}\", answer);\n}\n\nfn current_favorite_color() -> String {\n    \"blue\"\n}\n"
            }
          },
          "description_text" : "Make me compile without changing the function signature!\n\n<div class=\"hint\">\n  The `current_favorite_color` function is currently returning a string slice with the `'static` lifetime.\n  We know this because the data of the string lives in our code itself -- it doesn't come from a file or user input or another program -- so it will live as long as our program lives.\n  But it is still a string slice.\n  There's one way to create a `String` by converting a string slice covered in the Strings chapter of the book, and another way that uses the `From` trait.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Strings 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"strings2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let word = String::from(\"green\"); // Try not changing this line :)\n    if is_a_color_word(word) {\n        println!(\"That is a color word I know!\");\n    } else {\n        println!(\"That is not a color word I know.\");\n    }\n}\n\nfn is_a_color_word(attempt: &str) -> bool {\n    attempt == \"green\" || attempt == \"blue\" || attempt == \"red\"\n}\n"
            }
          },
          "description_text" : "Make me compile without changing the function signature!\n\n<div class=\"hint\">\n  Yes, it would be really easy to fix this by just changing the value bound to `word` to be a string slice instead of a `String`, wouldn't it??\n  There is a way to add one character to line 6, though, that will coerce the `String` into a string slice.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Test 3",
      "task_list" : [
        {
          "name" : "Test 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"test3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn string_slice(arg: &str) { println!(\"{}\", arg); }\n\nfn string(arg: String) { println!(\"{}\", arg); }\n\nfn main() {\n    (\"blue\");\n    (\"red\".to_string());\n    (String::from(\"hi\"));\n    (\"rust is fun!\".to_owned());\n    (\"nice weather\".into());\n    (format!(\"Interpolation {}\", \"Station\"));\n    (&String::from(\"abc\")[0..1]);\n    (\"  hello there \".trim());\n    (\"Happy Monday!\".to_string().replace(\"Mon\", \"Tues\"));\n    (\"mY sHiFt KeY iS sTiCkY\".to_lowercase());\n}\n"
            }
          },
          "description_text" : "This is a test for the following sections:\n- Strings\n\nOk, here are a bunch of values -- some are `Strings`, some are `&strs`.\nYour task is to call one of these two functions on each value depending on what you think each value is.\nThat is, add either `string_slice` or `string` before the parentheses on each line.\nIf you're right, it will compile!\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Modules",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "### Modules\n\nIn this section we'll give you an introduction to Rust's module system.\n\n#### Book Sections\n\n- [The Module System](https://doc.rust-lang.org/stable/book/ch07-02-modules-and-use-to-control-scope-and-privacy.html)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Modules 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"modules1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "mod sausage_factory {\n    fn make_sausage() {\n        println!(\"sausage!\");\n    }\n}\n\nfn main() {\n    sausage_factory::make_sausage();\n}\n"
            }
          },
          "description_text" : "Make me compile!\n\n<div class=\"hint\">\n  Everything is private in Rust by default -- but there's a keyword we can use to make something public!\n  The compiler error should point to the thing that needs to be public.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Modules 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"modules2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "mod delicious_snacks {\n    use self::fruits::PEAR as fruit;\n    use self::veggies::CUCUMBER as veggie;\n\n    mod fruits {\n        pub const PEAR: &'static str = \"Pear\";\n        pub const APPLE: &'static str = \"Apple\";\n    }\n\n    mod veggies {\n        pub const CUCUMBER: &'static str = \"Cucumber\";\n        pub const CARROT: &'static str = \"Carrot\";\n    }\n}\n\nfn main() {\n    println!(\"favorite snacks: {} and {}\",\n             delicious_snacks::fruit,\n             delicious_snacks::veggie);\n}\n"
            }
          },
          "description_text" : "Make me compile!\n\n<div class=\"hint\">\n  The delicious_snacks module is trying to present an external interface (the `fruit` and `veggie` constants) that is different than its internal structure (the `fruits` and `veggies` modules and associated constants).\n  It's almost there except for one keyword missing for each constant.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Macros",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "### Macros\n\nRust's macro system is very powerful, but also kind of difficult to wrap your\nhead around. We're not going to teach you how to write your own fully-featured\nmodules, instead we'll show you how to use and create them.\n\n#### Book Sections\n\n- [Macros](https://doc.rust-lang.org/stable/book/ch19-06-macros.html)\n- [The Little Book of Rust Macros](https://danielkeep.github.io/tlborm/book/index.html)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Macros 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"macros1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "macro_rules! my_macro {\n    () => {\n        println!(\"Check out my macro!\");\n    };\n}\n\nfn main() {\n    my_macro();\n}\n"
            }
          },
          "description_text" : "Make me compile!\n\n<div class=\"hint\">\n  When you call a macro, you need to add something special compared to a regular function call.\n  If you're stuck, take a look at what's inside `my_macro`.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Macros 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"macros2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    my_macro!();\n}\n\nmacro_rules! my_macro {\n    () => {\n        println!(\"Check out my macro!\");\n    };\n}\n"
            }
          },
          "description_text" : "Make me compile!\n\n<div class=\"hint\">\n  Macros don't quite play by the same rules as the rest of Rust, in terms of what's available where.\n\n  Unlike other things in Rust, the order of \"where you define a macro\" versus \"where you use it\" actually matters.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Macros 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"macros3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "mod macros {\n    macro_rules! my_macro {\n        () => {\n            println!(\"Check out my macro!\");\n        };\n    }\n}\n\nfn main() {\n    my_macro!();\n}\n"
            }
          },
          "description_text" : "Make me compile, without taking the macro out of the module!\n\n<div class=\"hint\">\n  In order to use a macro outside of its module, you need to do something special to the module to lift the macro out into its parent.\n\n  The same trick also works on \"extern crate\" statements for crates that have exported macros, if you've seen any of those around.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Macros 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"macros4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "macro_rules! my_macro {\n    () => {\n        println!(\"Check out my macro!\");\n    }\n    ($val:expr) => {\n        println!(\"Look at this other macro: {}\", $val);\n    }\n}\n\nfn main() {\n    my_macro!();\n    my_macro!(7777);\n}\n"
            }
          },
          "description_text" : "Make me compile!\n\n<div class=\"hint\">\n  You only need to add a single character to make this compile.\n\n  The way macros are written, it wants to see something between each \"macro arm\", so it can separate them.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Test 4",
      "task_list" : [
        {
          "name" : "Test 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"test4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    if my_macro!(\"world!\") != \"Hello world!\" {\n        panic!(\"Oh no! Wrong output!\");\n    }\n}\n"
            }
          },
          "description_text" : "This test covers the sections:\n- Modules\n- Macros\n\nWrite a macro that passes the test! No hints this time, you can do it!\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Move Semantics",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "### Move Semantics\n\nThese exercises are adapted from [pnkfelix](https://github.com/pnkfelix)'s [Rust Tutorial](https://pnkfelix.github.io/rust-examples-icfp2014/) -- Thank you Felix!!!\n\n#### Book Sections\n\nFor this section, the book links are especially important.\n\n- [Ownership](https://doc.rust-lang.org/stable/book/ch04-01-what-is-ownership.html)\n- [Reference and borrowing](https://doc.rust-lang.org/stable/book/ch04-02-references-and-borrowing.html)\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Move Semantics 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"move_semantics1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let vec0 = Vec::new();\n\n    let vec1 = fill_vec(vec0);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n\n    vec1.push(88);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n}\n\nfn fill_vec(vec: Vec<i32>) -> Vec<i32> {\n    let mut vec = vec;\n\n    vec.push(22);\n    vec.push(44);\n    vec.push(66);\n\n    vec\n}\n"
            }
          },
          "description_text" : "Make me compile!\n\n<div class=\"hint\">\n  So you've got the \"cannot borrow immutable local variable `vec1` as mutable\" error on line 8, right?\n  The fix for this is going to be adding one keyword, and the addition is NOT on line 8 where the error is.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Move Semantics 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"move_semantics2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let vec0 = Vec::new();\n\n    let mut vec1 = fill_vec(vec0);\n\n    // Do not change the following line!\n    println!(\"{} has length {} content `{:?}`\", \"vec0\", vec0.len(), vec0);\n\n    vec1.push(88);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n}\n\nfn fill_vec(vec: Vec<i32>) -> Vec<i32> {\n    let mut vec = vec;\n\n    vec.push(22);\n    vec.push(44);\n    vec.push(66);\n\n    vec\n}\n"
            }
          },
          "description_text" : "Make me compile without changing line 7!\n\n<div class=\"hint\">\n  So `vec0` is being *moved* into the function `fill_vec` when we call it on line 4, which means it gets dropped at the end of `fill_vec`, which means we can't use `vec0` again on line 7 (or anywhere else in `main` after the `fill_vec` call for that matter).\n  We could fix this in a few ways, try them all!\n\n  1. Make another, separate version of the data that's in `vec0` and pass that to `fill_vec` instead.\n  2. Make `fill_vec` borrow its argument instead of taking ownership of it, and then copy the data within the function in order to return an owned `Vec<i32>`\n  3. Make `fill_vec` *mutably* borrow its argument (which will need to be mutable), modify it directly, then not return anything. Then you can get rid of `vec1` entirely -- note that this will change what gets printed by the first `println!`\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Move Semantics 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"move_semantics3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let vec0 = Vec::new();\n\n    let mut vec1 = fill_vec(vec0);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n\n    vec1.push(88);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n}\n\nfn fill_vec(vec: Vec<i32>) -> Vec<i32> {\n    vec.push(22);\n    vec.push(44);\n    vec.push(66);\n\n    vec\n}\n"
            }
          },
          "description_text" : "Make me compile without adding new lines -- just changing existing lines! (no lines with multiple semicolons necessary!)\n\n<div class=\"hint\">\n  The difference between this one and the previous ones is that the first line of `fn fill_vec` that had `let mut vec = vec;` is no longer there.\n  You can, instead of adding that line back, add `mut` in one place that will change an existing binding to be a mutable binding instead of an immutable one :)\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Move Semantics 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"move_semantics4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let vec0 = Vec::new();\n\n    let mut vec1 = fill_vec(vec0);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n\n    vec1.push(88);\n\n    println!(\"{} has length {} content `{:?}`\", \"vec1\", vec1.len(), vec1);\n}\n\n// `fill_vec()` no longer take `vec: Vec<i32>` as argument\nfn fill_vec() -> Vec<i32> {\n    let mut vec = vec;\n\n    vec.push(22);\n    vec.push(44);\n    vec.push(66);\n\n    vec\n}\n"
            }
          },
          "description_text" : "Refactor this code so that instead of having `vec0` and creating the vector in `fn main`, we instead create it within `fn fill_vec` and transfer the freshly created vector from fill_vec to its caller.\n\n<div class=\"hint\">\n  Stop reading whenever you feel like you have enough direction :)\n  Or try doing one step and then fixing the compiler errors that result!\n\n  So the end goal is to:\n  - get rid of the first line in main that creates the new vector\n  - so then `vec0` doesn't exist, so we can't pass it to `fill_vec`\n  - we don't want to pass anything to `fill_vec`, so its signature should reflect that it does not take any arguments\n  - since we're not creating a new vec in `main` anymore, we need to create a new vec in `fill_vec`, similarly to the way we did in `main`\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Error Handling",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "For this exercise check out the sections:\n- [Error Handling](https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html) \n- [Generics](https://doc.rust-lang.org/book/ch10-01-syntax.html) \n\nof the Rust Book.\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Errors 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"errors1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "pub fn generate_nametag_text(name: String) -> Option<String> {\n    if name.len() > 0 {\n        Some(format!(\"Hi! My name is {}\", name))\n    } else {\n        // Empty names aren't allowed.\n        None\n    }\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use errors1::generate_nametag_text;\n\n#[test]\nfn generates_nametag_text_for_a_nonempty_name() {\n    assert_eq!(\n        generate_nametag_text(\"Beyoncé\".into()),\n        Some(\"Hi! My name is Beyoncé\".into())\n    );\n}\n\n#[test]\nfn explains_why_generating_nametag_text_fails() {\n    assert_eq!(\n        generate_nametag_text(\"\".into()),\n        Err(\"`name` was empty; it must be nonempty.\".into())\n    );\n}\n"
            }
          },
          "description_text" : "This function refuses to generate text to be printed on a nametag if you pass it an empty string.\nIt'd be nicer if it explained what the problem was, instead of just sometimes returning `None`.\nThe 2nd test currently does not compile or pass, but it illustrates the behavior we would like this function to have.\n\n<div class=\"hint\">\n  `Err` is one of the variants of `Result`, so what the 2nd test is saying is that `generate_nametag_text` should return a `Result` instead of an `Option`.\n\n  To make this change, you'll need to:\n  - update the return type in the function signature to be a Result that could be the variants `Ok(String)` and `Err(String)`\n  - change the body of the function to return `Ok(stuff)` where it currently returns `Some(stuff)`\n  - change the body of the function to return `Err(error message)` where it currently returns `None`\n  - change the first test to expect `Ok(stuff)` where it currently expects `Some(stuff)`.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Errors 2",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"errors2\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "use std::num::ParseIntError;\n\npub fn total_cost(item_quantity: &str) -> Result<i32, ParseIntError> {\n    let processing_fee = 1;\n    let cost_per_item = 5;\n    let qty = item_quantity.parse::<i32>();\n\n    Ok(qty * cost_per_item + processing_fee)\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use errors2::total_cost;\n\n#[test]\nfn item_quantity_is_a_valid_number() {\n    assert_eq!(total_cost(\"34\"), Ok(171));\n}\n\n#[test]\nfn item_quantity_is_an_invalid_number() {\n    assert_eq!(\n        total_cost(\"beep boop\").unwrap_err().to_string(),\n        \"invalid digit found in string\"\n    );\n}\n"
            }
          },
          "description_text" : "Say we're writing a game where you can buy items with tokens.\nAll items cost 5 tokens, and whenever you purchase items there is a processing fee of 1 token.\nA player of the game will type in how many items they want to buy, and the `total_cost` function will calculate the total number of tokens.\nSince the player typed in the quantity, though, we get it as a string -- and they might have typed anything, not just numbers!\n\nRight now, this function isn't handling the error case at all (and isn't handling the success case properly either).\nWhat we want to do is: if we call the `parse` function on a string that is not a number, that function will return a `ParseIntError`, and in that case, we want to immediately return that error from our function and not try to multiply and add.\n\nThere are at least two ways to implement this that are both correct -- but one is a lot shorter!\nScroll down for hints to both ways.\n\n<div class=\"hint\">\n  One way to handle this is using a `match` statement on `item_quantity.parse::<i32>()` where the cases are `Ok(something)` and `Err(something)`.\n  This pattern is very common in Rust, though, so there's a `?` operator that does pretty much what you would make that match statement do for you!\n  Take a look at this section of the Error Handling chapter:\n  https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\n  and give it a try!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Errors 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"errors3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "use std::num::ParseIntError;\n\nfn main() {\n    let mut tokens = 100;\n    let pretend_user_input = \"8\";\n\n    let cost = total_cost(pretend_user_input)?;\n\n    if cost > tokens {\n        println!(\"You can't afford that many!\");\n    } else {\n        tokens -= cost;\n        println!(\"You now have {} tokens.\", tokens);\n    }\n}\n\nfn total_cost(item_quantity: &str) -> Result<i32, ParseIntError> {\n    let processing_fee = 1;\n    let cost_per_item = 5;\n    let qty = item_quantity.parse::<i32>()?;\n\n    Ok(qty * cost_per_item + processing_fee)\n}\n"
            }
          },
          "description_text" : "This is a program that is trying to use a completed version of the `total_cost` function from the previous exercise.\nIt's not working though -- we can't use the `?` operator in the `main()` function! Why not?\n\n<div class=\"hint\">\n  Since the `?` operator returns an `Err` early if the thing it's trying to do fails, you can only use the `?` operator in functions that have a `Result` as their return type.\n\n  Hence the error that you get if you run this code is:\n\n  ```\n  error[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n  ```\n\n  So we have to use another way of handling a `Result` within `main`.\n\n  Decide what we should do if `pretend_user_input` has a string value that does not parse to an integer, and implement that instead of using the `?` operator.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Errors n",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"errorsn\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "use std::error;\nuse std::fmt;\nuse std::io;\n\n// PositiveNonzeroInteger is a struct defined below the tests.\npub fn read_and_validate(b: &mut io::BufRead) -> Result<PositiveNonzeroInteger, ???> {\n    let mut line = String::new();\n    b.read_line(&mut line);\n    let num: i64 = line.trim().parse();\n    let answer = PositiveNonzeroInteger::new(num);\n    answer\n}\n\n// This is a test helper function that turns a &str into a BufReader.\npub fn test_with_str(s: &str) -> Result<PositiveNonzeroInteger, Box<error::Error>> {\n    let mut b = io::BufReader::new(s.as_bytes());\n    read_and_validate(&mut b)\n}\n\n#[derive(PartialEq, Debug)]\npub struct PositiveNonzeroInteger(u64);\n\nimpl PositiveNonzeroInteger {\n    pub fn new(value: i64) -> Result<PositiveNonzeroInteger, CreationError> {\n        if value == 0 {\n            Err(CreationError::Zero)\n        } else if value < 0 {\n            Err(CreationError::Negative)\n        } else {\n            Ok(PositiveNonzeroInteger(value as u64))\n        }\n    }\n}\n\n#[derive(PartialEq, Debug)]\npub enum CreationError {\n    Negative,\n    Zero,\n}\n\nimpl fmt::Display for CreationError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.write_str((self as &error::Error).description())\n    }\n}\n\nimpl error::Error for CreationError {\n    fn description(&self) -> &str {\n        match *self {\n            CreationError::Negative => \"Negative\",\n            CreationError::Zero => \"Zero\",\n        }\n    }\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use errorsn::{read_and_validate, test_with_str, CreationError, PositiveNonzeroInteger};\nuse std::error;\nuse std::io;\n\n#[test]\nfn test_success() {\n    let x = test_with_str(\"42\\n\");\n    assert_eq!(PositiveNonzeroInteger(42), x.unwrap());\n}\n\n#[test]\nfn test_not_num() {\n    let x = test_with_str(\"eleven billion\\n\");\n    assert!(x.is_err());\n}\n\n#[test]\nfn test_non_positive() {\n    let x = test_with_str(\"-40\\n\");\n    assert!(x.is_err());\n}\n\n#[test]\nfn test_ioerror() {\n    struct Broken;\n    impl io::Read for Broken {\n        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {\n            Err(io::Error::new(io::ErrorKind::BrokenPipe, \"uh-oh!\"))\n        }\n    }\n    let mut b = io::BufReader::new(Broken);\n    assert!(read_and_validate(&mut b).is_err());\n    assert_eq!(\"uh-oh!\", read_and_validate(&mut b).unwrap_err().to_string());\n}\n\n#[test]\nfn test_positive_nonzero_integer_creation() {\n    assert!(PositiveNonzeroInteger::new(10).is_ok());\n    assert_eq!(\n        Err(CreationError::Negative),\n        PositiveNonzeroInteger::new(-10)\n    );\n    assert_eq!(Err(CreationError::Zero), PositiveNonzeroInteger::new(0));\n}\n"
            }
          },
          "description_text" : "This is a bigger error exercise than the previous ones!\nYou can do it! :)\n\nEdit the `read_and_validate` function so that it compiles and passes the tests... so many things could go wrong!\n\n- Reading from stdin could produce an io::Error\n- Parsing the input could produce a num::ParseIntError\n- Validating the input could produce a CreationError (defined below)\n\nHow can we lump these errors into one general error?\nThat is, what type goes where the question marks are, and how do we return that type from the body of read_and_validate?\n\n<div class=\"hint\">\n  To figure out what type should go where the ??? is, take a look at the test helper function `test_with_str`, since it returns whatever `read_and_validate` returns and`test_with_str` has its signature fully specified.\n</div>\n\n<div class=\"hint\">\n  There are three places in `read_and_validate` that we call a function that returns a `Result` (that is, the functions might fail).\n\n  Apply the `?` operator on those calls so that we return immediately from `read_and_validate` if those function calls fail.\n</div>\n\n<div class=\"hint\">\n  Under the hood, the `?` operator calls `From::from` on the error value to convert it to a boxed trait object, a Box<error::Error>, which is polymorphic -- that means that lots of different kinds of errors can be returned from the same function because all errors act the same since they all implement the `error::Error` trait.\n\n  Check out this section of the book:\n  https://doc.rust-lang.org/stable/book/second-edition/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\n</div>\n\n<div class=\"hint\">\n  Note that because the `?` operator returns the *unwrapped* value in the `Ok` case, if we want to return a `Result` from `read_and_validate` for *its* success case, we'll have to rewrap a value that we got from the return value of a `?`ed call in an `Ok` -- this will look like `Ok(something)`.\n</div>\n\n<div class=\"hint\">\n  `Result`s must be \"used\", that is, you'll get a warning if you don't handle a `Result` that you get in your function.\n\n  Read more about that in the `std::result` module docs:\n  https://doc.rust-lang.org/std/result/#results-must-be-used\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Option 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"option1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    let mut list = vec![3];\n\n    let last = list.pop().unwrap();\n    println!(\"The last item in the list is {:?}\", last);\n\n    let second_to_last = list.pop().unwrap();\n    println!(\n        \"The second-to-last item in the list is {:?}\",\n        second_to_last\n    );\n}\n"
            }
          },
          "description_text" : "This example panics because the second time it calls `pop`, the `vec` is empty, so `pop` returns `None`, and `unwrap` panics if it's called on `None`.\nHandle this in a more graceful way than calling `unwrap`!\n\n<div class=\"hint\">\n  Try using a `match` statement where the arms are `Some(thing)` and `None`.\n  Or set a default value to print out if you get `None` by using the function `unwrap_or`.\n  Or use an `if let` statement on the result of `pop()` to both destructure a `Some` value and only print out something if we have a value!\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Result 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"result1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#[derive(PartialEq, Debug)]\npub struct PositiveNonzeroInteger(u64);\n\n#[derive(PartialEq, Debug)]\npub enum CreationError {\n    Negative,\n    Zero,\n}\n\nimpl PositiveNonzeroInteger {\n    pub fn new(value: i64) -> Result<PositiveNonzeroInteger, CreationError> {\n        Ok(PositiveNonzeroInteger(value as u64))\n    }\n}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use result1::{CreationError, PositiveNonzeroInteger};\n\n#[test]\nfn test_creation() {\n    assert!(PositiveNonzeroInteger::new(10).is_ok());\n    assert_eq!(\n        Err(CreationError::Negative),\n        PositiveNonzeroInteger::new(-10)\n    );\n    assert_eq!(Err(CreationError::Zero), PositiveNonzeroInteger::new(0));\n}\n"
            }
          },
          "description_text" : "Make this test pass!\n\n<div class=\"hint\">\n  `PositiveNonzeroInteger::new` is always creating a new instance and returning an `Ok` result.\n  It should be doing some checking, returning an `Err` result if those checks fail, and only returning an `Ok` result if those checks determine that everything is... okay :)\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Threads",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "For this exercise check out the [Dining Philosophers example](https://doc.rust-lang.org/1.4.0/book/dining-philosophers.html) and the chapter [Concurrency](https://doc.rust-lang.org/book/2018-edition/ch16-01-threads.html) of the Rust Book.\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Threads 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"threads1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "use std::sync::Arc;\nuse std::thread;\nuse std::time::Duration;\n\nstruct JobStatus {\n    jobs_completed: u32,\n}\n\nfn main() {\n    let status = Arc::new(JobStatus { jobs_completed: 0 });\n    let status_shared = status.clone();\n    thread::spawn(move || {\n        for _ in 0..10 {\n            thread::sleep(Duration::from_millis(250));\n            status_shared.jobs_completed += 1;\n        }\n    });\n    while status.jobs_completed < 10 {\n        println!(\"waiting... \");\n        thread::sleep(Duration::from_millis(500));\n    }\n}\n"
            }
          },
          "description_text" : "Make this compile!\n\nThe idea is the thread spawned on line 12 is completing jobs while the main thread is monitoring progress until 10 jobs are completed.\nIf you see 6 lines of \"waiting...\" and the program ends without timing out the playground, you've got it :)\n\n<div class=\"hint\">\n  `Arc` is an Atomic Reference Counted pointer that allows safe, shared access to **immutable** data. But we want to *change* the number of `jobs_completed` so we'll need to also use another type that will only allow one thread to mutate the data at a time.\n  Take a look at this section of the book:\n  https://doc.rust-lang.org/stable/book/second-edition/ch16-03-shared-state.html#atomic-reference-counting-with-arct\n  and keep scrolling if you'd like more hints :)\n</div>\n\n<div class=\"hint\">\n  Do you now have an `Arc` `Mutex` `JobStatus` at the beginning of main? Like:\n\n  ```rust\n  let status = Arc::new(Mutex::new(JobStatus { jobs_completed: 0 }));\n  ```\n  Similar to the code in the example in the book that happens after the text that says \"We can use Arc<T> to fix this.\".\n  If not, give that a try!\n  If you do and would like more hints, keep scrolling!!\n</div>\n\n<div class=\"hint\">\n  Make sure neither of your threads are holding onto the lock of the mutex while they are sleeping, since this will prevent the other thread from being allowed to get the lock. Locks are automatically released when they go out of scope.\n</div>\n\n<div class=\"hint\">\n  Ok, so, real talk, this was actually tricky for *me* to do too.\n  And I could see a lot of different problems you might run into, so at this point I'm not sure which one you've hit :)\n  Please see a few possible answers on https://github.com/carols10cents/rustlings/issues/3 -- mine is a little more complicated because I decided I wanted to see the number of jobs currently done when I was checking the status.\n\n  Please open an issue if you're still running into a problem that these hints are not helping you with, or if you've looked at the sample answers and don't understand why they work and yours doesn't.\n\n  If you've learned from the sample solutions, I encourage you to come back to this exercise and try it again in a few days to reinforce what you've learned :)\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Standard Library Types",
      "task_list" : [
        {
          "name" : "Intro",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"intro\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fn main() {\n    // put you code here to launch it\n}\n"
            }
          },
          "description_text" : "For the Arc exercise check out the chapter [Shared-State Concurrency](https://doc.rust-lang.org/book/2018-edition/ch16-03-shared-state.html) of the Rust Book.\n\nFor the Iterator exercise check out the chapters [Iterator](https://doc.rust-lang.org/book/2018-edition/ch13-02-iterators.html) of the Rust Book and the [Iterator documentation](https://doc.rust-lang.org/stable/std/iter/trait.Iterator.htmlj).\n\nDo not adjust your monitors -- iterators 1 and 2 are indeed missing. Iterator 3 is a bit challenging so we're leaving space for some exercises to lead up to it!\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Arc 1",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"arc1\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/main.rs" : {
              "name" : "src/main.rs",
              "placeholders" : [
                {
                  "offset" : 124,
                  "length" : 9,
                  "possible_answer" : "_________",
                  "placeholder_text" : "type here"
                }
              ],
              "is_visible" : true,
              "text" : "use std::sync::Arc;\nuse std::thread;\n\nfn main() {\n    let numbers: Vec<_> = (0..100u32).collect();\n    let shared_numbers = type here;\n    let mut joinhandles = Vec::new();\n\n    for offset in 0..8 {\n        joinhandles.push(\n            thread::spawn(move || {\n                let mut i = offset;\n                let mut sum = 0;\n                while i < child_numbers.len() {\n                    sum += child_numbers[i];\n                    i += 5;\n                }\n                println!(\"Sum of offset {} is {}\", offset, sum);\n            }));\n    }\n    for handle in joinhandles.into_iter() {\n        handle.join().unwrap();\n    }\n}\n"
            }
          },
          "description_text" : "Make this code compile by filling in a value for `shared_numbers` and creating an initial binding for `child_numbers` somewhere.\nTry not to create any copies of the `numbers` Vec!\n\n<div class=\"hint\">\n  Make `shared_numbers` be an `Arc` from the numbers vector.\n  Then, in order to avoid creating a copy of `numbers`, you'll need to create `child_numbers` inside the loop but still in the main thread.\n\n  `child_numbers` should be a clone of the Arc of the numbers instead of a thread-local copy of the numbers.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Iterator 3",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"iterator3\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#[derive(Debug, PartialEq, Eq)]\npub enum DivisionError {\n    NotDivisible(NotDivisibleError),\n    DivideByZero,\n}\n\n#[derive(Debug, PartialEq, Eq)]\npub struct NotDivisibleError {\n    dividend: i32,\n    divisor: i32,\n}\n\n// This function should calculate `a` divided by `b` if `a` is evenly divisible by b.\n// Otherwise, it should return a suitable error.\npub fn divide(a: i32, b: i32) -> Result<i32, DivisionError> {\n\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    // Iterator exercises using your `divide` function\n\n    #[test]\n    fn result_with_list() {\n        let numbers = vec![27, 297, 38502, 81];\n        let division_results = numbers.into_iter().map(|n| divide(n, 27));\n        let x //... Fill in here!\n        assert_eq!(format!(\"{:?}\", x), \"Ok([1, 11, 1426, 3])\");\n    }\n    #[test]\n    fn list_of_results() {\n        let numbers = vec![27, 297, 38502, 81];\n        let division_results = numbers.into_iter().map(|n| divide(n, 27));\n        let x //... Fill in here!\n        assert_eq!(format!(\"{:?}\", x), \"[Ok(1), Ok(11), Ok(1426), Ok(3)]\");\n    }\n}"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use iterator3::{divide, DivisionError, NotDivisibleError};\n\n#[test]\nfn test_success() {\n    assert_eq!(divide(81, 9), Ok(9));\n}\n\n#[test]\nfn test_not_divisible() {\n    assert_eq!(\n        divide(81, 6),\n        Err(DivisionError::NotDivisible(NotDivisibleError {\n            dividend: 81,\n            divisor: 6\n        }))\n    );\n}\n\n#[test]\nfn test_divide_by_0() {\n    assert_eq!(divide(81, 0), Err(DivisionError::DivideByZero));\n}\n\n#[test]\nfn test_divide_0_by_something() {\n    assert_eq!(divide(0, 81), Ok(0));\n}\n"
            }
          },
          "description_text" : "This is a bigger exercise than most of the others!\nYou can do it!\n\nHere is your mission, should you choose to accept it:\n1. Complete the divide function to get the first four tests to pass\n2. Uncomment the last two tests and get them to pass by filling in values for `x` using `division_results`.\n\nScroll down for a minor hint for part 2, and scroll down further for a major hint.\nHave fun :-)\n\n<div class=\"hint\">\n  In each of the two cases in the match in main, you can create x with either a 'turbofish' or by hinting the type of x to the compiler.\n  You may try both.\n</div>\n\n<div class=\"hint\">\n  Have a look at the Iter trait and at the explanation of its collect function.\n  Especially the part about Result is interesting.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Iterators 4",
          "files" : {
            "Cargo.toml" : {
              "name" : "Cargo.toml",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "[package]\nname = \"iterators4\"\nversion = \"0.1.0\"\nedition = \"2018\"\n"
            },
            "src/lib.rs" : {
              "name" : "src/lib.rs",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "pub fn factorial(num: u64) -> u64 {}\n"
            },
            "tests/tests.rs" : {
              "name" : "tests/tests.rs",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "use iterators4::factorial;\n\n#[test]\nfn factorial_of_1() {\n    assert_eq!(1, factorial(1));\n}\n\n#[test]\nfn factorial_of_2() {\n    assert_eq!(2, factorial(2));\n}\n\n#[test]\nfn factorial_of_4() {\n    assert_eq!(24, factorial(4));\n}\n"
            }
          },
          "description_text" : "Complete this function to return factorial of num.\n\nDo not use:\n- `return`\n\nFor extra fun don't use:\n- imperative style loops (`for`, `while`)\n- additional variables\n\nFor the most fun don't use:\n- recursion\n\n<div class=\"hint\">\n  In an imperative language you might write a for loop to iterate through multiply the values into a mutable variable.\n  Or you might write code more functionally with recursion and a match clause.\n  But you can also use ranges and iterators to solve this in rust.\n</div>\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "LICENSE",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "MIT License\n\nCopyright (c) 2019 Mikhail Chernyavsky\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
    },
    {
      "name" : "README.md",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# rustlings \uD83E\uDD80❤️\n\nGreetings and welcome to `rustlings`.\nThis project contains small exercises to get you used to reading and writing Rust code.\nThis includes reading and responding to compiler messages!\n\n## Credits\n\n`rustlings` was originally written by [Carol](https://github.com/carols10cents)!\n"
    }
  ],
  "version" : 11
}